{
    "version": "https://jsonfeed.org/version/1",
    "title": "-NIYAH- • All posts by \"ida\" tag",
    "description": "Niyah",
    "home_page_url": "http://niyah.cn",
    "items": [
        {
            "id": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/",
            "url": "http://niyah.cn/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/",
            "title": "教你用IDA",
            "date_published": "2022-09-09T06:10:27.000Z",
            "content_html": "<p>还得是你 IDA</p>\n<a id=\"more\"></a>\n<h1 id=\"教你用ida\"><a class=\"markdownIt-Anchor\" href=\"#教你用ida\">#</a> 教你用 IDA</h1>\n<p>还在为 IDA 反编译出的代码一坨答辩而烦恼吗，还在为玩不明白 IDA 而遭人鄙夷吗，那么今天来点大家想看的东西，只需 C 语言数据结构基础，教你调教出汉语言文学专业的妹妹都能看懂的代码</p>\n<h2 id=\"ida迷惑代码大赏\"><a class=\"markdownIt-Anchor\" href=\"#ida迷惑代码大赏\">#</a> IDA 迷惑代码大赏</h2>\n<ol start=\"0\">\n<li>首先介绍一下 IDA 里常见的屎，我们打开一道某城杯的 ez_linklist 题目</li>\n</ol>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220908173729472.png\" alt=\"image-20220908173729472\"></p>\n<ol>\n<li>点下 ok 找到 main 函数，映入眼帘就是一坨很经典的屎， <code>switch跳转表识别错误</code> ，属于是史里比较正常的一坨，这还不是很影响分析的部分</li>\n</ol>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220908173830651.png\" alt=\"image-20220908173830651\"></p>\n<ol start=\"2\">\n<li>看一眼侧边栏，很经典的 <code>拿掉自定义的函数名</code> ，那么本程序的数据结构肯定也就没有了</li>\n</ol>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220908174053048.png\" alt=\"image-20220908174053048\"></p>\n<ol start=\"3\">\n<li>我们向上逐个点进去看一眼，更是个寄吧， <code>各种解引用强转</code> 写的和一把米诺一样（恼），看起来就像是精神状态欠佳的人写出来的代码</li>\n</ol>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220908174307926.png\" alt=\"image-20220908174307926\"></p>\n<ol start=\"4\">\n<li>接下来点进 puts 下面的函数， <code>call了不知道个什么b玩意</code> ，鉴定为纯纯的纯纯</li>\n</ol>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220908174456180.png\" alt=\"image-20220908174456180\"></p>\n<ol start=\"5\">\n<li>这里面更是直接 <code>见红</code></li>\n</ol>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220908175347891.png\" alt=\"image-20220908175347891\"></p>\n<p>如果你也遇到了如上情况，别急，立刻点击右上角叉叉放弃本题（不是），请接着往下看</p>\n<h2 id=\"c语言变量复习\"><a class=\"markdownIt-Anchor\" href=\"#c语言变量复习\">#</a> C 语言变量复习</h2>\n<p>正经复习环节，众所周知 c 语言有很多基本变量类型，比如 int char 也有数组等等</p>\n<p>有下面的变量</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p>a 便是 int 类型的变量，b 是一个 int 数组，他们都是我们的常见类型</p>\n<ol>\n<li>\n<p>其中 a 实际上指向了一块地址所指的值，其 int 表示将 a 地址中的东西以 int 类型来解析出来，所以我们直接输出 a 可以输出  <code>a 存放的值</code></p>\n</li>\n<li>\n<p>而 b 指向了一块地址，其 int 表示 将 b 里面的数据用 int 类型解析出来，但是直接输出 b 不能输出  <code>b 存放的值</code> ，而是输出了  <code>b 的地址</code>  ，因为  <code>b</code>  本身就是一个地址，因此需要加上 b 后面的下标也就是 b [x] , 才能输出  <code>b 对应位置所存放的值</code> ，对 b 取索引的操作也同样是 <code>对 b 以 int 类型解引用</code></p>\n</li>\n</ol>\n<p>所以之后在单独使用变量时由于前面的声明：</p>\n<p><code>a的地址所指向的值</code> 被 c 语言直接当成了 a 的值 。</p>\n<p><code>b的地址</code> 被 c 语言当成了 b 的值，<strong>因此，我们也将 b 称之为指针</strong>。</p>\n<p>接下来我们对变量进行赋值并输出</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">114514</span><span class=\"token punctuation\">,</span><span class=\"token number\">1919</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>编译运行的结果如下，我们可以发现第二行的地址貌似有点怪嗷，我们的地址不是一般 0x7f 开头吗？</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">114514</span>\n<span class=\"token number\">469523392</span>  以<span class=\"token number\">16</span>进制表示 <span class=\"token number\">0x1bfc5bc0</span></code></pre>\n<p>要是这么想那只能说你计算机的造纸不够高，注意看 % d 是将值以 int 类型输出，int 类型所占的长度仅为 4 字节，而地址长度在 64 位机是 8 字节， b 的地址又被当成了值，因此只能输出  <code>该地址的低4字节</code></p>\n<p>紧接着继续深入，我们知道 c 语言中的  <code>*</code>  处了乘号之外，还有一个功能就是解引用，也就是将地址里面的值给解出来，既然 b 作为一个地址，那么我们就可以将 b 地址所存放的值用 * 给他解出来</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">114514</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1919</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">114514</span>\n<span class=\"token operator\">-</span><span class=\"token number\">879752048</span>\n<span class=\"token number\">114514</span></code></pre>\n<p>我们又知道 b 数组的地址是连续的，那么我们可以通过加上偏移来实现索引不同位置的值，注意解引用的优先级是比加减要高的</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">114514</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1919</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">114514</span>\n<span class=\"token number\">289332624</span>\n<span class=\"token number\">114514</span>\n<span class=\"token number\">1919</span></code></pre>\n<p>我们同样实现了取下标的效果，但是这个时候可能又有同学会发问，int 类型长度不是 4 吗？为啥 b + 1 就是 b [1] 呢 不应该是 b + 4 吗？</p>\n<p>那么还记得我们的声明吗，b 前面的 int 也不是没有作用的，这是让 c 语言知道 ，b 是一个 int 类型的指针</p>\n<p>接下来介绍强制转换， c 语言中的指针也有强制转换，比如我们 malloc 出来的地址默认是 void * 指针，它的粒度就是 1 字节，我们可以通过 (int *) 从而强制将其转化为 int 类型，从而让 c 语言认为他是一个 4 字节为单位的 int 类型的指针</p>\n<p>接着我们再回到上面的问题，我们将这个 b 指针首先强制转为 void * 类型，再在这个类型上 +4 偏移，其后再强转为 int * 类型并解引用出去，不就也可以输出对应地址偏移的值吗</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">114514</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1919</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">114514</span>\n<span class=\"token number\">1692555520</span>\n<span class=\"token number\">114514</span>\n<span class=\"token number\">1919</span>\n<span class=\"token number\">1919</span></code></pre>\n<blockquote>\n<p>另外，我们也可以得到如下等式</p>\n<p>a = b[-1] = *b-1 = *(int *)b-1 = *(int *)((void *)b-4)</p>\n</blockquote>\n<p>接下来介绍另一个运算符  <code>&amp;</code> ，这个运算符和  <code>*</code>  相反，&amp; 是取地址</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">114514</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1919</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>输出结果</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">114514</span>\n<span class=\"token number\">1006296128</span>\n<span class=\"token number\">114514</span>\n<span class=\"token number\">1919</span>\n<span class=\"token number\">1919</span>\n<span class=\"token number\">1006296124</span>\n<span class=\"token number\">114514</span></code></pre>\n<p>可以看到最后面的两行，分别输出了 a 的地址和 a 的值，可以观察和上面的地址正好相差了 4 ，这也同时印证了 a 的长度是 4 并且 a 和 b 的地址是连续的，而最后一行 通过 &amp; * 两个运算符的使用 a 作为一个 int 值先取地址随后解引用，就又回到了它本身</p>\n<p>那么对 c 语言的复习先到此为止</p>\n<h2 id=\"把史包装成一坨能上餐桌的史\"><a class=\"markdownIt-Anchor\" href=\"#把史包装成一坨能上餐桌的史\">#</a> 把史包装成一坨能上餐桌的史</h2>\n<h3 id=\"修复错误识别\"><a class=\"markdownIt-Anchor\" href=\"#修复错误识别\">#</a> 修复错误识别</h3>\n<p>首先解决 call 很怪的问题，因为修复其涉及到 patch 程序，所以应该放到其他优化之前</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__fastcall <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sub_1268 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>上面的错误便是 IDA 对函数的错误识别，点进函数切换到汇编视图可以看到下面一大片没有被 IDA 识别到而显示出了触目惊心的红色</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909220207604.png\" alt=\"image-20220909220207604\"></p>\n<p>显然是上面的汇编片段出现了问题，在 push rbp 指令之前还有几条指令，在此之后的识别全部出错，所以，可以使用 IDA keypatch 插件将 push rbp 之前的指令全部 nop 掉</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909220626269.png\" alt=\"image-20220909220626269\"></p>\n<p>保存后再打开已经不见红了</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909220950629.png\" alt=\"image-20220909220950629\"></p>\n<p>说明函数也自动被识别成功</p>\n<h3 id=\"修复switch跳转表\"><a class=\"markdownIt-Anchor\" href=\"#修复switch跳转表\">#</a> 修复 switch 跳转表</h3>\n<p>这算是 IDA 里的一个老坑了，反正就这么几个选项，觉得不影响的可以不去修复</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909221433356.png\" alt=\"image-20220909221433356\"></p>\n<p>同样是切到汇编视图</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909221545213.png\" alt=\"image-20220909221545213\"></p>\n<p>这里首先执行了 lea rdx, unk_2110 命令，我们点进这个地址去看，是 data 段的一条数据</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909221813011.png\" alt=\"image-20220909221813011\"></p>\n<p>我们将上面的数据按 D 转换成 4 字节一组，那么这其实就是调转表了，可以看到其中有 6 个元素</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909222033990.png\" alt=\"image-20220909222033990\"></p>\n<p>我们再回到汇编处，这里光标选中刚刚改好的这个地址点进 Edit -&gt; Other -&gt; Specify switch idiom</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909223205678.png\" alt=\"image-20220909223205678\"></p>\n<p>会出现如下对话框</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909231432443.png\" alt=\"image-20220909231432443\"></p>\n<blockquote>\n<p>Number of elements ：跳转元素个数，这个例子是 6</p>\n<p>Size of table element ：跳转表每个元素长度，这里是 4</p>\n<p>Element base value ：这里和第一个相同即可</p>\n<p>Input register of switch ：跳转到的寄存器，这里是 rax</p>\n<p>Default jump address ：默认跳转地址，这里可以看到下面的 “Bad choice”，或者直接点，最后一个就行</p>\n<p>Signed jump table elements ：如果上面看到的跳转表是负数则需要勾选此选项，比如之前看到的数据是 0xff 开头</p>\n</blockquote>\n<p>或者按照大佬的一图流来也可以</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909231230923.png\" alt=\"image-20220909231230923\"></p>\n<p><a href=\"https://blog.csdn.net/huzai9527/article/details/121204850\">IDA 修复跳表_huzai9527 的博客 - CSDN 博客_ida switch 修复</a></p>\n<p>这个时候在打开 main 可以看到已经修复了</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909231708468.png\" alt=\"image-20220909231708468\"></p>\n<h3 id=\"重命名函数和变量\"><a class=\"markdownIt-Anchor\" href=\"#重命名函数和变量\">#</a> 重命名函数和变量</h3>\n<p>我们看到的函数，变量名全是将符号表给拿掉的，我们可以通过自己的理解和命名习惯对其重命名</p>\n<p>ida  <code>快捷键 n</code> ， 在变量名或者函数名处按 n 便可以对函数进行重命名</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909215650052.png\" alt=\"image-20220909215650052\"></p>\n<p>以 add 函数为例，初步更改变量名后</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h]</span>\n  <span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-Ch]</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-8h]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">15</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ptr_list <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many link list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  choice <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> choice <span class=\"token operator\">></span> <span class=\"token number\">0x70</span> <span class=\"token operator\">||</span> choice <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrong size!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  buf <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ptr_list <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x18uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ptr_list <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">8LL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> choice<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ptr_list <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">16LL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ptr_list <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">your_read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>可以看到如上的代码可读性好了一些些了，按照自己的理解继续命名其他函数</p>\n<h3 id=\"修复强制转换\"><a class=\"markdownIt-Anchor\" href=\"#修复强制转换\">#</a> 修复强制转换</h3>\n<p>观察到上面代码中存在着很多这种扎眼的代码</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ptr_list <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span></code></pre>\n<p>按照我们回顾的 c 语言知识，这里看看 ptr_list 的变量类型为  <code>_QWORD</code>  ，它并非一个常见的类型，不过从名字可以看出它就是一个 4 字 也就是 8 字节 长度的变量，首先将其取地址，随后转化为  <code>_QWORD</code>  指针，之后加上偏移，再解引用</p>\n<p>注意这里别被他绕进去，先取地址再转化为指针，这个时候已经变成地址了，再解引用就又回到了那个值本身，只不过加上了偏移，因此，这不就是之前所说道的数组吗？</p>\n<p>ida  <code>快捷键 y</code> ， 在变量名或者函数名处按 y 便可以对函数进行类型修改</p>\n<p>将其修改为长度为 16 的数组后，代码如下，更像人写的了</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909233100532.png\" alt=\"image-20220909233100532\"></p>\n<p>我们再思考一下，malloc 返回的是一个指针，因此用来接收它的数组也是一个指针数组，那么将其修改为指针数组</p>\n<p>可以看到，上面对应偏移存放着不同的值，那么不用怀疑，这个指针应该对应着某种结构体，在隔壁 structues 使用  <code>insert</code>  新插入一个结构体，注意到上面 malloc 大小为 0x18，新建如下数组</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909233810069.png\" alt=\"image-20220909233810069\"></p>\n<p>那么接下来就可以将其修改为我们新建结构体的变量类型了</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909233926778.png\" alt=\"image-20220909233926778\"></p>\n<p>出现了结构体指针的标志性 -&gt; 符</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909233950113.png\" alt=\"image-20220909233950113\"></p>\n<p>同时也发现了 LODWORD 这个操作符，出现这个的原因是结构体部分元素粒度不够细，将对应元素拆分成长度更小的元素就行，如下图，按  <code>d</code>  将一个 qd 拆分成两个 dd</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909234257485.png\" alt=\"image-20220909234257485\"></p>\n<p>再回来已经非常接近人类写的代码了</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909234356672.png\" alt=\"image-20220909234356672\"></p>\n<p>再重新重命名一下自定义结构体的各个元素</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h]</span>\n  <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-Ch]</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-8h]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">15</span> <span class=\"token operator\">&amp;&amp;</span> ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many link list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  size <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> size <span class=\"token operator\">></span> <span class=\"token number\">0x70</span> <span class=\"token operator\">||</span> size <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrong size!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x18uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>field_0 <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">your_read</span><span class=\"token punctuation\">(</span>ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>可以看到这段代码贴进代码块已经没有什么违和感了，但该结构体还有一个疑点，我们可以进入其他函数继续分析</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-14h]</span>\n  <span class=\"token keyword\">int</span> idx1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h]</span>\n  <span class=\"token keyword\">int</span> idx2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+14h] [rbp-Ch]</span>\n  node <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span>\n\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link from:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  idx1 <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr_list<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> idx1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx1 <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad node\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link to:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  idx2 <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr_list<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> idx2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx2 <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad node\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ptr <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr<span class=\"token operator\">-></span>field_0<span class=\"token punctuation\">;</span>\n  ptr<span class=\"token operator\">-></span>field_0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>ptr_list<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>函数逻辑比较简单，看到这里，也已经知道这个 field_0 就相当于节点的 next 指针了，指向了下一个节点，因此这个元素的类型是  <code>我们创造的结构体指针类型</code> ，元素名无所谓，就叫他 next 吧，改名并修改 类型</p>\n<p><img src=\"/CTF/%E6%95%99%E4%BD%A0%E7%94%A8IDA/image-20220909235245037.png\" alt=\"image-20220909235245037\"></p>\n<p>至此，本题的数据结构以及逻辑全部弄清楚了，接着可以跟随自己的习惯优化代码</p>\n<h2 id=\"高质量代码鉴赏环节\"><a class=\"markdownIt-Anchor\" href=\"#高质量代码鉴赏环节\">#</a> 高质量代码鉴赏环节</h2>\n<p>题目名 ez_linklist</p>\n<h3 id=\"main\"><a class=\"markdownIt-Anchor\" href=\"#main\">#</a> main</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> __fastcall __noreturn <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>__int64 a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>a3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-4h]</span>\n\n  <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    choice <span class=\"token operator\">=</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> choice <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int64<span class=\"token punctuation\">)</span>table <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>table<span class=\"token punctuation\">[</span>choice<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1uLL</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">2uLL</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">3uLL</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">4uLL</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">5uLL</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">goto</span> LABEL_9<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\nLABEL_9<span class=\"token operator\">:</span>\n  <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad choice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"add\"><a class=\"markdownIt-Anchor\" href=\"#add\">#</a> add</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h]</span>\n  <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-Ch]</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-8h]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">15</span> <span class=\"token operator\">&amp;&amp;</span> ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many link list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  size <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> size <span class=\"token operator\">></span> <span class=\"token number\">0x70</span> <span class=\"token operator\">||</span> size <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrong size!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x18uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">your_read</span><span class=\"token punctuation\">(</span>ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"link\"><a class=\"markdownIt-Anchor\" href=\"#link\">#</a> link</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-14h]</span>\n  <span class=\"token keyword\">int</span> idx1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h]</span>\n  <span class=\"token keyword\">int</span> idx2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+14h] [rbp-Ch]</span>\n  node <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span>\n\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link from:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  idx1 <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr_list<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> idx1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx1 <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad node\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link to:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  idx2 <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr_list<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> idx2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx2 <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad node\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ptr <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    ptr <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  ptr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>idx1<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  ptr_list<span class=\"token punctuation\">[</span>idx2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"unlink\"><a class=\"markdownIt-Anchor\" href=\"#unlink\">#</a> unlink</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-18h]</span>\n  <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-14h]</span>\n  <span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-10h]</span>\n  <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+14h] [rbp-Ch]</span>\n  node <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-8h]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">15</span> <span class=\"token operator\">&amp;&amp;</span> ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many link list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  idx <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> idx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad idx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> count<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This list has only one node.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input offset:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  offset <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> offset <span class=\"token operator\">>=</span> count<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> offset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad offset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> offset <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    ptr <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> offset <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j <span class=\"token punctuation\">)</span>\n      ptr <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    ptr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">&#123;</span>\n    ptr_list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token operator\">--</span>count<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"delete\"><a class=\"markdownIt-Anchor\" href=\"#delete\">#</a> delete</h3>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  _DWORD <span class=\"token operator\">*</span>res<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-2Ch]</span>\n  <span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-28h]</span>\n  <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-24h]</span>\n  node <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-20h]</span>\n  node <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-18h]</span>\n  node <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-10h]</span>\n  node <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+28h] [rbp-8h]</span>\n\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  idx <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> idx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> idx <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad idx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input offset:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  offset <span class=\"token operator\">=</span> <span class=\"token function\">get_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> offset <span class=\"token operator\">==</span> <span class=\"token number\">0xFF</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> ptr <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> ptr<span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">=</span> next <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      next <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>ptr<span class=\"token operator\">-></span>data <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What are you doing?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      ptr<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      ptr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n      ptr<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n    count<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> offset <span class=\"token operator\">>=</span> count<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> offset <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad offset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> offset <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> offset <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n        p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n      buf <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n      p<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>buf<span class=\"token operator\">-></span>data <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What are you doing?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>buf<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n      ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>p<span class=\"token operator\">-></span>data <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What are you doing?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      p<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n      p<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      p<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">--</span>count<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n      ptr_list<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LODWORD</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>各个模块的可读性非常好（喜），可不要告诉我这样了还找不到洞（</p>\n<p>感兴趣的同学可以自己试着找一下洞，那么本期教你耍 IDA 就到此为止</p>\n",
            "tags": [
                "IDA",
                "C语言"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/",
            "url": "http://niyah.cn/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/",
            "title": "IDA添加自定义结构体",
            "date_published": "2022-02-09T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>IDA</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"ida添加自定义结构体\"><a class=\"markdownIt-Anchor\" href=\"#ida添加自定义结构体\">#</a> IDA 添加自定义结构体</h1>\n<p>在使用 IDA 进行程序分析的时候，通常改变简单数据类型也不能让程序变得可读性更好，这个时候我们就需要简单猜测并恢复一下结构体，让反编译出来的程序可读性更好</p>\n<p>在 IDA 选项卡里有这样一个 <code>Structures</code>  结构体选项卡存放了全局的结构体，我们可以在这里添加定义结构体</p>\n<p><img src=\"/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/image-20220210164026393.png\" alt=\"image-20220210164026393\"></p>\n<p>使用 <code>Insert</code>  插入一个结构体</p>\n<p><img src=\"/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/image-20220210164244940.png\" alt=\"image-20220210164244940\"></p>\n<p>在 ends 处按 <code>D</code>  可以添加数据结构，不断按  <code>D</code>  可以改变数据结构</p>\n<p><img src=\"/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/image-20220210164505161.png\" alt=\"image-20220210164505161\"></p>\n<p>在该变量处按  <code>A</code>  可以改变成字符串</p>\n<p><img src=\"/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/image-20220210164613364.png\" alt=\"image-20220210164613364\"></p>\n<p>如果要添加字符类型数组可以在某一个类型的变量处按  <code>小键盘*</code>  ，这样就会设置成该类型的数组</p>\n<p><img src=\"/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/image-20220210164839419.png\" alt=\"image-20220210164839419\"></p>\n<p>在设置好结构体之后就可以去程序里对符号按 <code>Y</code>  进行类型转化了</p>\n<p><img src=\"/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/image-20220210165347953.png\" alt=\"image-20220210165347953\"></p>\n",
            "tags": [
                "PWN",
                "IDA"
            ]
        }
    ]
}